From: <Saved by Blink>
Snapshot-Content-Location: https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html
Subject: =?utf-8?Q?NVIDIA=20CUDA=20Fortran=20Programming=20Guide=20=E2=80=94=20NVI?=
 =?utf-8?Q?DIA=20CUDA=20Fortran=20Programming=20Guide=2025.3=20documentati?=
 =?utf-8?Q?on?=
Date: Mon, 28 Apr 2025 22:10:25 +0200
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--LqhmvZwTEGngQgONNpxZE3xQGOpsvkJLZXDlKAsK95----"


------MultipartBoundary--LqhmvZwTEGngQgONNpxZE3xQGOpsvkJLZXDlKAsK95----
Content-Type: text/html
Content-ID: <frame-DFFF15E7422D0C005666BAD93256B812@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html

<!DOCTYPE html><html class=3D"writer-html5" lang=3D"en"><div id=3D"in-page-=
channel-node-id" data-channel-name=3D"in_page_channel_slsaKt"></div><head c=
lass=3D"at-element-marker"><meta http-equiv=3D"Content-Type" content=3D"tex=
t/html; charset=3DUTF-8"><link rel=3D"stylesheet" type=3D"text/css" href=3D=
"cid:css-17068ed9-eb5e-4ddd-b262-3834a451267d@mhtml.blink" /><link rel=3D"s=
tylesheet" type=3D"text/css" href=3D"cid:css-00a9d64d-96bb-41d1-a530-7d3291=
7b7981@mhtml.blink" /><link rel=3D"stylesheet" type=3D"text/css" href=3D"ci=
d:css-c8affd41-2f12-409c-bd0b-d0812641aab5@mhtml.blink" />
  <meta name=3D"generator" content=3D"Docutils 0.17.1: http://docutils.sour=
ceforge.net/">

  <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D=
1.0">
  <title>NVIDIA CUDA Fortran Programming Guide =E2=80=94 NVIDIA CUDA Fortra=
n Programming Guide 25.3 documentation</title>
      <link rel=3D"stylesheet" href=3D"https://docs.nvidia.com/hpc-sdk/arch=
ive/25.3/compilers/cuda-fortran-prog-guide/_static/pygments.css" type=3D"te=
xt/css">
      <link rel=3D"stylesheet" href=3D"https://docs.nvidia.com/hpc-sdk/arch=
ive/25.3/compilers/cuda-fortran-prog-guide/_static/css/theme.css" type=3D"t=
ext/css">
      <link rel=3D"stylesheet" href=3D"https://docs.nvidia.com/hpc-sdk/arch=
ive/25.3/compilers/cuda-fortran-prog-guide/_static/copybutton.css" type=3D"=
text/css">
      <link rel=3D"stylesheet" href=3D"https://docs.nvidia.com/hpc-sdk/arch=
ive/25.3/compilers/cuda-fortran-prog-guide/_static/design-style.b7bb847fb20=
b106c3d81b95245e65545.min.css" type=3D"text/css">
      <link rel=3D"stylesheet" href=3D"https://docs.nvidia.com/hpc-sdk/arch=
ive/25.3/compilers/cuda-fortran-prog-guide/_static/omni-style.css" type=3D"=
text/css">
      <link rel=3D"stylesheet" href=3D"https://docs.nvidia.com/hpc-sdk/arch=
ive/25.3/compilers/cuda-fortran-prog-guide/_static/api-styles.css" type=3D"=
text/css">
    <link rel=3D"shortcut icon" href=3D"https://docs.nvidia.com/hpc-sdk/arc=
hive/25.3/compilers/cuda-fortran-prog-guide/_static/favicon.ico">
  <!--[if lt IE 9]>
    <script src=3D"_static/js/html5shiv.min.js"></script>
  <![endif]-->
 =20
       =20
       =20
       =20
       =20
       =20
       =20
       =20
       =20
       =20
   =20
    <link rel=3D"index" title=3D"Index" href=3D"https://docs.nvidia.com/hpc=
-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/genindex.html">
    <link rel=3D"search" title=3D"Search" href=3D"https://docs.nvidia.com/h=
pc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/search.html">
    <link rel=3D"prev" title=3D"Contents" href=3D"https://docs.nvidia.com/h=
pc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/contents.html">
=20

=20

</head>

<body class=3D"wy-body-for-nav" data-new-gr-c-s-check-loaded=3D"14.1233.0" =
data-gr-ext-installed=3D"">=20
  <div class=3D"wy-grid-for-nav">
    <nav data-toggle=3D"wy-nav-shift" class=3D"wy-nav-side">
      <div class=3D"wy-side-scroll">
        <div class=3D"wy-side-nav-search">
            <a href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compile=
rs/cuda-fortran-prog-guide/contents.html">
            <img src=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/_static/acc-comp-logo.png" class=3D"logo" alt=
=3D"Logo">
          </a>

<div role=3D"search">
  <form id=3D"rtd-search-form" class=3D"wy-form" action=3D"https://docs.nvi=
dia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/search.html"=
 method=3D"get">
    <input type=3D"text" name=3D"q" placeholder=3D"Search docs">
   =20
   =20
  </form>
</div>
        </div><div class=3D"wy-menu wy-menu-vertical" data-spy=3D"affix" ro=
le=3D"navigation" aria-label=3D"Navigation menu">
              <ul class=3D"current" aria-expanded=3D"true">
<li class=3D"toctree-l1 current" aria-expanded=3D"true"><a class=3D"referen=
ce internal current" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/c=
ompilers/cuda-fortran-prog-guide/index.html#" aria-expanded=3D"true">1. Int=
roduction</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#programming-guide"><button class=3D"toctree-expand" title=3D"Open/clos=
e menu"></button>2. Programming Guide</a><ul>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cuda-fortran-host-and-device-code">2.1. CUDA Fortran Host and Device C=
ode</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cuda-fortran-kernels">2.2. CUDA Fortran Kernels</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#thread-blocks">2.3. Thread Blocks</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#memory-hierarchy">2.4. Memory Hierarchy</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#subroutine-function-qualifiers"><button class=3D"toctree-expand" title=
=3D"Open/close menu"></button>2.5. Subroutine / Function Qualifiers</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#attributes-host">2.5.1. Attributes(host)</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#attributes-global">2.5.2. Attributes(global)</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#attributes-device">2.5.3. Attributes(device)</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#attributes-host-device">2.5.4. Attributes(host,device)</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#attributes-grid-global">2.5.5. Attributes(grid_global)</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#restrictions">2.5.6. Restrictions</a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#variable-qualifiers"><button class=3D"toctree-expand" title=3D"Open/cl=
ose menu"></button>2.6. Variable Qualifiers</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#id1">2.6.1. Attributes(device)</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#attributes-managed">2.6.2. Attributes(managed)</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#attributes-constant">2.6.3. Attributes(constant)</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#attributes-shared">2.6.4. Attributes(shared)</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#attributes-pinned">2.6.5. Attributes(pinned)</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#attributes-texture">2.6.6. Attributes(texture)</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#attributes-unified">2.6.7. Attributes(unified)</a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#datatypes-in-device-subprograms"><button class=3D"toctree-expand" titl=
e=3D"Open/close menu"></button>2.7. Datatypes in Device Subprograms</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#half-precision-floating-point">2.7.1. Half-precision Floating Point</a=
></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#predefined-variables-in-device-subprograms">2.8. Predefined Variables =
in Device Subprograms</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#execution-configuration">2.9. Execution Configuration</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#asynchronous-concurrent-execution"><button class=3D"toctree-expand" ti=
tle=3D"Open/close menu"></button>2.10. Asynchronous Concurrent Execution</a=
><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#concurrent-host-and-device-execution">2.10.1. Concurrent Host and Devi=
ce Execution</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#concurrent-stream-execution">2.10.2. Concurrent Stream Execution</a></=
li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#kernel-loop-directive"><button class=3D"toctree-expand" title=3D"Open/=
close menu"></button>2.11. Kernel Loop Directive</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#syntax">2.11.1. Syntax</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#restrictions-on-the-cuf-kernel-directive">2.11.2. Restrictions on the =
CUF kernel directive</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#summation-example">2.11.3. Summation Example</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#explicit-reductions">2.11.4. Explicit Reductions</a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#using-fortran-modules"><button class=3D"toctree-expand" title=3D"Open/=
close menu"></button>2.12. Using Fortran Modules</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#accessing-data-from-other-modules">2.12.1. Accessing Data from Other M=
odules</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#call-routines-from-other-modules">2.12.2. Call Routines from Other Mod=
ules</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#declaring-device-pointer-and-target-arrays">2.12.3. Declaring Device P=
ointer and Target Arrays</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#declaring-textures">2.12.4. Declaring Textures</a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cuda-fortran-conditional-compilation">2.13. CUDA Fortran Conditional C=
ompilation</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#building-a-cuda-fortran-program">2.14. Building a CUDA Fortran Program=
</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#managed-and-unified-memory-options-and-interoperability">2.15. Managed=
 and Unified Memory Options and Interoperability</a></li>
</ul>
</li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#reference"><button class=3D"toctree-expand" title=3D"Open/close menu">=
</button>3. Reference</a><ul>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#new-subroutine-and-function-attributes"><button class=3D"toctree-expan=
d" title=3D"Open/close menu"></button>3.1. New Subroutine and Function Attr=
ibutes</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#host-subroutines-and-functions">3.1.1. Host Subroutines and Functions<=
/a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#global-and-grid-global-subroutines">3.1.2. Global and Grid_Global Subr=
outines</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#device-subroutines-and-functions">3.1.3. Device Subroutines and Functi=
ons</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#restrictions-on-kernel-subroutines-and-device-subprograms">3.1.4. Rest=
rictions on Kernel Subroutines and Device Subprograms</a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#variable-attributes"><button class=3D"toctree-expand" title=3D"Open/cl=
ose menu"></button>3.2. Variable Attributes</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#device-data">3.2.1. Device data</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#managed-data">3.2.2. Managed data</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#unified-data">3.2.3. Unified data</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#pinned-arrays">3.2.4. Pinned arrays</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#constant-data">3.2.5. Constant data</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#shared-data">3.2.6. Shared data</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#texture-data">3.2.7. Texture data</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#value-dummy-arguments">3.2.8. Value dummy arguments</a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#allocating-device-memory-pinned-memory-and-managed-memory"><button cla=
ss=3D"toctree-expand" title=3D"Open/close menu"></button>3.3. Allocating De=
vice Memory, Pinned Memory, and Managed Memory</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#allocating-device-memory">3.3.1. Allocating Device Memory</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#allocating-device-memory-using-runtime-routines">3.3.2. Allocating Dev=
ice Memory Using Runtime Routines</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#allocate-pinned-memory">3.3.3. Allocate Pinned Memory</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#allocating-managed-memory">3.3.4. Allocating Managed Memory</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#allocating-managed-memory-using-runtime-routines">3.3.5. Allocating Ma=
naged Memory Using Runtime Routines</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#allocating-device-memory-asynchronously">3.3.6. Allocating Device Memo=
ry Asynchronously</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#allocating-device-memory-asynchronously-using-runtime-routines">3.3.7.=
 Allocating Device Memory Asynchronously Using Runtime Routines</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#controlling-device-data-is-managed">3.3.8. Controlling Device Data is =
Managed</a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#data-transfer-between-host-and-device-memory"><button class=3D"toctree=
-expand" title=3D"Open/close menu"></button>3.4. Data transfer between host=
 and device memory</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#data-transfer-using-assignment-statements">3.4.1. Data Transfer Using =
Assignment Statements</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#implicit-data-transfer-in-expressions">3.4.2. Implicit Data Transfer i=
n Expressions</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#data-transfer-using-runtime-routines">3.4.3. Data Transfer Using Runti=
me Routines</a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#invoking-a-kernel-subroutine">3.5. Invoking a kernel subroutine</a></l=
i>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#device-code"><button class=3D"toctree-expand" title=3D"Open/close menu=
"></button>3.6. Device code</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#datatypes-allowed">3.6.1. Datatypes Allowed</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#built-in-variables">3.6.2. Built-in Variables</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#fortran-intrinsics">3.6.3. Fortran Intrinsics</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#synchronization-functions">3.6.4. Synchronization Functions</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#warp-vote-operations">3.6.5. Warp-Vote Operations</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#load-and-store-functions-using-cache-hints">3.6.6. Load and Store Func=
tions Using Cache Hints</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#load-and-store-functions-using-bulk-tma-operations">3.6.7. Load and St=
ore Functions Using Bulk TMA Operations</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#atomic-functions">3.6.8. Atomic Functions</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#fortran-i-o">3.6.9. Fortran I/O</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#print-example">3.6.10. PRINT Example</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#shuffle-functions">3.6.11. Shuffle Functions</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#id2">3.6.12. Restrictions</a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#host-code"><button class=3D"toctree-expand" title=3D"Open/close menu">=
</button>3.7. Host code</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#sizeof-intrinsic">3.7.1. SIZEOF Intrinsic</a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#fortran-device-modules"><button class=3D"toctree-expand" title=3D"Open=
/close menu"></button>3.8. Fortran Device Modules</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#libm-device-module">3.8.1. LIBM Device Module</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cooperative-groups-device-module">3.8.2. Cooperative Groups Device Mod=
ule</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#wmma-warp-matrix-multiply-add-module">3.8.3. WMMA (Warp Matrix Multipl=
y Add) Module</a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#fortran-host-modules"><button class=3D"toctree-expand" title=3D"Open/c=
lose menu"></button>3.9. Fortran Host Modules</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#overloaded-fortran-reduction-intrinsics-in-gpu-reductions-and-cudafor"=
><button class=3D"toctree-expand" title=3D"Open/close menu"></button>3.9.1.=
 Overloaded Fortran Reduction Intrinsics in GPU_REDUCTIONS and CUDAFOR</a><=
ul>
<li class=3D"toctree-l4"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#fortran-sum-intrinsic-function">3.9.1.1. Fortran SUM Intrinsic Functio=
n</a></li>
<li class=3D"toctree-l4"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#fortran-maxval-intrinsic-function">3.9.1.2. Fortran MAXVAL Intrinsic F=
unction</a></li>
<li class=3D"toctree-l4"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#fortran-minval-intrinsic-function">3.9.1.3. Fortran MINVAL Intrinsic F=
unction</a></li>
<li class=3D"toctree-l4"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#fortran-maxloc-intrinsic-function">3.9.1.4. Fortran MAXLOC Intrinsic F=
unction</a></li>
<li class=3D"toctree-l4"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#fortran-minloc-intrinsic-function">3.9.1.5. Fortran MINLOC Intrinsic F=
unction</a></li>
</ul>
</li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#fortran-sorting-subroutines-module">3.9.2. Fortran Sorting Subroutines=
 Module</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#overloaded-fortran-reduction-intrinsics-in-cutensorex"><button class=
=3D"toctree-expand" title=3D"Open/close menu"></button>3.9.3. Overloaded Fo=
rtran Reduction Intrinsics in CUTENSOREX</a><ul>
<li class=3D"toctree-l4"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#overloaded-logical-array-assignment-in-cutensorex">3.9.3.1. Overloaded=
 Logical Array Assignment in CUTENSOREX</a></li>
<li class=3D"toctree-l4"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#fortran-all-intrinsic-function">3.9.3.2. Fortran ALL Intrinsic Functio=
n</a></li>
<li class=3D"toctree-l4"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#fortran-any-intrinsic-function">3.9.3.3. Fortran ANY Intrinsic Functio=
n</a></li>
<li class=3D"toctree-l4"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#fortran-count-intrinsic-function">3.9.3.4. Fortran COUNT Intrinsic Fun=
ction</a></li>
</ul>
</li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#overloaded-fortran-array-intrinsics-in-cutensorex"><button class=3D"to=
ctree-expand" title=3D"Open/close menu"></button>3.9.4. Overloaded Fortran =
Array Intrinsics in CUTENSOREX</a><ul>
<li class=3D"toctree-l4"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#fortran-merge-intrinsic-function">3.9.4.1. Fortran MERGE Intrinsic Fun=
ction</a></li>
<li class=3D"toctree-l4"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#fortran-pack-intrinsic-function">3.9.4.2. Fortran PACK Intrinsic Funct=
ion</a></li>
<li class=3D"toctree-l4"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#fortran-packloc-function">3.9.4.3. Fortran PACKLOC Function</a></li>
<li class=3D"toctree-l4"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#fortran-unpack-intrinsic-function">3.9.4.4. Fortran UNPACK Intrinsic F=
unction</a></li>
<li class=3D"toctree-l4"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#fortran-count-prefix-intrinsic-function">3.9.4.5. Fortran COUNT_PREFIX=
 Intrinsic Function</a></li>
<li class=3D"toctree-l4"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#fortran-sum-prefix-intrinsic-function">3.9.4.6. Fortran SUM_PREFIX Int=
rinsic Function</a></li>
<li class=3D"toctree-l4"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#fortran-reshape-intrinsic-function">3.9.4.7. Fortran RESHAPE Intrinsic=
 Function</a></li>
<li class=3D"toctree-l4"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#fortran-transpose-intrinsic-function">3.9.4.8. Fortran TRANSPOSE Intri=
nsic Function</a></li>
<li class=3D"toctree-l4"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#fortran-spread-intrinsic-function">3.9.4.9. Fortran SPREAD Intrinsic F=
unction</a></li>
<li class=3D"toctree-l4"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#fortran-matmul-intrinsic-function">3.9.4.10. Fortran MATMUL Intrinsic =
Function</a></li>
<li class=3D"toctree-l4"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#fortran-dot-product-intrinsic-function">3.9.4.11. Fortran DOT_PRODUCT =
Intrinsic Function</a></li>
<li class=3D"toctree-l4"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#fortran-random-number-intrinsic-function">3.9.4.12. Fortran RANDOM_NUM=
BER Intrinsic Function</a></li>
</ul>
</li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#other-cuda-library-host-modules">3.9.5. Other CUDA Library Host Module=
s</a></li>
</ul>
</li>
</ul>
</li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#runtime-apis"><button class=3D"toctree-expand" title=3D"Open/close men=
u"></button>4. Runtime APIs</a><ul>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#initialization">4.1. Initialization</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#device-management"><button class=3D"toctree-expand" title=3D"Open/clos=
e menu"></button>4.2. Device Management</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudachoosedevice">4.2.1. cudaChooseDevice</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudadevicegetattribute">4.2.2. cudaDeviceGetAttribute</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudadevicegetcacheconfig">4.2.3. cudaDeviceGetCacheConfig</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudadevicegetlimit">4.2.4. cudaDeviceGetLimit</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudadevicegetsharedmemconfig">4.2.5. cudaDeviceGetSharedMemConfig</a><=
/li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudadevicegetstreampriorityrange">4.2.6. cudaDeviceGetStreamPriorityRa=
nge</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudadevicereset">4.2.7. cudaDeviceReset</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudadevicesetcacheconfig">4.2.8. cudaDeviceSetCacheConfig</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudadevicesetlimit">4.2.9. cudaDeviceSetLimit</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudadevicesetsharedmemconfig">4.2.10. cudaDeviceSetSharedMemConfig</a>=
</li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudadevicesynchronize">4.2.11. cudaDeviceSynchronize</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudagetdevice">4.2.12. cudaGetDevice</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudagetdevicecount">4.2.13. cudaGetDeviceCount</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudagetdeviceproperties">4.2.14. cudaGetDeviceProperties</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudasetdevice">4.2.15. cudaSetDevice</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudasetdeviceflags">4.2.16. cudaSetDeviceFlags</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudasetvaliddevices">4.2.17. cudaSetValidDevices</a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#thread-management"><button class=3D"toctree-expand" title=3D"Open/clos=
e menu"></button>4.3. Thread Management</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudathreadexit">4.3.1. cudaThreadExit</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudathreadsynchronize">4.3.2. cudaThreadSynchronize</a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#id3"><button class=3D"toctree-expand" title=3D"Open/close menu"></butt=
on>4.4. Error Handling</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudageterrorstring">4.4.1. cudaGetErrorString</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudagetlasterror">4.4.2. cudaGetLastError</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudapeekatlasterror">4.4.3. cudaPeekAtLastError</a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#stream-management"><button class=3D"toctree-expand" title=3D"Open/clos=
e menu"></button>4.5. Stream Management</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudaforgetdefaultstream">4.5.1. cudaforGetDefaultStream</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudaforsetdefaultstream">4.5.2. cudaforSetDefaultStream</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudastreamattachmemasync">4.5.3. cudaStreamAttachMemAsync</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudastreamcreate">4.5.4. cudaStreamCreate</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudastreamcreatewithflags">4.5.5. cudaStreamCreateWithFlags</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudastreamcreatewithpriority">4.5.6. cudaStreamCreateWithPriority</a><=
/li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudastreamdestroy">4.5.7. cudaStreamDestroy</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudastreamgetpriority">4.5.8. cudaStreamGetPriority</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudastreamquery">4.5.9. cudaStreamQuery</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudastreamsynchronize">4.5.10. cudaStreamSynchronize</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudastreamwaitevent">4.5.11. cudaStreamWaitEvent</a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#event-management"><button class=3D"toctree-expand" title=3D"Open/close=
 menu"></button>4.6. Event Management</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudaeventcreate">4.6.1. cudaEventCreate</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudaeventcreatewithflags">4.6.2. cudaEventCreateWithFlags</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudaeventdestroy">4.6.3. cudaEventDestroy</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudaeventelapsedtime">4.6.4. cudaEventElapsedTime</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudaeventquery">4.6.5. cudaEventQuery</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudaeventrecord">4.6.6. cudaEventRecord</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudaeventsynchronize">4.6.7. cudaEventSynchronize</a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#execution-control"><button class=3D"toctree-expand" title=3D"Open/clos=
e menu"></button>4.7. Execution Control</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudafuncgetattributes">4.7.1. cudaFuncGetAttributes</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudafuncsetattribute">4.7.2. cudaFuncSetAttribute</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudafuncsetcacheconfig">4.7.3. cudaFuncSetCacheConfig</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudafuncsetsharedmemconfig">4.7.4. cudaFuncSetSharedMemConfig</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudasetdoublefordevice">4.7.5. cudaSetDoubleForDevice</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudasetdoubleforhost">4.7.6. cudaSetDoubleForHost</a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#occupancy"><button class=3D"toctree-expand" title=3D"Open/close menu">=
</button>4.8. Occupancy</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudaoccupancymaxactiveblockspermultiprocessor">4.8.1. cudaOccupancyMax=
ActiveBlocksPerMultiprocessor</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudaoccupancymaxactiveblockspermultiprocessorwithflags">4.8.2. cudaOcc=
upancyMaxActiveBlocksPerMultiprocessorWithFlags</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudaoccupancymaxpotentialclustersize">4.8.3. cudaOccupancyMaxPotential=
ClusterSize</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudaoccupancymaxactiveclusters">4.8.4. cudaOccupancyMaxActiveClusters<=
/a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#memory-management"><button class=3D"toctree-expand" title=3D"Open/clos=
e menu"></button>4.9. Memory Management</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudafree">4.9.1. cudaFree</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudafreearray">4.9.2. cudaFreeArray</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudafreeasync">4.9.3. cudaFreeAsync</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudafreehost">4.9.4. cudaFreeHost</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudagetsymboladdress">4.9.5. cudaGetSymbolAddress</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudagetsymbolsize">4.9.6. cudaGetSymbolSize</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudahostalloc">4.9.7. cudaHostAlloc</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudahostgetdevicepointer">4.9.8. cudaHostGetDevicePointer</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudahostgetflags">4.9.9. cudaHostGetFlags</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudahostregister">4.9.10. cudaHostRegister</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudahostunregister">4.9.11. cudaHostUnregister</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamalloc">4.9.12. cudaMalloc</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamallocarray">4.9.13. cudaMallocArray</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamallocasync">4.9.14. cudaMallocAsync</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamallocmanaged">4.9.15. cudaMallocManaged</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamallocpitch">4.9.16. cudaMallocPitch</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamalloc3d">4.9.17. cudaMalloc3D</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamalloc3darray">4.9.18. cudaMalloc3DArray</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamemadvise">4.9.19. cudaMemAdvise</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamemcpy">4.9.20. cudaMemcpy</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamemcpyarraytoarray">4.9.21. cudaMemcpyArrayToArray</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamemcpyasync">4.9.22. cudaMemcpyAsync</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamemcpyfromarray">4.9.23. cudaMemcpyFromArray</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamemcpyfromsymbol">4.9.24. cudaMemcpyFromSymbol</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamemcpyfromsymbolasync">4.9.25. cudaMemcpyFromSymbolAsync</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamemcpypeer">4.9.26. cudaMemcpyPeer</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamemcpypeerasync">4.9.27. cudaMemcpyPeerAsync</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamemcpytoarray">4.9.28. cudaMemcpyToArray</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamemcpytosymbol">4.9.29. cudaMemcpyToSymbol</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamemcpytosymbolasync">4.9.30. cudaMemcpyToSymbolAsync</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamemcpy2d">4.9.31. cudaMemcpy2D</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamemcpy2darraytoarray">4.9.32. cudaMemcpy2DArrayToArray</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamemcpy2dasync">4.9.33. cudaMemcpy2DAsync</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamemcpy2dfromarray">4.9.34. cudaMemcpy2DFromArray</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamemcpy2dtoarray">4.9.35. cudaMemcpy2DToArray</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamemcpy3d">4.9.36. cudaMemcpy3D</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamemcpy3dasync">4.9.37. cudaMemcpy3DAsync</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamemgetinfo">4.9.38. cudaMemGetInfo</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamemprefetchasync">4.9.39. cudaMemPrefetchAsync</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamemset">4.9.40. cudaMemset</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamemsetasync">4.9.41. cudaMemsetAsync</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamemset2d">4.9.42. cudaMemset2D</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudamemset3d">4.9.43. cudaMemset3D</a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#unified-addressing-and-peer-device-memory-access"><button class=3D"toc=
tree-expand" title=3D"Open/close menu"></button>4.10. Unified Addressing an=
d Peer Device Memory Access</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudadevicecanaccesspeer">4.10.1. cudaDeviceCanAccessPeer</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudadevicedisablepeeraccess">4.10.2. cudaDeviceDisablePeerAccess</a></=
li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudadeviceenablepeeraccess">4.10.3. cudaDeviceEnablePeerAccess</a></li=
>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudapointergetattributes">4.10.4. cudaPointerGetAttributes</a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#version-management"><button class=3D"toctree-expand" title=3D"Open/clo=
se menu"></button>4.11. Version Management</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudadrivergetversion">4.11.1. cudaDriverGetVersion</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudaruntimegetversion">4.11.2. cudaRuntimeGetVersion</a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#profiling-management"><button class=3D"toctree-expand" title=3D"Open/c=
lose menu"></button>4.12. Profiling Management</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudaprofilerstart">4.12.1. cudaProfilerStart</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudaprofilerstop">4.12.2. cudaProfilerStop</a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cuda-graph-management"><button class=3D"toctree-expand" title=3D"Open/=
close menu"></button>4.13. CUDA Graph Management</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudagraphcreate">4.13.1. cudaGraphCreate</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudagraphdestroy">4.13.2. cudaGraphDestroy</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudagraphexecdestroy">4.13.3. cudaGraphExecDestroy</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudagraphinstantiate">4.13.4. cudaGraphInstantiate</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudagraphlaunch">4.13.5. cudaGraphLaunch</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudastreambegincapture">4.13.6. cudaStreamBeginCapture</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudastreamendcapture">4.13.7. cudaStreamEndCapture</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cudastreamiscapturing">4.13.8. cudaStreamIsCapturing</a></li>
</ul>
</li>
</ul>
</li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#examples"><button class=3D"toctree-expand" title=3D"Open/close menu"><=
/button>5. Examples</a><ul>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#matrix-multiplication-example"><button class=3D"toctree-expand" title=
=3D"Open/close menu"></button>5.1. Matrix Multiplication Example</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#source-code-listing">5.1.1. Source Code Listing</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#source-code-description">5.1.2. Source Code Description</a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#mapped-memory-example">5.2. Mapped Memory Example</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cublas-module-example">5.3. Cublas Module Example</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cuda-device-properties-example">5.4. CUDA Device Properties Example</a=
></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#cuda-asynchronous-memory-transfer-example">5.5. CUDA Asynchronous Memo=
ry Transfer Example</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#managed-memory-example">5.6. Managed Memory Example</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#wmma-tensor-core-example">5.7. WMMA Tensor Core Example</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://do=
cs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.=
html#openacc-interoperability-example">5.8. OpenACC Interoperability Exampl=
e</a></li>
</ul>
</li>
</ul>

        </div>
      </div>
    </nav>

    <section data-toggle=3D"wy-nav-shift" class=3D"wy-nav-content-wrap"><na=
v class=3D"wy-nav-top" aria-label=3D"Mobile navigation menu">
          <i data-toggle=3D"wy-nav-top" class=3D"fa fa-bars"></i>
          <a href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers=
/cuda-fortran-prog-guide/contents.html">NVIDIA CUDA Fortran Programming Gui=
de</a>
      </nav>

      <div class=3D"wy-nav-content">
        <div class=3D"rst-content">
          <div role=3D"navigation" aria-label=3D"Page navigation">
  <ul class=3D"wy-breadcrumbs">


<li><a href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-=
fortran-prog-guide/contents.html" class=3D"icon icon-home"></a> =C2=BB</li>
 =20
<li>NVIDIA CUDA Fortran Programming Guide</li>

      <li class=3D"wy-breadcrumbs-aside">
      </li>
<li class=3D"wy-breadcrumbs-aside">


  <span>v25.3 |</span>



  <a href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/pdf/hpc251cudafor=
ug.pdf" class=3D"reference external">PDF</a>



  <span>|</span>



  <a href=3D"https://docs.nvidia.com/hpc-sdk/archive/" class=3D"reference e=
xternal">Archive</a>


  <span>&nbsp;</span>
</li>

  </ul>
  <hr>
</div>
          <div role=3D"main" class=3D"document" itemscope=3D"itemscope" ite=
mtype=3D"http://schema.org/Article">
           <div itemprop=3D"articleBody">
            =20
  <p class=3D"rubric-h1 rubric">NVIDIA CUDA Fortran Programming Guide</p>
<p class=3D"rubric-h1 rubric">Preface</p>
<p>This document describes CUDA Fortran, a small set of extensions to Fortr=
an that supports and is built upon the CUDA computing architecture.</p>
<p class=3D"rubric-h2 rubric">Intended Audience</p>
<p>This guide is intended for application programmers, scientists and engin=
eers proficient in programming with the Fortran, C, and/or C++ languages. T=
he tools are available on a variety of operating systems for the x86-64 and=
 Arm server hardware platforms. This guide assumes familiarity with basic o=
perating system usage.</p>
<p class=3D"rubric-h2 rubric">Organization</p>
<p>The organization of this document is as follows:</p>
<dl class=3D"simple">
<dt><a class=3D"reference internal" href=3D"https://docs.nvidia.com/hpc-sdk=
/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#cf-introduction"=
><span class=3D"std std-ref">Introduction</span></a></dt><dd><p>contains a =
general introduction</p>
</dd>
<dt><a class=3D"reference internal" href=3D"https://docs.nvidia.com/hpc-sdk=
/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#cf-prog-guide"><=
span class=3D"std std-ref">Programming Guide</span></a></dt><dd><p>serves a=
s a programming guide for CUDA Fortran</p>
</dd>
<dt><a class=3D"reference internal" href=3D"https://docs.nvidia.com/hpc-sdk=
/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#cf-cuda-fort-ref=
"><span class=3D"std std-ref">Reference</span></a></dt><dd><p>describes the=
 CUDA Fortran language reference</p>
</dd>
<dt><a class=3D"reference internal" href=3D"https://docs.nvidia.com/hpc-sdk=
/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#cfapi-runtime"><=
span class=3D"std std-ref">Runtime APIs</span></a></dt><dd><p>describes the=
 interface between CUDA Fortran and the CUDA Runtime API</p>
</dd>
<dt><a class=3D"reference internal" href=3D"https://docs.nvidia.com/hpc-sdk=
/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#cf-examples"><sp=
an class=3D"std std-ref">Examples</span></a></dt><dd><p>provides sample cod=
e and an explanation of the simple example.</p>
</dd>
</dl>
<p class=3D"rubric-h2 rubric">Conventions</p>
<p>This guide uses the following conventions:</p>
<dl class=3D"simple">
<dt><em>italic</em></dt><dd><p>is used for emphasis.</p>
</dd>
<dt><code class=3D"docutils literal notranslate"><span class=3D"pre">Consta=
nt</span> <span class=3D"pre">Width</span></code></dt><dd><p>is used for fi=
lenames, directories, arguments, options, examples, and for language statem=
ents in the text, including assembly language statements.</p>
</dd>
<dt><strong>Bold</strong></dt><dd><p>is used for commands.</p>
</dd>
<dt>[ item1 ]</dt><dd><p>in general, square brackets indicate optional item=
s. In this case item1 is optional. In the context of p/t-sets, square brack=
ets are required to specify a p/t-set.</p>
</dd>
<dt>{ item2 | item 3 }</dt><dd><p>braces indicate that a selection is requi=
red. In this case, you must select either item2 or item3.</p>
</dd>
<dt>filename =E2=80=A6</dt><dd><p>ellipsis indicate a repetition. Zero or m=
ore of the preceding item may occur. In this example, multiple filenames ar=
e allowed.</p>
</dd>
<dt><em>FORTRAN</em></dt><dd><p>Fortran language statements are shown in th=
e text of this guide using a reduced fixed point size.</p>
</dd>
<dt><em>C/C++</em></dt><dd><p>C/C++ language statements are shown in the te=
st of this guide using a reduced fixed point size.</p>
</dd>
</dl>
<p>The NVIDIA HPC compilers are supported on 64-bit variants of the Linux o=
perating system on a variety of x86-compatible and Arm processors.</p>
<span class=3D"target" id=3D"cf-related-publications"></span><p class=3D"ru=
bric-h2 rubric">Related Publications</p>
<p>The following documents contain additional information related to CUDA F=
ortran programming.</p>
<ul class=3D"simple">
<li><p>ISO/IEC 1539-1:1997, Information Technology =E2=80=93 Programming La=
nguages =E2=80=93 FORTRAN, Geneva, 1997 (Fortran 95).</p></li>
<li><p>NVIDIA CUDA Programming Guides, NVIDIA, Version 11, 11/23/2021. Avai=
lable online at <a class=3D"reference external" href=3D"https://docs.nvidia=
.com/cuda/#programming-guides">docs.nvidia.com/cuda</a>.</p></li>
<li><p>NVIDIA HPC Compiler User=E2=80=99s Guide, Release 2024. Available on=
line at <a class=3D"reference external" href=3D"https://docs.nvidia.com/hpc=
-sdk/">docs.nvidia.com/hpc-sdk</a>.</p></li>
<li><p>NVIDIA Fortran CUDA Interfaces, Release 2024. Available online at <a=
 class=3D"reference external" href=3D"https://docs.nvidia.com/hpc-sdk/compi=
lers/fortran-cuda-interfaces">docs.nvidia.com/hpc-sdk/fortran-cuda-interfac=
es</a>.</p></li>
</ul>
<span class=3D"target" id=3D"cf-introduction"></span><section id=3D"introdu=
ction">
<h1><span class=3D"section-number">1. </span>Introduction<a class=3D"header=
link" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-f=
ortran-prog-guide/index.html#introduction" title=3D"Permalink to this headl=
ine">=EF=83=81</a></h1>
<p>Welcome to Release 2024 of NVIDIA CUDA Fortran, a small set of extension=
s to Fortran that supports and is built upon the CUDA computing architectur=
e.</p>
<p>Graphic processing units or GPUs have evolved into programmable, highly =
parallel computational units with very high memory bandwidth, and tremendou=
s potential for many applications. GPU designs are optimized for the comput=
ations found in graphics rendering, but are general enough to be useful in =
many data-parallel, compute-intensive programs.</p>
<p>NVIDIA introduced CUDA<sup>=C2=AE</sup>, a general purpose parallel prog=
ramming architecture, with compilers and libraries to support the programmi=
ng of NVIDIA GPUs. CUDA comes with an extended C compiler, here called CUDA=
 C, allowing direct programming of the GPU from a high level language. The =
programming model supports four key abstractions: cooperating threads organ=
ized into thread groups, shared memory and barrier synchronization within t=
hread groups, and coordinated independent thread groups organized into a gr=
id. A CUDA programmer must partition the program into coarse grain blocks t=
hat can be executed in parallel. Each block is partitioned into fine grain =
threads, which can cooperate using shared memory and barrier synchronizatio=
n. A properly designed CUDA program will run on any CUDA-enabled GPU, regar=
dless of the number of available processor cores.</p>
<p>CUDA Fortran includes a Fortran 2003 compiler and tool chain for program=
ming NVIDIA GPUs using Fortran. NVIDIA 2024 includes support for CUDA Fortr=
an on Linux. CUDA Fortran is an analog to NVIDIA=E2=80=99s CUDA C compiler.=
 Compared to the NVIDIA OpenACC directives-based model and compilers, CUDA =
Fortran is a lower-level explicit programming model with substantial runtim=
e library components that give expert programmers direct control of all asp=
ects of GPGPU programming.</p>
<p>The CUDA Fortran extensions described in this document allow the followi=
ng operations in a Fortran program:</p>
<ul class=3D"simple">
<li><p>Declaring variables that are allocated in the GPU device memory</p><=
/li>
<li><p>Allocating dynamic memory in the GPU device memory</p></li>
<li><p>Copying data from the host memory to the GPU memory, and back</p></l=
i>
<li><p>Writing subroutines and functions to execute on the GPU</p></li>
<li><p>Invoking GPU subroutines from the host</p></li>
<li><p>Allocating pinned memory on the host</p></li>
<li><p>Using asynchronous transfers between the host and GPU</p></li>
<li><p>Using zero-copy and CUDA Unified Virtual Addressing features.</p></l=
i>
<li><p>Accessing read-only data through texture memory caches.</p></li>
<li><p>Automatically generating GPU kernels using the kernel loop directive=
.</p></li>
<li><p>Launching GPU kernels from other GPU subroutines running on the devi=
ce using dynamic parallelism features.</p></li>
<li><p>Relocatable device code: Creating and linking device libraries and c=
alling functions defined in other modules and files.</p></li>
<li><p>Interfacing to CUDA C.</p></li>
<li><p>Programming access to Tensor Core hardware.</p></li>
</ul>
<span class=3D"target" id=3D"cf-prog-guide"></span></section>
<section id=3D"programming-guide">
<h1><span class=3D"section-number">2. </span>Programming Guide<a class=3D"h=
eaderlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/c=
uda-fortran-prog-guide/index.html#programming-guide" title=3D"Permalink to =
this headline">=EF=83=81</a></h1>
<p>This section introduces the CUDA programming model through examples writ=
ten in CUDA Fortran. For a reference for CUDA Fortran, refer to <a class=3D=
"reference internal" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/c=
ompilers/cuda-fortran-prog-guide/index.html#cf-cuda-fort-ref"><span class=
=3D"std std-ref">Reference</span></a>.</p>
<section id=3D"cuda-fortran-host-and-device-code">
<h2><span class=3D"section-number">2.1. </span>CUDA Fortran Host and Device=
 Code<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archiv=
e/25.3/compilers/cuda-fortran-prog-guide/index.html#cuda-fortran-host-and-d=
evice-code" title=3D"Permalink to this headline">=EF=83=81</a></h2>
<p>All CUDA programs, and in general any program which uses a GPU for compu=
tation, must perform the following steps:</p>
<ol class=3D"arabic simple">
<li><p>Initialize and select the GPU to run on. Oftentimes this is implicit=
 in the program and defaults to NVIDIA device 0.</p></li>
<li><p>Allocate space for data on the GPU.</p></li>
<li><p>Move data from the host to the GPU, or in some cases, initialize the=
 data on the GPU.</p></li>
<li><p>Launch kernels from the host to run on the GPU.</p></li>
<li><p>Gather results back from the GPU for further analysis our output fro=
m the host program.</p></li>
<li><p>Deallocate the data on the GPU allocated in step 2. This might be im=
plicitly performed when the host program exits.</p></li>
</ol>
<p>Here is a simple CUDA Fortran example which performs the required steps:=
</p>
<p><strong>Explicit Device Selection</strong></p>
<div class=3D"wy-table-responsive"><table class=3D"table-no-stripes docutil=
s align-default">
<colgroup>
<col style=3D"width: 61%">
<col style=3D"width: 39%">
</colgroup>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>Host code</p></th>
<th class=3D"head"><p>Device Code</p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><div class=3D"highlight-fortran notranslate"><di=
v class=3D"highlight"><pre id=3D"codecell0"><span></span><span class=3D"k">=
program </span><span class=3D"n">t1</span><span class=3D"w"></span>
<span class=3D"k">use </span><span class=3D"n">cudafor</span><span class=3D=
"w"></span>
<span class=3D"k">use </span><span class=3D"n">mytests</span><span class=3D=
"w"></span>
<span class=3D"kt">integer</span><span class=3D"p">,</span><span class=3D"w=
"> </span><span class=3D"k">parameter</span><span class=3D"w"> </span><span=
 class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">n</span>=
<span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </=
span><span class=3D"mi">100</span><span class=3D"w"></span>
<span class=3D"kt">integer</span><span class=3D"p">,</span><span class=3D"w=
"> </span><span class=3D"k">allocatable</span><span class=3D"p">,</span><sp=
an class=3D"w"> </span><span class=3D"n">device</span><span class=3D"w"> </=
span><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n=
">iarr</span><span class=3D"p">(:)</span><span class=3D"w"></span>
<span class=3D"kt">integer </span><span class=3D"n">h</span><span class=3D"=
p">(</span><span class=3D"n">n</span><span class=3D"p">)</span><span class=
=3D"w"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaSetDevice</span><=
span class=3D"p">(</span><span class=3D"mi">0</span><span class=3D"p">)</sp=
an><span class=3D"w"></span>
<span class=3D"k">allocate</span><span class=3D"p">(</span><span class=3D"n=
">iarr</span><span class=3D"p">(</span><span class=3D"n">n</span><span clas=
s=3D"p">))</span><span class=3D"w"></span>
<span class=3D"n">h</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"mi">0</span><span class=3D"p"=
>;</span><span class=3D"w"> </span><span class=3D"n">iarr</span><span class=
=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span =
class=3D"n">h</span><span class=3D"w"></span>
<span class=3D"k">call </span><span class=3D"n">test1</span><span class=3D"=
o">&lt;&lt;&lt;</span><span class=3D"mi">1</span><span class=3D"p">,</span>=
<span class=3D"n">n</span><span class=3D"o">&gt;&gt;&gt;</span><span class=
=3D"w"> </span><span class=3D"p">(</span><span class=3D"n">iarr</span><span=
 class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">h</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">iarr</span><span class=3D"=
w"></span>
<span class=3D"k">print</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"p">,&amp;</span><span class=3D"w"></span>
<span class=3D"s2">"Errors: "</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"nb">count</span><span class=3D"p">(</span><sp=
an class=3D"n">h</span><span class=3D"p">.</span><span class=3D"n">ne</span=
><span class=3D"p">.(</span><span class=3D"o">/</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">=
,</span><span class=3D"n">i</span><span class=3D"o">=3D</span><span class=
=3D"mi">1</span><span class=3D"p">,</span><span class=3D"n">n</span><span c=
lass=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">/</span><spa=
n class=3D"p">))</span><span class=3D"w"></span>
<span class=3D"k">deallocate</span><span class=3D"p">(</span><span class=3D=
"n">iarr</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"k">end program </span><span class=3D"n">t1</span><span class=
=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell0">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</td>
<td><div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><=
pre id=3D"codecell1"><span></span><span class=3D"k">module </span><span cla=
ss=3D"n">mytests</span><span class=3D"w"></span>
<span class=3D"k">contains</span>
<span class=3D"n">attributes</span><span class=3D"p">(</span><span class=3D=
"n">global</span><span class=3D"p">)</span><span class=3D"w">  </span><span=
 class=3D"p">&amp;</span><span class=3D"w"></span>
<span class=3D"k">subroutine </span><span class=3D"n">test1</span><span cla=
ss=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">a</span><span =
class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"kt">integer</span><span class=3D"p">,</span><span class=3D"w=
"> </span><span class=3D"n">device</span><span class=3D"w"> </span><span cl=
ass=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">a</span><sp=
an class=3D"p">(</span><span class=3D"o">*</span><span class=3D"p">)</span>=
<span class=3D"w"></span>
<span class=3D"n">i</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">threadIdx</span><span clas=
s=3D"p">%</span><span class=3D"n">x</span><span class=3D"w"></span>
<span class=3D"n">a</span><span class=3D"p">(</span><span class=3D"n">i</sp=
an><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">i</span><span class=
=3D"w"></span>
<span class=3D"k">return</span>
<span class=3D"k">end subroutine </span><span class=3D"n">test1</span><span=
 class=3D"w"></span>
<span class=3D"k">end module </span><span class=3D"n">mytests</span><span c=
lass=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell1">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</td>
</tr>
</tbody>
</table></div>
<p>In the CUDA Fortran host code on the left, device selection is <em>expli=
cit</em>, performed by an API call on line 7. The provided <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">cudafor</span></code> modu=
le, used in line 2, contains interfaces to the full CUDA host runtime libra=
ry, and in this case exposes the interface to <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">cudaSetDevice()</span></code> and ensur=
es it is called correctly. An array is allocated on the device at line 8. L=
ine 9 of the host code initializes the data on the host and the device, and=
, in line 10, a device kernel is launched. The interface to the device kern=
el is explicit, in the Fortran sense, because the module containing the ker=
nel is used in line 3. At line 11 of the host code, the results from the ke=
rnel execution are moved back to a host array. Deallocation of the GPU arra=
y occurs on line 14.</p>
<p><strong>Implicit Device Selection</strong></p>
<p>Here is a CUDA Fortran example which is slightly more complicated than t=
he preceding one.</p>
<div class=3D"wy-table-responsive"><table class=3D"table-no-stripes docutil=
s align-default">
<colgroup>
<col style=3D"width: 56%">
<col style=3D"width: 44%">
</colgroup>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>Host code</p></th>
<th class=3D"head"><p>Device Code</p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><div class=3D"highlight-fortran notranslate"><di=
v class=3D"highlight"><pre id=3D"codecell2"><span></span><span class=3D"k">=
program </span><span class=3D"n">testramp</span><span class=3D"w"></span>
<span class=3D"k">use </span><span class=3D"n">cublas</span><span class=3D"=
w"></span>
<span class=3D"k">use </span><span class=3D"n">ramp</span><span class=3D"w"=
></span>
<span class=3D"kt">integer</span><span class=3D"p">,</span><span class=3D"w=
"> </span><span class=3D"k">parameter</span><span class=3D"w"> </span><span=
 class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">N</span>=
<span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </=
span><span class=3D"mi">20000</span><span class=3D"w"></span>
<span class=3D"kt">real</span><span class=3D"p">,</span><span class=3D"w"> =
</span><span class=3D"n">device</span><span class=3D"w"> </span><span class=
=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">x</span><span =
class=3D"p">(</span><span class=3D"n">N</span><span class=3D"p">)</span><sp=
an class=3D"w"></span>
<span class=3D"n">twopi</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"nb">atan</span><span cla=
ss=3D"p">(</span><span class=3D"mf">1.0</span><span class=3D"p">)</span><sp=
an class=3D"o">*</span><span class=3D"mi">8</span><span class=3D"w"></span>
<span class=3D"k">call </span><span class=3D"n">buildramp</span><span class=
=3D"o">&lt;&lt;&lt;</span><span class=3D"p">(</span><span class=3D"n">N</sp=
an><span class=3D"o">-</span><span class=3D"mi">1</span><span class=3D"p">)=
</span><span class=3D"o">/</span><span class=3D"mi">512</span><span class=
=3D"o">+</span><span class=3D"mi">1</span><span class=3D"p">,</span><span c=
lass=3D"mi">512</span><span class=3D"o">&gt;&gt;&gt;</span><span class=3D"p=
">(</span><span class=3D"n">x</span><span class=3D"p">,</span><span class=
=3D"n">N</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"c">!$cuf kernel do</span>
<span class=3D"k">do </span><span class=3D"n">i</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"m=
i">1</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">N</span><span class=3D"w"></span>
<span class=3D"n">x</span><span class=3D"p">(</span><span class=3D"n">i</sp=
an><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"mf">2.0</span><span clas=
s=3D"w"> </span><span class=3D"o">*</span><span class=3D"w"> </span><span c=
lass=3D"n">x</span><span class=3D"p">(</span><span class=3D"n">i</span><spa=
n class=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">*</span><=
span class=3D"w"> </span><span class=3D"n">x</span><span class=3D"p">(</spa=
n><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"w"></s=
pan>
<span class=3D"k">end do</span>
<span class=3D"k">print</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"p">,</span><span class=3D"s2">"float(N) =3D "</span><=
span class=3D"p">,</span><span class=3D"n">sasum</span><span class=3D"p">(<=
/span><span class=3D"n">N</span><span class=3D"p">,</span><span class=3D"n"=
>x</span><span class=3D"p">,</span><span class=3D"mi">1</span><span class=
=3D"p">)</span><span class=3D"w"></span>
<span class=3D"k">end program</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell2">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</td>
<td><div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><=
pre id=3D"codecell3"><span></span><span class=3D"k">module </span><span cla=
ss=3D"n">ramp</span><span class=3D"w"></span>
<span class=3D"kt">real</span><span class=3D"p">,</span><span class=3D"w"> =
</span><span class=3D"n">constant</span><span class=3D"w"> </span><span cla=
ss=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">twopi</span>=
<span class=3D"w"></span>
<span class=3D"k">contains</span>
<span class=3D"n">attributes</span><span class=3D"p">(</span><span class=3D=
"n">global</span><span class=3D"p">)</span><span class=3D"w"> </span><span =
class=3D"p">&amp;</span><span class=3D"w"></span>
<span class=3D"k">subroutine </span><span class=3D"n">buildramp</span><span=
 class=3D"p">(</span><span class=3D"n">x</span><span class=3D"p">,</span><s=
pan class=3D"w"> </span><span class=3D"n">n</span><span class=3D"p">)</span=
><span class=3D"w"></span>
<span class=3D"kt">real</span><span class=3D"p">,</span><span class=3D"w"> =
</span><span class=3D"n">device</span><span class=3D"w"> </span><span class=
=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">x</span><span =
class=3D"p">(</span><span class=3D"n">n</span><span class=3D"p">)</span><sp=
an class=3D"w"></span>
<span class=3D"kt">integer</span><span class=3D"p">,</span><span class=3D"w=
"> </span><span class=3D"k">value</span><span class=3D"w"> </span><span cla=
ss=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">n</span><spa=
n class=3D"w"></span>
<span class=3D"kt">real</span><span class=3D"p">,</span><span class=3D"w"> =
</span><span class=3D"n">shared</span><span class=3D"w"> </span><span class=
=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">term</span><sp=
an class=3D"w"></span>
<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">threadidx</span><span class=3D"p">%</span><span class=
=3D"n">x</span><span class=3D"w"> </span><span class=3D"o">=3D=3D</span><sp=
an class=3D"w"> </span><span class=3D"mi">1</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"n">term</span><span class=3D"w"> =
</span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D=
"p">&amp;</span><span class=3D"w"></span>
<span class=3D"n">twopi</span><span class=3D"w"> </span><span class=3D"o">/=
</span><span class=3D"w"> </span><span class=3D"nb">float</span><span class=
=3D"p">(</span><span class=3D"n">n</span><span class=3D"p">)</span><span cl=
ass=3D"w"></span>
<span class=3D"k">call </span><span class=3D"n">syncthreads</span><span cla=
ss=3D"p">()</span><span class=3D"w"></span>
<span class=3D"n">i</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"p">(</span><span class=3D"n">=
blockidx</span><span class=3D"p">%</span><span class=3D"n">x</span><span cl=
ass=3D"o">-</span><span class=3D"mi">1</span><span class=3D"p">)</span><spa=
n class=3D"o">*</span><span class=3D"n">blockdim</span><span class=3D"p">%<=
/span><span class=3D"n">x</span><span class=3D"w"> </span><span class=3D"p"=
>&amp;</span><span class=3D"w"></span>
<span class=3D"o">+</span><span class=3D"w"> </span><span class=3D"n">threa=
didx</span><span class=3D"p">%</span><span class=3D"n">x</span><span class=
=3D"w"></span>
<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">i</span><span class=3D"w"> </span><span class=3D"o">&=
lt;=3D</span><span class=3D"w"> </span><span class=3D"n">n</span><span clas=
s=3D"p">)</span><span class=3D"w"> </span><span class=3D"k">then</span>
<span class=3D"n">x</span><span class=3D"p">(</span><span class=3D"n">i</sp=
an><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"nb">cos</span><span clas=
s=3D"p">(</span><span class=3D"nb">float</span><span class=3D"p">(</span><s=
pan class=3D"n">i</span><span class=3D"o">-</span><span class=3D"mi">1</spa=
n><span class=3D"p">)</span><span class=3D"o">*</span><span class=3D"n">ter=
m</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"k">end if</span>
<span class=3D"k">return</span>
<span class=3D"k">end subroutine</span>
<span class=3D"k">end module</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell3">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</td>
</tr>
</tbody>
</table></div>
<p>In this case, the device selection is <em>implicit</em>, and defaults to=
 NVIDIA device 0. The device array allocation in the host code at line 5 lo=
oks static, but actually occurs at program init time. Larger array sizes ar=
e handled, both in the kernel launch at line 7 in the host code, and in the=
 device code at line 10. The device code contains examples of constant and =
shared data, which are described in <a class=3D"reference internal" href=3D=
"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-g=
uide/index.html#cf-cuda-fort-ref"><span class=3D"std std-ref">Reference</sp=
an></a>. There are actually two kernels launched from the host code: one ex=
plicitly provided and called from line 10, and a second, generated using th=
e CUDA Fortran kernel loop directive, starting at line 11. Finally, this ex=
ample demonstrates the use of the <code class=3D"docutils literal notransla=
te"><span class=3D"pre">cublas</span></code> module, used at line 2 in the =
host code, and called at line 12.</p>
<p>As these two examples demonstrate, all the steps listed at the beginning=
 of this section for using a GPU are contained within the host code. It is =
possible to program GPUs without writing any kernels and device code, throu=
gh library calls and CUDA Fortran kernel loop directives as shown, or by us=
ing higher-level directive-based models; however, programming in a lower-le=
vel model like CUDA provides the programmer control over device resource ut=
ilization and kernel execution.</p>
</section>
<section id=3D"cuda-fortran-kernels">
<h2><span class=3D"section-number">2.2. </span>CUDA Fortran Kernels<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#cuda-fortran-kernels" title=3D"Perma=
link to this headline">=EF=83=81</a></h2>
<p>CUDA Fortran allows the definition of Fortran subroutines that execute i=
n parallel on the GPU when called from the Fortran program which has been i=
nvoked and is running on the host or, starting in CUDA 5.0, on the device. =
Such a subroutine is called a <em>device kernel</em> or <em>kernel</em>.</p=
>
<p>A call to a kernel specifies how many parallel instances of the kernel m=
ust be executed; each instance will be executed by a different CUDA thread.=
 The CUDA threads are organized into thread blocks, and each thread has a g=
lobal thread block index, and a local thread index within its thread block.=
</p>
<p>A kernel is defined using the <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">attributes(global)</span></code> specifier on the su=
broutine statement; a kernel is called using special chevron syntax to spec=
ify the number of thread blocks and threads within each thread block:</p>
<div class=3D"wy-table-responsive"><table class=3D"docutils align-default">
<colgroup>
<col style=3D"width: 100%">
</colgroup>
<tbody>
<tr class=3D"row-odd"><td><div class=3D"highlight-fortran notranslate"><div=
 class=3D"highlight"><pre id=3D"codecell4"><span></span><span class=3D"c">!=
 Kernel definition</span>
<span class=3D"n">attributes</span><span class=3D"p">(</span><span class=3D=
"n">global</span><span class=3D"p">)</span><span class=3D"w"> </span><span =
class=3D"k">subroutine </span><span class=3D"n">ksaxpy</span><span class=3D=
"p">(</span><span class=3D"w"> </span><span class=3D"n">n</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">a</span><span cl=
ass=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">x</span><span=
 class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">y</span><s=
pan class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">real</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"k">dimension</span><span=
 class=3D"p">(</span><span class=3D"o">*</span><span class=3D"p">)</span><s=
pan class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </sp=
an><span class=3D"n">x</span><span class=3D"p">,</span><span class=3D"n">y<=
/span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">real</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"k">value</span><span cla=
ss=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><spa=
n class=3D"n">a</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">value</span><spa=
n class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span=
><span class=3D"n">n</span><span class=3D"p">,</span><span class=3D"w"> </s=
pan><span class=3D"n">i</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">i</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
p">(</span><span class=3D"n">blockidx</span><span class=3D"p">%</span><span=
 class=3D"n">x</span><span class=3D"o">-</span><span class=3D"mi">1</span><=
span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">*</spa=
n><span class=3D"w"> </span><span class=3D"n">blockdim</span><span class=3D=
"p">%</span><span class=3D"n">x</span><span class=3D"w"> </span><span class=
=3D"o">+</span><span class=3D"w"> </span><span class=3D"n">threadidx</span>=
<span class=3D"p">%</span><span class=3D"n">x</span><span class=3D"w"></spa=
n>
<span class=3D"w">    </span><span class=3D"k">if</span><span class=3D"p">(=
</span><span class=3D"w"> </span><span class=3D"n">i</span><span class=3D"w=
"> </span><span class=3D"o">&lt;=3D</span><span class=3D"w"> </span><span c=
lass=3D"n">n</span><span class=3D"w"> </span><span class=3D"p">)</span><spa=
n class=3D"w"> </span><span class=3D"n">y</span><span class=3D"p">(</span><=
span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"w"> </spa=
n><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">a=
</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"w=
"> </span><span class=3D"n">x</span><span class=3D"p">(</span><span class=
=3D"n">i</span><span class=3D"p">)</span><span class=3D"w"> </span><span cl=
ass=3D"o">+</span><span class=3D"w"> </span><span class=3D"n">y</span><span=
 class=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">)</span><s=
pan class=3D"w"></span>
<span class=3D"k">end subroutine</span><span class=3D"w"></span>

<span class=3D"c">! Host subroutine</span>
<span class=3D"k">subroutine </span><span class=3D"n">solve</span><span cla=
ss=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">n</span><span =
class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">a</span><sp=
an class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">x</span>=
<span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">y</sp=
an><span class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"></=
span>
<span class=3D"w">    </span><span class=3D"kt">real</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"n">device</span><span cl=
ass=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">dimension</sp=
an><span class=3D"p">(</span><span class=3D"o">*</span><span class=3D"p">)<=
/span><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"=
w"> </span><span class=3D"n">x</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">y</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">real</span><span class=3D"w=
"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span class=
=3D"n">a</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">n</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"c">! call the kernel</span>
<span class=3D"w">    </span><span class=3D"k">call </span><span class=3D"n=
">ksaxpy</span><span class=3D"o">&lt;&lt;&lt;</span><span class=3D"n">n</sp=
an><span class=3D"o">/</span><span class=3D"mi">64</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"mi">64</span><span class=
=3D"o">&gt;&gt;&gt;</span><span class=3D"p">(</span><span class=3D"w"> </sp=
an><span class=3D"n">n</span><span class=3D"p">,</span><span class=3D"w"> <=
/span><span class=3D"n">a</span><span class=3D"p">,</span><span class=3D"w"=
> </span><span class=3D"n">x</span><span class=3D"p">,</span><span class=3D=
"w"> </span><span class=3D"n">y</span><span class=3D"w"> </span><span class=
=3D"p">)</span><span class=3D"w"></span>
<span class=3D"k">end subroutine</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell4">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</td>
</tr>
</tbody>
</table></div>
<p>In this case, the call to the kernel <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">ksaxpy</span></code> specifies <code class=3D=
"docutils literal notranslate"><span class=3D"pre">n/64</span></code> threa=
d blocks, each with 64 threads. Each thread is assigned a thread block inde=
x accessed through the built-in <code class=3D"docutils literal notranslate=
"><span class=3D"pre">blockidx</span></code> variable, and a thread index a=
ccessed through <code class=3D"docutils literal notranslate"><span class=3D=
"pre">threadidx</span></code>. In this example, each thread performs one it=
eration of the common SAXPY loop operation.</p>
</section>
<section id=3D"thread-blocks">
<h2><span class=3D"section-number">2.3. </span>Thread Blocks<a class=3D"hea=
derlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cud=
a-fortran-prog-guide/index.html#thread-blocks" title=3D"Permalink to this h=
eadline">=EF=83=81</a></h2>
<p>Each thread is assigned a thread block index accessed through the built-=
in <code class=3D"docutils literal notranslate"><span class=3D"pre">blockid=
x</span></code> variable, and a thread index accessed through <code class=
=3D"docutils literal notranslate"><span class=3D"pre">threadidx</span></cod=
e>. The thread index may be a one-, two-, or three-dimensional index. In CU=
DA Fortran, the thread index for each dimension starts at one.</p>
<p>Threads in the same thread block may cooperate by using <em>shared memor=
y,</em> and by synchronizing at a barrier using the <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">SYNCTHREADS()</span></code> intri=
nsic. Each thread in the block waits at the call to <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">SYNCTHREADS()</span></code> until=
 all threads have reached that call. The shared memory acts like a low-late=
ncy, high bandwidth software managed cache memory. Currently, the maximum n=
umber of threads in a thread block is 1024.</p>
<p>A kernel may be invoked with many thread blocks, each with the same thre=
ad block size. The thread blocks are organized into a one-, two-, or three-=
dimensional <em>grid</em> of blocks, so each thread has a thread index with=
in the block, and a block index within the grid. When invoking a kernel, th=
e first argument in the chevron &lt;&lt;&lt;&gt;&gt;&gt; syntax is the grid=
 size, and the second argument is the thread block size. Thread blocks must=
 be able to execute independently; two thread blocks may be executed in par=
allel or one after the other, by the same core or by different cores.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">dim=
3</span></code> derived type, defined in the <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">cudafor</span></code> module, can be use=
d to declare variables in host code which can conveniently hold the launch =
configuration values if they are not scalars; for example:</p>
<div class=3D"wy-table-responsive"><table class=3D"docutils align-default">
<colgroup>
<col style=3D"width: 100%">
</colgroup>
<tbody>
<tr class=3D"row-odd"><td><div class=3D"highlight-c++ notranslate"><div cla=
ss=3D"highlight"><pre id=3D"codecell5"><span></span><span class=3D"n">type<=
/span><span class=3D"p">(</span><span class=3D"n">dim3</span><span class=3D=
"p">)</span><span class=3D"w"> </span><span class=3D"o">::</span><span clas=
s=3D"w"> </span><span class=3D"n">blocks</span><span class=3D"p">,</span><s=
pan class=3D"w"> </span><span class=3D"n">threads</span><span class=3D"w"><=
/span>
<span class=3D"p">...</span><span class=3D"w"></span>
<span class=3D"n">blocks</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">dim3</span><span clas=
s=3D"p">(</span><span class=3D"n">n</span><span class=3D"o">/</span><span c=
lass=3D"mi">256</span><span class=3D"p">,</span><span class=3D"w"> </span><=
span class=3D"n">n</span><span class=3D"o">/</span><span class=3D"mi">16</s=
pan><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"mi">=
1</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">threads</span><span class=3D"w"> </span><span class=3D"o"=
>=3D</span><span class=3D"w"> </span><span class=3D"n">dim3</span><span cla=
ss=3D"p">(</span><span class=3D"mi">16</span><span class=3D"p">,</span><spa=
n class=3D"w"> </span><span class=3D"mi">16</span><span class=3D"p">,</span=
><span class=3D"w"> </span><span class=3D"mi">1</span><span class=3D"p">)</=
span><span class=3D"w"></span>
<span class=3D"n">call</span><span class=3D"w"> </span><span class=3D"n">de=
vkernel</span><span class=3D"o">&lt;&lt;&lt;</span><span class=3D"n">blocks=
</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n=
">threads</span><span class=3D"o">&gt;&gt;&gt;</span><span class=3D"p">(</s=
pan><span class=3D"w"> </span><span class=3D"p">...</span><span class=3D"w"=
> </span><span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell5">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</td>
</tr>
</tbody>
</table></div>
</section>
<section id=3D"memory-hierarchy">
<h2><span class=3D"section-number">2.4. </span>Memory Hierarchy<a class=3D"=
headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/=
cuda-fortran-prog-guide/index.html#memory-hierarchy" title=3D"Permalink to =
this headline">=EF=83=81</a></h2>
<p>CUDA Fortran programs have access to several memory spaces. On the host =
side, the host program can directly access data in the host main memory. It=
 can also directly copy data to and from the device global memory; such dat=
a copies require DMA access to the device, so are slow relative to the host=
 memory. The host can also set the values in the device constant memory, ag=
ain implemented using DMA access.</p>
<p>On the device side, data in global device memory can be read or written =
by all threads. Data in constant memory space is initialized by the host pr=
ogram; all threads can read data in constant memory. Accesses to constant m=
emory are typically faster than accesses to global memory, but it is read-o=
nly to the threads and limited in size. Threads in the same thread block ca=
n access and share data in shared memory; data in shared memory has a lifet=
ime of the thread block. Each thread can also have private local memory; da=
ta in thread local memory may be implemented as processor registers or may =
be allocated in the global device memory; best performance will often be ob=
tained when thread local data is limited to a small number of scalars that =
can be allocated as processor registers.</p>
<p>Through use of the CUDA API as exposed by the <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">cudafor</span></code> module, access=
 to CUDA features such as mapped memory, peer-to-peer memory access, and th=
e unified virtual address space are supported. Users should check the relev=
ant CUDA documentation for compute capability restrictions for these featur=
es. For an example of device array mapping, refer to <a class=3D"reference =
internal" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cu=
da-fortran-prog-guide/index.html#cfexam-mapped-mem"><span class=3D"std std-=
ref">Mapped Memory Example</span></a>.</p>
<p>Starting with CUDA 6.0, managed or unified memory programming is availab=
le on certain platforms. For a complete description of unified memory progr=
amming, see the <a class=3D"reference external" href=3D"https://docs.nvidia=
.com/cuda/cuda-c-programming-guide/index.html#unified-memory-programming">U=
nified Memory Programing</a> section of the <em>CUDA C Programming Guide</e=
m>. Managed memory provides a common address space, and migrates data betwe=
en the host and device as it is used by each set of processors. On the host=
 side, the data is resident in host main memory. On the device side, it is =
accessed as resident in global device memory.</p>
</section>
<section id=3D"subroutine-function-qualifiers">
<h2><span class=3D"section-number">2.5. </span>Subroutine / Function Qualif=
iers<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive=
/25.3/compilers/cuda-fortran-prog-guide/index.html#subroutine-function-qual=
ifiers" title=3D"Permalink to this headline">=EF=83=81</a></h2>
<p>A subroutine or function in CUDA Fortran has an additional attribute, de=
signating whether it is executed on the host or on the device, and if the l=
atter, whether it is a kernel, called from the host, or called from another=
 device subprogram.</p>
<ul class=3D"simple">
<li><p>A subprogram declared with <code class=3D"docutils literal notransla=
te"><span class=3D"pre">attributes(host)</span></code>, or with the host at=
tribute by default, is called a <em>host subprogram</em>.</p></li>
<li><p>A subprogram declared with <code class=3D"docutils literal notransla=
te"><span class=3D"pre">attributes(global)</span></code> or <code class=3D"=
docutils literal notranslate"><span class=3D"pre">attributes(device)</span>=
</code> is called a <em>device subprogram</em>.</p></li>
<li><p>A subroutine declared with <code class=3D"docutils literal notransla=
te"><span class=3D"pre">attributes(global)</span></code> is also called a <=
em>kernel subroutine</em>.</p></li>
<li><p>A subroutine declared with <code class=3D"docutils literal notransla=
te"><span class=3D"pre">attributes(grid_global)</span></code> is supported =
starting on cc70 hardware or greater. Threads within the grid in these kern=
els are co-resident on the same device and can be synchronized.</p></li>
</ul>
<section id=3D"attributes-host">
<h3><span class=3D"section-number">2.5.1. </span>Attributes(host)<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#attributes-host" title=3D"Permalink =
to this headline">=EF=83=81</a></h3>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">hos=
t</span></code> attribute, specified on the subroutine or function statemen=
t, declares that the subroutine or function is to be executed on the host. =
Such a subprogram can only be called from another host subprogram. The defa=
ult is <code class=3D"docutils literal notranslate"><span class=3D"pre">att=
ributes(host)</span></code>, if none of the <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">host</span></code>, <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">global</span></code>, or <code =
class=3D"docutils literal notranslate"><span class=3D"pre">device</span></c=
ode> attributes is specified.</p>
</section>
<section id=3D"attributes-global">
<h3><span class=3D"section-number">2.5.2. </span>Attributes(global)<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#attributes-global" title=3D"Permalin=
k to this headline">=EF=83=81</a></h3>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">glo=
bal</span></code> attribute may only be specified on a subroutine statement=
; it declares that the subroutine is a kernel subroutine, to be executed on=
 the device, and may only be called using a kernel call containing the chev=
ron syntax and runtime mapping parameters.</p>
</section>
<section id=3D"attributes-device">
<h3><span class=3D"section-number">2.5.3. </span>Attributes(device)<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#attributes-device" title=3D"Permalin=
k to this headline">=EF=83=81</a></h3>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">dev=
ice</span></code> attribute, specified on the subroutine or function statem=
ent, declares that the subprogram is to be executed on the device; such a r=
outine must be called from a subprogram with the <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">global</span></code> or <code class=
=3D"docutils literal notranslate"><span class=3D"pre">device</span></code> =
attribute.</p>
</section>
<section id=3D"attributes-host-device">
<h3><span class=3D"section-number">2.5.4. </span>Attributes(host,device)<a =
class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/c=
ompilers/cuda-fortran-prog-guide/index.html#attributes-host-device" title=
=3D"Permalink to this headline">=EF=83=81</a></h3>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">hos=
t,device</span></code> attribute, specified on the subroutine or function s=
tatement, declares that the subprogram can be executed on both the host and=
 device; such a routine can be called from host code, or from a subprogram =
with the <code class=3D"docutils literal notranslate"><span class=3D"pre">g=
lobal</span></code> or <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">device</span></code> attribute. It is typically used for small=
 target-independent functions.</p>
</section>
<section id=3D"attributes-grid-global">
<h3><span class=3D"section-number">2.5.5. </span>Attributes(grid_global)<a =
class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/c=
ompilers/cuda-fortran-prog-guide/index.html#attributes-grid-global" title=
=3D"Permalink to this headline">=EF=83=81</a></h3>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">gri=
d_global</span></code> attribute may only be specified on a subroutine stat=
ement; it declares that the subroutine is a kernel subroutine, to be execut=
ed on the device, and may only be launched using a kernel call containing t=
he chevron syntax and runtime mapping parameters. The kernel is launched su=
ch that all threads within the grid group are guaranteed to be co-resident =
on the device. This allow a grid synchronization operation on cc70 hardware=
 and greater.</p>
</section>
<section id=3D"restrictions">
<h3><span class=3D"section-number">2.5.6. </span>Restrictions<a class=3D"he=
aderlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cu=
da-fortran-prog-guide/index.html#restrictions" title=3D"Permalink to this h=
eadline">=EF=83=81</a></h3>
<p>The following restrictions apply to subprograms.</p>
<ul class=3D"simple">
<li><p>A device subprogram must not contain variables with the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">SAVE</span></code> at=
tribute, or with data initialization.</p></li>
<li><p>A kernel subroutine may not also have the <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">device</span></code> or <code class=
=3D"docutils literal notranslate"><span class=3D"pre">host</span></code> at=
tribute.</p></li>
<li><p>Calls to a kernel subroutine must specify the execution configuratio=
n, as described in =E2=80=9CPredefined Variables in Device Subprograms,=E2=
=80=9D on page 9. Such a call is <em>asynchronous</em>, that is, the callin=
g routine making the call continues to execute before the device has comple=
ted its execution of the kernel subroutine.</p></li>
<li><p>Device subprograms may not be contained in a host subroutine or func=
tion, and may not contain any subroutines or functions.</p></li>
</ul>
</section>
</section>
<section id=3D"variable-qualifiers">
<h2><span class=3D"section-number">2.6. </span>Variable Qualifiers<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#variable-qualifiers" title=3D"Permal=
ink to this headline">=EF=83=81</a></h2>
<p>Variables in CUDA Fortran have a new attribute that declares in which me=
mory the data is allocated. By default, variables declared in modules or ho=
st subprograms are allocated in the host main memory. At most one of the <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">device</span=
></code>, <code class=3D"docutils literal notranslate"><span class=3D"pre">=
managed</span></code>, <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">constant</span></code>, <code class=3D"docutils literal notran=
slate"><span class=3D"pre">shared</span></code>, or <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">pinned</span></code> attributes m=
ay be specified for a variable.</p>
<section id=3D"id1">
<h3><span class=3D"section-number">2.6.1. </span>Attributes(device)<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#id1" title=3D"Permalink to this head=
line">=EF=83=81</a></h3>
<p>A variable with the <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">device</span></code> attribute is called a <em>device variable=
</em>, and is allocated in the device global memory.</p>
<ul class=3D"simple">
<li><p>If declared in a module, the variable may be accessed by any subprog=
ram in that module and by any subprogram that uses the module.</p></li>
<li><p>If declared in a host subprogram, the variable may be accessed by th=
at subprogram or subprograms contained in that subprogram.</p></li>
</ul>
<p>A device array may be an explicit-shape array, an allocatable array, or =
either an assumed-size or assumed-shape dummy array. An allocatable device =
variable has a dynamic lifetime, from when it is allocated until it is deal=
located. Other device variables have a lifetime of the entire application.<=
/p>
</section>
<section id=3D"attributes-managed">
<h3><span class=3D"section-number">2.6.2. </span>Attributes(managed)<a clas=
s=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compi=
lers/cuda-fortran-prog-guide/index.html#attributes-managed" title=3D"Permal=
ink to this headline">=EF=83=81</a></h3>
<p>Starting with CUDA 6.0, on certain platforms, a variable with the <code =
class=3D"docutils literal notranslate"><span class=3D"pre">managed</span></=
code> attribute is called a <em>managed variable</em>. Managed variables ma=
y be used in both host and device code. Variables with the managed attribut=
e migrate between the host and device, depending on where the accesses to t=
he memory originate. Managed variables may be read and written by the host,=
 but there are access restrictions on the managed variables if kernels are =
active on the device. On the device, managed variables have characteristics=
 similar to device variables, but managed variables cannot be allocated fro=
m the device, as device variables can be, starting in CUDA 5.0 in support o=
f dynamic parallelism.</p>
</section>
<section id=3D"attributes-constant">
<h3><span class=3D"section-number">2.6.3. </span>Attributes(constant)<a cla=
ss=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/comp=
ilers/cuda-fortran-prog-guide/index.html#attributes-constant" title=3D"Perm=
alink to this headline">=EF=83=81</a></h3>
<p>A variable with the <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">constant</span></code> attribute is called a <em>device consta=
nt variable</em>. Device constant variables are allocated in the device con=
stant memory space. The constant variable must be declared within a module=
=E2=80=99s global data specification scope. When declared, the variable may=
 be accessed by any subprogram in that module and by any subprogram that us=
es the module. Device constant data may not be assigned or modified in any =
device subprogram, but may be modified in host subprograms. All host access=
es of constant memory must be through use or host association. Device const=
ant variables may not be allocatable, and they have a lifetime, in the devi=
ce constant memory, of the entire application.</p>
<span class=3D"target" id=3D"cfpg-var-qual-attr-shared"></span></section>
<section id=3D"attributes-shared">
<h3><span class=3D"section-number">2.6.4. </span>Attributes(shared)<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#attributes-shared" title=3D"Permalin=
k to this headline">=EF=83=81</a></h3>
<p>A variable with the <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">shared</span></code> attribute is called a device shared varia=
ble or a <em>shared variable</em>. A shared variable may only be declared i=
n a device subprogram, and may only be accessed within that subprogram, or =
by other device subprograms to which it is passed as an argument. A shared =
variable may not be data initialized. A shared variable is allocated in the=
 device shared memory for a thread block, and has a lifetime of the thread =
block. It can be read or written by all threads in the block, though a writ=
e in one thread is only guaranteed to be visible to other threads after the=
 next call to the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">SYNCTHREADS()</span></code> intrinsic.</p>
</section>
<section id=3D"attributes-pinned">
<h3><span class=3D"section-number">2.6.5. </span>Attributes(pinned)<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#attributes-pinned" title=3D"Permalin=
k to this headline">=EF=83=81</a></h3>
<p>A variable with the <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">pinned</span></code> attribute is called a <em>pinned variable=
</em>. A pinned variable must be an allocatable array. When a pinned variab=
le is allocated, it will be allocated in host pagelocked memory. The advant=
age of using pinned variables is that copies from page-locked memory to dev=
ice memory are faster than copies from normal paged host memory. Some opera=
ting systems or installations may restrict the use, availability, or size o=
f page-locked memory; if the allocation in page-locked memory fails, the va=
riable will be allocated in the normal host paged memory and required for a=
synchronous moves.</p>
</section>
<section id=3D"attributes-texture">
<h3><span class=3D"section-number">2.6.6. </span>Attributes(texture)<a clas=
s=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compi=
lers/cuda-fortran-prog-guide/index.html#attributes-texture" title=3D"Permal=
ink to this headline">=EF=83=81</a></h3>
<p>Reading values through the texture memory interface is no longer recomme=
nded or necessary on newer GPUs and support for this feature has been dropp=
ed in CUDA 12.0.</p>
</section>
<section id=3D"attributes-unified">
<h3><span class=3D"section-number">2.6.7. </span>Attributes(unified)<a clas=
s=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compi=
lers/cuda-fortran-prog-guide/index.html#attributes-unified" title=3D"Permal=
ink to this headline">=EF=83=81</a></h3>
<p>Starting with the NVHPC 24.3 release, on systems which support it, a var=
iable with the <code class=3D"docutils literal notranslate"><span class=3D"=
pre">unified</span></code> attribute is called a <em>unified variable</em>.=
 Similar to managed variables, unified variables may be used in both host a=
nd device code. The compiler will allow passing a unified variable for an a=
rgument expecting a device variable. Variables with the unified attribute m=
ay migrate between the host and device, but depending on the driver version=
 and settings, may do so under different conditions than managed variables.=
 Unified variables are created in host system memory. Similar to managed va=
riables, care must be taken when unified variables are accessed from both h=
ost and device code, to avoid possible race conditions.</p>
</section>
</section>
<section id=3D"datatypes-in-device-subprograms">
<h2><span class=3D"section-number">2.7. </span>Datatypes in Device Subprogr=
ams<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/=
25.3/compilers/cuda-fortran-prog-guide/index.html#datatypes-in-device-subpr=
ograms" title=3D"Permalink to this headline">=EF=83=81</a></h2>
<p>The following intrinsic datatypes are allowed in device subprograms and =
device data:</p>
<div class=3D"wy-table-responsive"><table class=3D"table-no-stripes docutil=
s align-default" id=3D"id4">
<caption><span class=3D"caption-text">Table 1. Intrinsic Datatypes</span><a=
 class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/=
compilers/cuda-fortran-prog-guide/index.html#id4" title=3D"Permalink to thi=
s table">=EF=83=81</a></caption>
<colgroup>
<col style=3D"width: 40%">
<col style=3D"width: 60%">
</colgroup>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>Type</p></th>
<th class=3D"head"><p>Type Kind</p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">integer</span></code></p></td>
<td><p>1,2,4,8</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">logical</span></code></p></td>
<td><p>1,2,4,8</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">real</span></code></p></td>
<td><p>2,4,8</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">double</span> <span class=3D"pre">precision</span></code=
></p></td>
<td><p>equivalent to <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">real(kind=3D8)</span></code></p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">complex</span></code></p></td>
<td><p>4,8</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">character(len=3D1)</span></code></p></td>
<td><p>1</p></td>
</tr>
</tbody>
</table></div>
<p>Derived types may contain members with these intrinsic datatypes or othe=
r allowed derived types.</p>
<span class=3D"target" id=3D"cfpg-datatypes-dev-real2"></span><section id=
=3D"half-precision-floating-point">
<h3><span class=3D"section-number">2.7.1. </span>Half-precision Floating Po=
int<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/=
25.3/compilers/cuda-fortran-prog-guide/index.html#half-precision-floating-p=
oint" title=3D"Permalink to this headline">=EF=83=81</a></h3>
<p>On NVIDIA GPUs which support CUDA Compute Capability 6.0 and above, it i=
s possible to create variables and arrays as half precision floating point.=
 CUDA Fortran offers support for using the <code class=3D"docutils literal =
notranslate"><span class=3D"pre">kind</span></code> attribute on real data =
types; allowing data to be declared as <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">real(2)</span></code>. The following operators=
 are supported for this data type: <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">+</span> <span class=3D"pre">,</span> <span class=
=3D"pre">-,</span> <span class=3D"pre">*,</span> <span class=3D"pre">/,</sp=
an> <span class=3D"pre">.lt.,</span> <span class=3D"pre">.le.,</span> <span=
 class=3D"pre">.gt.,</span> <span class=3D"pre">.ge.,</span> <span class=3D=
"pre">.eq.,.ne.</span></code>. The compiler will emit an error message when=
 using <code class=3D"docutils literal notranslate"><span class=3D"pre">rea=
l(2)</span></code> and targeting a GPU with compute capability lower than 6=
.0.</p>
<p>Half precision is represented as IEEE 754 binary16. Out of the 16-bits a=
vailable to represent the floating point value, one bit is used for sign, f=
ive bits are used for exponent, and ten bits are used for significand. When=
 encountering values that cannot be precisely represented in the format, su=
ch as when adding two <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">real(2)</span></code> numbers, IEEE 754 defines rounding rules.=
 In the case of real(2), the default rule is round-to-nearest with ties-to-=
even property which is described in detail in the IEEE 754-2008 standard in=
 section 4.3.1. This format has a small dynamic range and thus values great=
er than 65520 are rounded to infinity.</p>
</section>
</section>
<section id=3D"predefined-variables-in-device-subprograms">
<h2><span class=3D"section-number">2.8. </span>Predefined Variables in Devi=
ce Subprograms<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-s=
dk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#predefined-var=
iables-in-device-subprograms" title=3D"Permalink to this headline">=EF=83=
=81</a></h2>
<p>Device subprograms have access to block and grid indices and dimensions =
through several built-in read-only variables. These variables are of type <=
code class=3D"docutils literal notranslate"><span class=3D"pre">dim3</span>=
</code>; the module <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">cudafor</span></code> defines the derived type <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">dim3</span></code> as follow=
s:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell6"><span></span><span class=3D"k">type</span><span class=3D"p=
">(</span><span class=3D"n">dim3</span><span class=3D"p">)</span><span clas=
s=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><s=
pan class=3D"mi">4</span><span class=3D"p">)</span><span class=3D"w"> </spa=
n><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">x=
</span><span class=3D"p">,</span><span class=3D"n">y</span><span class=3D"p=
">,</span><span class=3D"n">z</span><span class=3D"w"></span>
<span class=3D"k">end type</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell6">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>These predefined variables are not accessible in host subprograms.</p>
<ul class=3D"simple">
<li><p>The variable <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">threadidx</span></code> contains the thread index within its thre=
ad block; for one- or two-dimensional thread blocks, the <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">threadidx%y</span></code> an=
d/or <code class=3D"docutils literal notranslate"><span class=3D"pre">threa=
didx%z</span></code> components have the value one.</p></li>
<li><p>The variable <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">blockdim</span></code> contains the dimensions of the thread bloc=
k; <code class=3D"docutils literal notranslate"><span class=3D"pre">blockdi=
m</span></code> has the same value for all thread blocks in the same grid.<=
/p></li>
<li><p>The variable <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">blockidx</span></code> contains the block index within the grid; =
as with threadidx, for one-dimensional grids, <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">blockidx%y</span></code> and/or <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">blockidx%z</span>=
</code> has the value one.</p></li>
<li><p>The variable <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">griddim</span></code> contains the dimensions of the grid.</p></l=
i>
<li><p>The constant <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">warpsize</span></code> is declared to be type integer. Threads ar=
e executed in groups of 32, called <em>warps</em>; <code class=3D"docutils =
literal notranslate"><span class=3D"pre">warpsize</span></code> contains th=
e number of threads in a warp, and is currently 32.</p></li>
</ul>
</section>
<section id=3D"execution-configuration">
<h2><span class=3D"section-number">2.9. </span>Execution Configuration<a cl=
ass=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/com=
pilers/cuda-fortran-prog-guide/index.html#execution-configuration" title=3D=
"Permalink to this headline">=EF=83=81</a></h2>
<p>A call to a kernel subroutine must specify an execution configuration. T=
he execution configuration defines the dimensionality and extent of the gri=
d and thread blocks that execute the subroutine. It may also specify a dyna=
mic shared memory extent, in bytes, and a stream identifier, to support con=
current stream execution on the device.</p>
<p>A kernel subroutine call looks like this:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell7"><span></span><span class=3D"k">call </span><span class=3D"=
n">kernel</span><span class=3D"o">&lt;&lt;&lt;</span><span class=3D"n">grid=
</span><span class=3D"p">,</span><span class=3D"k">block</span><span class=
=3D"p">[,</span><span class=3D"n">bytes</span><span class=3D"p">][,</span><=
span class=3D"n">streamid</span><span class=3D"p">]</span><span class=3D"o"=
>&gt;&gt;&gt;</span><span class=3D"p">(</span><span class=3D"n">arg1</span>=
<span class=3D"p">,</span><span class=3D"n">arg2</span><span class=3D"p">,.=
..)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell7">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>where</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gri=
d</span></code> and <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">block</span></code> are either integer expressions (for one-dimen=
sional grids and thread blocks), or are <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">type(dim3)</span></code>, for one- or two-dim=
ensional grids and thread blocks.</p></li>
<li><p>If <code class=3D"docutils literal notranslate"><span class=3D"pre">=
grid</span></code> is <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">type(dim3)</span></code>, the value of each component must be e=
qual to or greater than one, and the product is usually limited by the comp=
ute capability of the device.</p></li>
<li><p>If <code class=3D"docutils literal notranslate"><span class=3D"pre">=
block</span></code> is <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">type(dim3)</span></code>, the value of each component must be =
equal to or greater than one, and the product of the component values must =
be less than or equal to 1024.</p></li>
<li><p>The value of <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">bytes</span></code> must be an integer; it specifies the number o=
f bytes of shared memory to be allocated for each thread block, in addition=
 to the statically allocated shared memory. This memory is used for the ass=
umed-size shared variables in the thread block; refer to <a class=3D"refere=
nce internal" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compiler=
s/cuda-fortran-prog-guide/index.html#cfpg-var-qual-attr-shared"><span class=
=3D"std std-ref">Shared data</span></a> for more information. If the value =
of <code class=3D"docutils literal notranslate"><span class=3D"pre">bytes</=
span></code> is not specified, its value is treated as zero.</p></li>
<li><p>The value of <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">streamid</span></code> must be an integer greater than or equal t=
o zero; it specifies the stream to which this call is associated. Nonzero s=
tream values can be created with a call to <code class=3D"docutils literal =
notranslate"><span class=3D"pre">cudaStreamCreate</span></code>. Starting i=
n CUDA 7.0, the constant <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">cudaStreamPerThread</span></code> can be specified to use a =
unique default stream for each CPU thread.</p></li>
</ul>
</section>
<section id=3D"asynchronous-concurrent-execution">
<h2><span class=3D"section-number">2.10. </span>Asynchronous Concurrent Exe=
cution<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archi=
ve/25.3/compilers/cuda-fortran-prog-guide/index.html#asynchronous-concurren=
t-execution" title=3D"Permalink to this headline">=EF=83=81</a></h2>
<p>There are two components to asynchronous concurrent execution with CUDA =
Fortran.</p>
<section id=3D"concurrent-host-and-device-execution">
<h3><span class=3D"section-number">2.10.1. </span>Concurrent Host and Devic=
e Execution<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/=
archive/25.3/compilers/cuda-fortran-prog-guide/index.html#concurrent-host-a=
nd-device-execution" title=3D"Permalink to this headline">=EF=83=81</a></h3=
>
<p>When a host subprogram calls a kernel subroutine, the call actually retu=
rns to the host program before the kernel subroutine begins execution. The =
call can be treated as a <em>kernel launch</em> operation, where the launch=
 actually corresponds to placing the kernel on a queue for execution by the=
 device. In this way, the host can continue executing, including calling or=
 queueing more kernels for execution on the device. By calling the runtime =
routine <code class=3D"docutils literal notranslate"><span class=3D"pre">cu=
daDeviceSynchronize</span></code>, the host program can synchronize and wai=
t for all previously launched or queued kernels.</p>
<p>Programmers must be careful when using concurrent host and device execut=
ion; in cases where the host program reads or modifies device or constant d=
ata, the host program should synchronize with the device to avoid erroneous=
 results.</p>
</section>
<section id=3D"concurrent-stream-execution">
<h3><span class=3D"section-number">2.10.2. </span>Concurrent Stream Executi=
on<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/2=
5.3/compilers/cuda-fortran-prog-guide/index.html#concurrent-stream-executio=
n" title=3D"Permalink to this headline">=EF=83=81</a></h3>
<p>Operations involving the device, including kernel execution and data cop=
ies to and from device memory, are implemented using stream queues. An oper=
ation is placed at the end of the stream queue, and will only be initiated =
when all previous operations on that queue have been completed.</p>
<p>An application can manage more concurrency by using multiple streams. Ea=
ch user-created stream manages its own queue; operations on different strea=
m queues may execute out-of-order with respect to when they were placed on =
the queues, and may execute concurrently with each other.</p>
<p>The default stream, used when no stream identifier is specified, is stre=
am zero; stream zero is special in that operations on the stream zero queue=
 will begin only after all preceding operations on all queues are complete,=
 and no subsequent operations on any queue begin until the stream zero oper=
ation is complete.</p>
</section>
</section>
<section id=3D"kernel-loop-directive">
<h2><span class=3D"section-number">2.11. </span>Kernel Loop Directive<a cla=
ss=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/comp=
ilers/cuda-fortran-prog-guide/index.html#kernel-loop-directive" title=3D"Pe=
rmalink to this headline">=EF=83=81</a></h2>
<p>CUDA Fortran allows automatic kernel generation and invocation from a re=
gion of host code containing one or more tightly nested loops. Launch confi=
guration and mapping of the loop iterations onto the hardware is controlled=
 and specified as part of the directive body using the familiar CUDA chevro=
n syntax. As with any kernel, the launch is asynchronous. The program can u=
se cudaDeviceSynchronize() or CUDA Events to wait for the completion of the=
 kernel.</p>
<p>The work in the loops specified by the directive is executed in parallel=
, across the thread blocks and grid; it is the programmer=E2=80=99s respons=
ibility to ensure that parallel execution is legal and produces the correct=
 answer. The one exception to this rule is a scalar reduction operation, su=
ch as summing the values in a vector or matrix. For these operations, the c=
ompiler handles the generation of the final reduction kernel, inserting syn=
chronization into the kernel as appropriate.</p>
<section id=3D"syntax">
<h3><span class=3D"section-number">2.11.1. </span>Syntax<a class=3D"headerl=
ink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fo=
rtran-prog-guide/index.html#syntax" title=3D"Permalink to this headline">=
=EF=83=81</a></h3>
<p>The general form of the kernel directive is:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell8"><span></span><span class=3D"c">!$cuf kernel do[(n)] &lt;&l=
t;&lt; grid, block  [optional stream] &gt;&gt;&gt;</span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell8">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>The compiler maps the launch configuration specified by the grid and blo=
ck values onto the outermost <em>n</em> loops, starting at loop <em>n</em> =
and working out. The grid and block values can be an integer scalar or a pa=
renthesized list. Alternatively, using asterisks tells the compiler to choo=
se a thread block shape and/or compute the grid shape from the thread block=
 shape and the loop limits. Loops which are not mapped onto the grid and bl=
ock values are run sequentially on each thread.</p>
<p>There are two ways to specify the optional stream argument:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell9"><span></span><span class=3D"c">!$cuf kernel do[(n)] &lt;&l=
t;&lt; grid, block, 0, streamid &gt;&gt;&gt;</span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell9">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Or</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell10"><span></span><span class=3D"c">!$cuf kernel do[(n)] &lt;&=
lt;&lt; grid, block, stream=3Dstreamid &gt;&gt;&gt;</span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell10">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p class=3D"title sectiontitle rubric" id=3D"kernel-loop-directive-example-=
1">Kernel Loop Directive Example 1</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell11"><span></span><span class=3D"c">!$cuf kernel do(2) &lt;&lt=
;&lt; (*,*), (32,4) &gt;&gt;&gt;</span>
<span class=3D"k">do </span><span class=3D"n">j</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"m=
i">1</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">m</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">do </span><span class=3D"n">i<=
/span><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"=
w"> </span><span class=3D"mi">1</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">n</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">a</span><span class=3D"p">(<=
/span><span class=3D"n">i</span><span class=3D"p">,</span><span class=3D"n"=
>j</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D=
"o">=3D</span><span class=3D"w"> </span><span class=3D"n">b</span><span cla=
ss=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">,</span><span =
class=3D"n">j</span><span class=3D"p">)</span><span class=3D"w"> </span><sp=
an class=3D"o">+</span><span class=3D"w"> </span><span class=3D"n">c</span>=
<span class=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">,</sp=
an><span class=3D"n">j</span><span class=3D"p">)</span><span class=3D"w"></=
span>
<span class=3D"w">  </span><span class=3D"k">end do</span>
<span class=3D"k">end do</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell11">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>In this example, the directive defines a two-dimensional thread block of=
 size 32x4.</p>
<p>The body of the doubly-nested loop is turned into the kernel body:</p>
<ul class=3D"simple">
<li><p>ThreadIdx%x runs from 1 to 32 and is mapped onto the inner <em>i</em=
> loop.</p></li>
<li><p>ThreadIdx%y runs from 1 to 4 and is mapped onto the outer <em>j</em>=
 loop.</p></li>
</ul>
<p>The grid shape, specified as (*,*), is computed by the compiler and runt=
ime by dividing the loop trip counts <em>n</em> and <em>m</em> by the threa=
d block size, so all iterations are computed.</p>
<p class=3D"title sectiontitle rubric" id=3D"kernel-loop-directive-example-=
2">Kernel Loop Directive Example 2</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell12"><span></span><span class=3D"c">!$cuf kernel do &lt;&lt;&l=
t; *, 256 &gt;&gt;&gt;</span>
<span class=3D"k">do </span><span class=3D"n">j</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"m=
i">1</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">m</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">do </span><span class=3D"n">i<=
/span><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"=
w"> </span><span class=3D"mi">1</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">n</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">a</span><span class=3D"p">(<=
/span><span class=3D"n">i</span><span class=3D"p">,</span><span class=3D"n"=
>j</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D=
"o">=3D</span><span class=3D"w"> </span><span class=3D"n">b</span><span cla=
ss=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">,</span><span =
class=3D"n">j</span><span class=3D"p">)</span><span class=3D"w"> </span><sp=
an class=3D"o">+</span><span class=3D"w"> </span><span class=3D"n">c</span>=
<span class=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">,</sp=
an><span class=3D"n">j</span><span class=3D"p">)</span><span class=3D"w"></=
span>
<span class=3D"w">  </span><span class=3D"k">end do</span>
<span class=3D"k">end do</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell12">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Without an explicit <em>n</em> on the <em>do</em>, the schedule applies =
just to the outermost loop, that is, the default value is 1. In this case, =
only the outer <em>j</em> loop is run in parallel with a thread block size =
of 256. The inner <em>i</em> dimension is run sequentially on each thread.<=
/p>
<p>You might consider if the code in <em>Kernel Loop Directive Example 2</e=
m> would perform better if the two loops were interchanged. Alternatively, =
you could specify a configuration like the following in which the threads r=
ead and write the matrices in coalesced fashion.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell13"><span></span><span class=3D"c">!$cuf kernel do(2) &lt;&lt=
;&lt; *, (256,1) &gt;&gt;&gt;</span>
<span class=3D"k">do </span><span class=3D"n">j</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"m=
i">1</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">m</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">do </span><span class=3D"n">i<=
/span><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"=
w"> </span><span class=3D"mi">1</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">n</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">a</span><span class=3D"p">(<=
/span><span class=3D"n">i</span><span class=3D"p">,</span><span class=3D"n"=
>j</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D=
"o">=3D</span><span class=3D"w"> </span><span class=3D"n">b</span><span cla=
ss=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">,</span><span =
class=3D"n">j</span><span class=3D"p">)</span><span class=3D"w"> </span><sp=
an class=3D"o">+</span><span class=3D"w"> </span><span class=3D"n">c</span>=
<span class=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">,</sp=
an><span class=3D"n">j</span><span class=3D"p">)</span><span class=3D"w"></=
span>
<span class=3D"w">  </span><span class=3D"k">end do</span>
<span class=3D"k">end do</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell13">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p class=3D"title sectiontitle rubric" id=3D"kernel-loop-directive-example-=
3">Kernel Loop Directive Example 3</p>
<p>In <em>Kernel Loop Directive Example 2</em>, the 256 threads in each blo=
ck each do one element of the matrix addition. Further expansion of the wor=
k along the <em>i</em> direction and all work across the <em>j</em> dimensi=
on is handled by the mapping onto the grid dimensions.</p>
<p>To =E2=80=9Cunroll=E2=80=9D more work into each thread, specify non-aste=
risk values for the grid, as illustrated here:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell14"><span></span><span class=3D"c">!$cuf kernel do(2) &lt;&lt=
;&lt; (1,*), (256,1) &gt;&gt;&gt;</span>
<span class=3D"k">do </span><span class=3D"n">j</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"m=
i">1</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">m</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">do </span><span class=3D"n">i<=
/span><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"=
w"> </span><span class=3D"mi">1</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">n</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">a</span><span class=3D"p">(<=
/span><span class=3D"n">i</span><span class=3D"p">,</span><span class=3D"n"=
>j</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D=
"o">=3D</span><span class=3D"w"> </span><span class=3D"n">b</span><span cla=
ss=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">,</span><span =
class=3D"n">j</span><span class=3D"p">)</span><span class=3D"w"> </span><sp=
an class=3D"o">+</span><span class=3D"w"> </span><span class=3D"n">c</span>=
<span class=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">,</sp=
an><span class=3D"n">j</span><span class=3D"p">)</span><span class=3D"w"></=
span>
<span class=3D"w">  </span><span class=3D"k">end do</span>
<span class=3D"k">end do</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell14">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Now the threads in a thread block handle all values in the <em>i</em> di=
rection, in concert, incrementing by 256. One thread block is created for e=
ach <em>j</em>. Specifically, the <em>j</em> loop is mapped onto the grid x=
-dimension, because the compiler skips over the constant 1 in the <em>i</em=
> loop grid size. In CUDA built-in language, <em>gridDim%</em>x is equal to=
 <em>m</em>.</p>
</section>
<section id=3D"restrictions-on-the-cuf-kernel-directive">
<h3><span class=3D"section-number">2.11.2. </span>Restrictions on the CUF k=
ernel directive<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-=
sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#restrictions-=
on-the-cuf-kernel-directive" title=3D"Permalink to this headline">=EF=83=81=
</a></h3>
<p>The following restrictions apply to CUF kernel directives:</p>
<ul class=3D"simple">
<li><p>If the directive specifies <em>n</em> dimensions, it must be followe=
d by at least that many tightly-nested DO loops.</p></li>
<li><p>The tightly-nested DO loops must have invariant loop limits: the low=
er limit, upper limit, and increment must be invariant with respect to any =
other loop in the kernel <em>do</em>.</p></li>
<li><p>The invariant loop limits cannot be a value from an array expression=
, unless those arrays have the managed attribute.</p></li>
<li><p>There can be no GOTO or EXIT statements within or between any loops =
that have been mapped onto the grid and block configuration values.</p></li=
>
<li><p>The body of the loops may contain assignment statements, IF statemen=
ts, loops, and GOTO statements.</p></li>
<li><p>Only CUDA Fortran data types are allowed within the loops.</p></li>
<li><p>Fortran intrinsic functions are allowed, if they are allowed and sup=
ported in device code.</p></li>
<li><p>Device-specific intrinsics such as the CUDA atomic functions are all=
owed, but require the interfaces from the cudadevice module be explicitly u=
sed to compile correctly.</p></li>
<li><p>Device-specific intrinsics such as the syncthreads and other warp or=
 block-level cooperating, syncing, or barrier functions should be avoided e=
xcept in very limited situations.</p></li>
<li><p>Subroutine and function calls to attributes(device) subprograms are =
allowed if they are in the same module as the code containing the directive=
.</p></li>
<li><p>Arrays used or assigned in the loop must have the device or managed =
attribute.</p></li>
<li><p>Implicit loops and F90 array syntax are not allowed within the direc=
tive loops.</p></li>
<li><p>Scalars used or assigned in the loop must either have the device att=
ribute, or the compiler will make a device copy of that variable live for t=
he duration of the loops, one for each thread. Except in the case of reduct=
ions; when a reduction has a scalar target, the compiler generates a correc=
t sequence of synchronized operations to produce one copy either in device =
global memory or on the host.</p></li>
</ul>
</section>
<section id=3D"summation-example">
<h3><span class=3D"section-number">2.11.3. </span>Summation Example<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#summation-example" title=3D"Permalin=
k to this headline">=EF=83=81</a></h3>
<p>The simplest directive form for performing a dot product on two device a=
rrays takes advantage of the properties for scalar use outlined previously.=
</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell15"><span></span><span class=3D"n">rsum</span><span class=3D"=
w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span clas=
s=3D"mf">0.0</span><span class=3D"w"></span>
<span class=3D"c">!$cuf kernel do &lt;&lt;&lt; *, * &gt;&gt;&gt;</span>
<span class=3D"k">do </span><span class=3D"n">i</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"m=
i">1</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">n</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">rsum</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">rsum</span><span class=3D"w"> </span><span class=3D"o">+</span><span=
 class=3D"w"> </span><span class=3D"n">x</span><span class=3D"p">(</span><s=
pan class=3D"n">i</span><span class=3D"p">)</span><span class=3D"o">*</span=
><span class=3D"w"> </span><span class=3D"n">y</span><span class=3D"p">(</s=
pan><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"w"><=
/span>
<span class=3D"k">end do</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell15">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>For reductions, the compiler recognizes the use of the scalar and genera=
tes just one final result.</p>
<p>This CUF kernel can be followed by another CUF kernel in the same subpro=
gram:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell16"><span></span><span class=3D"c">!$cuf kernel do &lt;&lt;&l=
t; *, * &gt;&gt;&gt;</span>
<span class=3D"k">do </span><span class=3D"n">i</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"m=
i">1</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">n</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">rsum</span><span class=3D"o"=
>=3D</span><span class=3D"w"> </span><span class=3D"n">x</span><span class=
=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">)</span><span cl=
ass=3D"w"> </span><span class=3D"o">*</span><span class=3D"w"> </span><span=
 class=3D"n">y</span><span class=3D"p">(</span><span class=3D"n">i</span><s=
pan class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">z</span><span class=3D"p">(<=
/span><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">rsum</span><span class=3D"w"></span>
<span class=3D"k">end do</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell16">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>In this CUF kernel, the compiler recognizes <em>rsum</em> as a scalar te=
mporary which should be allocated locally on every thread. However, use of =
<em>rsum</em> on the host following this loop is undefined.</p>
</section>
<section id=3D"explicit-reductions">
<h3><span class=3D"section-number">2.11.4. </span>Explicit Reductions<a cla=
ss=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/comp=
ilers/cuda-fortran-prog-guide/index.html#explicit-reductions" title=3D"Perm=
alink to this headline">=EF=83=81</a></h3>
<p>The CUDA Fortran compiler generally does a good job of identifying reduc=
tions in simple loops. When the reduction is not detected by the compiler, =
due to complicated control flow or other issues, starting in version 21.7, =
it is possible to specify explicit reductions using syntax similar to that =
used in the OpenACC and OpenMP programming models.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell17"><span></span><span class=3D"k">value</span><span class=3D=
"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span cla=
ss=3D"mf">0.0</span><span class=3D"w"></span>
<span class=3D"c">!$cuf kernel do &lt;&lt;&lt; *, * &gt;&gt;&gt; reduce(+:v=
alue)</span>
<span class=3D"k">do </span><span class=3D"n">i</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"m=
i">1</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">n</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">a</span><span class=3D"p">(<=
/span><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"kt">real</span><span class=3D"p">(</span><span class=3D"nb">int</span><=
span class=3D"p">(</span><span class=3D"n">a</span><span class=3D"p">(</spa=
n><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"w"> </=
span><span class=3D"o">*</span><span class=3D"w"> </span><span class=3D"mi"=
>10</span><span class=3D"mf">0.0</span><span class=3D"w"> </span><span clas=
s=3D"o">-</span><span class=3D"w"> </span><span class=3D"mi">5</span><span =
class=3D"mf">0.0</span><span class=3D"p">),</span><span class=3D"nb">kind</=
span><span class=3D"o">=3D</span><span class=3D"mi">4</span><span class=3D"=
p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">if</span><span class=3D"w"> =
</span><span class=3D"p">(</span><span class=3D"n">a</span><span class=3D"p=
">(</span><span class=3D"n">i</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"p">.</span><span class=3D"n">ge</span><span c=
lass=3D"p">.</span><span class=3D"w"> </span><span class=3D"mf">0.0</span><=
span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"k">then</=
span>
<span class=3D"k">        value</span><span class=3D"w"> </span><span class=
=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"k">value</span><s=
pan class=3D"w"> </span><span class=3D"o">+</span><span class=3D"w"> </span=
><span class=3D"n">a</span><span class=3D"p">(</span><span class=3D"n">i</s=
pan><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">else</span>
<span class=3D"k">        value</span><span class=3D"w"> </span><span class=
=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"k">value</span><s=
pan class=3D"w"> </span><span class=3D"o">+</span><span class=3D"w"> </span=
><span class=3D"n">a</span><span class=3D"p">(</span><span class=3D"n">i</s=
pan><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">+=
</span><span class=3D"w"> </span><span class=3D"mi">5</span><span class=3D"=
mf">0.0</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">end if</span>
<span class=3D"k">end do</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell17">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Both the <em>reduce</em> and <em>reduction</em> keywords are accepted. G=
enerally, all data types and types of reductions that are accepted in OpenA=
CC Fortran are accepted in CUF kernels. That includes <em>+</em>, <em>*</em=
>, <em>max</em>, <em>min</em>, <em>iand</em>, <em>ior</em>, and <em>ieor</e=
m> for the Fortran integer type; <em>+</em>, <em>*</em>, <em>max</em>, <em>=
min</em> for the Fortran real type; <em>+</em> for the Fortran complex type=
, and finally <em>.and.</em>, <em>.or.</em> for the Fortran logical type.</=
p>
</section>
</section>
<section id=3D"using-fortran-modules">
<h2><span class=3D"section-number">2.12. </span>Using Fortran Modules<a cla=
ss=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/comp=
ilers/cuda-fortran-prog-guide/index.html#using-fortran-modules" title=3D"Pe=
rmalink to this headline">=EF=83=81</a></h2>
<p>Modern Fortran uses modules to package global data, definitions, derived=
 types, and interface blocks. In CUDA Fortran these modules can be used to =
easily communicate data and definitions between host and device code. This =
section includes a few examples of using Fortran Modules.</p>
<section id=3D"accessing-data-from-other-modules">
<h3><span class=3D"section-number">2.12.1. </span>Accessing Data from Other=
 Modules<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/arc=
hive/25.3/compilers/cuda-fortran-prog-guide/index.html#accessing-data-from-=
other-modules" title=3D"Permalink to this headline">=EF=83=81</a></h3>
<p>in the following example, a set of modules are defined in one file which=
 are accessed by another module.</p>
<p><strong>Accessing data from other modules.</strong></p>
<p>In one file, <code class=3D"docutils literal notranslate"><span class=3D=
"pre">moda.cuf</span></code>, you could define a set of modules:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell18"><span></span><span class=3D"k">module </span><span class=
=3D"n">moda</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"n">device</span><span clas=
s=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">allocatable</sp=
an><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w">=
 </span><span class=3D"n">a</span><span class=3D"p">(:)</span><span class=
=3D"w"></span>
<span class=3D"k">end module</span>

<span class=3D"k">module </span><span class=3D"n">modb</span><span class=3D=
"w"></span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"n">device</span><span clas=
s=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">allocatable</sp=
an><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w">=
 </span><span class=3D"n">b</span><span class=3D"p">(:)</span><span class=
=3D"w"></span>
<span class=3D"k">end module</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell18">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>In another module or file, <code class=3D"docutils literal notranslate">=
<span class=3D"pre">modc.cuf</span></code>, you could define another module=
 which uses the two modules <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">moda</span></code> and <code class=3D"docutils literal no=
translate"><span class=3D"pre">modb</span></code>:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell19"><span></span><span class=3D"k">module </span><span class=
=3D"n">modc</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">use </span><span class=3D"n">m=
oda</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">use </span><span class=3D"n">m=
odb</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">integer</span><span class=3D"=
p">,</span><span class=3D"w"> </span><span class=3D"k">parameter</span><spa=
n class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span=
><span class=3D"n">n</span><span class=3D"w"> </span><span class=3D"o">=3D<=
/span><span class=3D"w"> </span><span class=3D"mi">100</span><span class=3D=
"w"></span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"n">device</span><span clas=
s=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">allocatable</sp=
an><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w">=
 </span><span class=3D"n">c</span><span class=3D"p">(:)</span><span class=
=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">contains</span>
<span class=3D"k">    subroutine </span><span class=3D"n">vadd</span><span =
class=3D"p">()</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"c">!$cuf kernel do &lt;&lt;&lt;=
*,*&gt;&gt;&gt;</span>
<span class=3D"w">    </span><span class=3D"k">do </span><span class=3D"n">=
i</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=
=3D"w"> </span><span class=3D"mi">1</span><span class=3D"p">,</span><span c=
lass=3D"w"> </span><span class=3D"n">n</span><span class=3D"w"></span>
<span class=3D"w">      </span><span class=3D"n">c</span><span class=3D"p">=
(</span><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"=
w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span clas=
s=3D"n">a</span><span class=3D"p">(</span><span class=3D"n">i</span><span c=
lass=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">+</span><spa=
n class=3D"w"> </span><span class=3D"n">b</span><span class=3D"p">(</span><=
span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"w"></span=
>
<span class=3D"w">    </span><span class=3D"k">end do</span>
<span class=3D"k">    end subroutine</span>
<span class=3D"k">end module</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell19">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>In the host program, you use the top-level module, and get the definitio=
n of <code class=3D"docutils literal notranslate"><span class=3D"pre">n</sp=
an></code> and the interface to <code class=3D"docutils literal notranslate=
"><span class=3D"pre">vadd</span></code>. You can also rename the device ar=
rays so they do not conflict with the host naming conventions:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell20"><span></span><span class=3D"k">program </span><span class=
=3D"n">t</span><span class=3D"w"></span>
<span class=3D"k">use </span><span class=3D"n">modc</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"n">a_d</span><span class=
=3D"w"> </span><span class=3D"o">=3D&gt;</span><span class=3D"w"> </span><s=
pan class=3D"n">a</span><span class=3D"p">,</span><span class=3D"w"> </span=
><span class=3D"n">b_d</span><span class=3D"w"> </span><span class=3D"o">=
=3D&gt;</span><span class=3D"w"> </span><span class=3D"n">b</span><span cla=
ss=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">c_d</span><spa=
n class=3D"w"> </span><span class=3D"o">=3D&gt;</span><span class=3D"w"> </=
span><span class=3D"n">c</span><span class=3D"w"></span>
<span class=3D"kt">real </span><span class=3D"n">a</span><span class=3D"p">=
,</span><span class=3D"n">b</span><span class=3D"p">,</span><span class=3D"=
n">c</span><span class=3D"p">(</span><span class=3D"n">n</span><span class=
=3D"p">)</span><span class=3D"w"></span>
<span class=3D"k">allocate</span><span class=3D"p">(</span><span class=3D"n=
">a_d</span><span class=3D"p">(</span><span class=3D"n">n</span><span class=
=3D"p">),</span><span class=3D"n">b_d</span><span class=3D"p">(</span><span=
 class=3D"n">n</span><span class=3D"p">),</span><span class=3D"n">c_d</span=
><span class=3D"p">(</span><span class=3D"n">n</span><span class=3D"p">))</=
span><span class=3D"w"></span>
<span class=3D"n">a_d</span><span class=3D"w"> </span><span class=3D"o">=3D=
</span><span class=3D"w"> </span><span class=3D"mf">1.0</span><span class=
=3D"w"></span>
<span class=3D"n">b_d</span><span class=3D"w"> </span><span class=3D"o">=3D=
</span><span class=3D"w"> </span><span class=3D"mf">2.0</span><span class=
=3D"w"></span>
<span class=3D"k">call </span><span class=3D"n">vadd</span><span class=3D"p=
">()</span><span class=3D"w"></span>
<span class=3D"n">c</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">c_d</span><span class=3D"w=
"></span>
<span class=3D"k">print</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"p">,</span><span class=3D"k">all</span><span class=3D=
"p">(</span><span class=3D"n">c</span><span class=3D"p">.</span><span class=
=3D"n">eq</span><span class=3D"p">.</span><span class=3D"mf">3.0</span><spa=
n class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"k">end</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell20">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"call-routines-from-other-modules">
<h3><span class=3D"section-number">2.12.2. </span>Call Routines from Other =
Modules<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/arch=
ive/25.3/compilers/cuda-fortran-prog-guide/index.html#call-routines-from-ot=
her-modules" title=3D"Permalink to this headline">=EF=83=81</a></h3>
<p>Starting with CUDA 5.0, in addition to being able to access data declare=
d in another module, you can also call device functions which are contained=
 in another module. In the following example, the file <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">ffill.cuf</span></code> contai=
ns a device function to fill an array:</p>
<p><strong>Calling routines from other modules using relocatable device cod=
e.</strong></p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell21"><span></span><span class=3D"k">module </span><span class=
=3D"n">ffill</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">contains</span>
<span class=3D"k">    </span><span class=3D"n">attributes</span><span class=
=3D"p">(</span><span class=3D"n">device</span><span class=3D"p">)</span><sp=
an class=3D"w"> </span><span class=3D"k">subroutine </span><span class=3D"n=
">fill</span><span class=3D"p">(</span><span class=3D"n">a</span><span clas=
s=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">device</span><sp=
an class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </spa=
n><span class=3D"n">a</span><span class=3D"p">(</span><span class=3D"o">*</=
span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">i</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
p">(</span><span class=3D"n">blockidx</span><span class=3D"p">%</span><span=
 class=3D"n">x</span><span class=3D"o">-</span><span class=3D"mi">1</span><=
span class=3D"p">)</span><span class=3D"o">*</span><span class=3D"n">blockd=
im</span><span class=3D"p">%</span><span class=3D"n">x</span><span class=3D=
"w"> </span><span class=3D"o">+</span><span class=3D"w"> </span><span class=
=3D"n">threadidx</span><span class=3D"p">%</span><span class=3D"n">x</span>=
<span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">a</span><span class=3D"p">(<=
/span><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">i</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">end subroutine</span>
<span class=3D"k">end module</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell21">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>To generate relocatable device code, compile this file with the <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">-=E2=81=A0gpu=3Drd=
c</span></code> flag:</p>
<div class=3D"highlight-text notranslate"><div class=3D"highlight"><pre id=
=3D"codecell22"><span></span>% nvfortran -cuda -gpu=3Drdc -c ffill.cuf
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell22">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Now write another module and test program that calls the subroutine in t=
his module. Since you are calling an attributes(device) subroutine, you do =
not use the chevron syntax. For convenience, an overloaded Fortran sum func=
tion is included in the file <code class=3D"docutils literal notranslate"><=
span class=3D"pre">tfill.cuf</span></code> which, in this case, takes 1-D i=
nteger device arrays.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell23"><span></span><span class=3D"k">module </span><span class=
=3D"n">testfill</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">use </span><span class=3D"n"=
>ffill</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">contains</span>
<span class=3D"k">    </span><span class=3D"n">attributes</span><span class=
=3D"p">(</span><span class=3D"n">global</span><span class=3D"p">)</span><sp=
an class=3D"w"> </span><span class=3D"k">subroutine </span><span class=3D"n=
">Kernel</span><span class=3D"p">(</span><span class=3D"n">arr</span><span =
class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">        </span><span class=3D"kt">integer</span><span cla=
ss=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">device</span><=
span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </s=
pan><span class=3D"n">arr</span><span class=3D"p">(</span><span class=3D"o"=
>*</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">        </span><span class=3D"k">call </span><span class=
=3D"n">fill</span><span class=3D"p">(</span><span class=3D"n">arr</span><sp=
an class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">end subroutine </span><span =
class=3D"n">Kernel</span><span class=3D"w"></span>

<span class=3D"w">    </span><span class=3D"kt">integer </span><span class=
=3D"k">function </span><span class=3D"nb">sum</span><span class=3D"p">(</sp=
an><span class=3D"n">arr</span><span class=3D"p">)</span><span class=3D"w">=
</span>
<span class=3D"w">        </span><span class=3D"kt">integer</span><span cla=
ss=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">device</span><=
span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </s=
pan><span class=3D"n">arr</span><span class=3D"p">(:)</span><span class=3D"=
w"></span>
<span class=3D"w">        </span><span class=3D"nb">sum</span><span class=
=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span =
class=3D"mi">0</span><span class=3D"w"></span>
<span class=3D"w">        </span><span class=3D"c">!$cuf kernel do &lt;&lt;=
&lt;*,*&gt;&gt;&gt;</span>
<span class=3D"w">        </span><span class=3D"k">do </span><span class=3D=
"n">i</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span cla=
ss=3D"w"> </span><span class=3D"mi">1</span><span class=3D"p">,</span><span=
 class=3D"w"> </span><span class=3D"n">size</span><span class=3D"p">(</span=
><span class=3D"n">arr</span><span class=3D"p">)</span><span class=3D"w"></=
span>
<span class=3D"w">          </span><span class=3D"nb">sum</span><span class=
=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span =
class=3D"nb">sum</span><span class=3D"w"> </span><span class=3D"o">+</span>=
<span class=3D"w"> </span><span class=3D"n">arr</span><span class=3D"p">(</=
span><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"w">=
</span>
<span class=3D"w">        </span><span class=3D"k">end do</span>
<span class=3D"k">    end function </span><span class=3D"nb">sum</span>
<span class=3D"k">end module </span><span class=3D"n">testfill</span><span =
class=3D"w"></span>

<span class=3D"k">program </span><span class=3D"n">tfill</span><span class=
=3D"w"></span>
<span class=3D"k">use </span><span class=3D"n">testfill</span><span class=
=3D"w"></span>
<span class=3D"kt">integer</span><span class=3D"p">,</span><span class=3D"w=
"> </span><span class=3D"n">device</span><span class=3D"w"> </span><span cl=
ass=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">iarr</span>=
<span class=3D"p">(</span><span class=3D"mi">100</span><span class=3D"p">)<=
/span><span class=3D"w"></span>
<span class=3D"n">iarr</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"mi">0</span><span class=
=3D"w"></span>
<span class=3D"k">call </span><span class=3D"n">Kernel</span><span class=3D=
"o">&lt;&lt;&lt;</span><span class=3D"mi">1</span><span class=3D"p">,</span=
><span class=3D"mi">100</span><span class=3D"o">&gt;&gt;&gt;</span><span cl=
ass=3D"p">(</span><span class=3D"n">iarr</span><span class=3D"p">)</span><s=
pan class=3D"w"></span>
<span class=3D"k">print</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"p">,</span><span class=3D"nb">sum</span><span class=
=3D"p">(</span><span class=3D"n">iarr</span><span class=3D"p">)</span><span=
 class=3D"o">=3D=3D</span><span class=3D"mi">100</span><span class=3D"o">*<=
/span><span class=3D"mi">101</span><span class=3D"o">/</span><span class=3D=
"mi">2</span><span class=3D"w"></span>
<span class=3D"k">end program </span><span class=3D"n">tfill</span><span cl=
ass=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell23">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>This file also needs to be compiled with the <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">-=E2=81=A0gpu=3Drdc</span></code> fla=
g and then can be linked with the previous object file:</p>
<div class=3D"highlight-text notranslate"><div class=3D"highlight"><pre id=
=3D"codecell24"><span></span>% nvfortran -cuda -gpu=3Drdc tfill.cuf ffill.o
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell24">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">-=
=E2=81=A0gpu=3Drdc</span></code> option has been the default for many relea=
ses. The <code class=3D"docutils literal notranslate"><span class=3D"pre">-=
=E2=81=A0gpu=3Dnordc</span></code> flag will override the current default.<=
/p>
</section>
<section id=3D"declaring-device-pointer-and-target-arrays">
<h3><span class=3D"section-number">2.12.3. </span>Declaring Device Pointer =
and Target Arrays<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hp=
c-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#declaring-d=
evice-pointer-and-target-arrays" title=3D"Permalink to this headline">=EF=
=83=81</a></h3>
<p>Recently, NVIDIA added support for F90 pointers that point to device dat=
a. Currently, this is limited to pointers that are declared at module scope=
. The pointers can be accessed through module association, or can be passed=
 in to global subroutines. The <code class=3D"docutils literal notranslate"=
><span class=3D"pre">associated()</span></code> function is also supported =
in device code. The following code shows many examples of using F90 pointer=
s. These pointers can also be used in CUF kernels.</p>
<p><strong>Declaring device pointer and target arrays in CUDA Fortran modul=
es</strong></p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell25"><span></span><span class=3D"k">module </span><span class=
=3D"n">devptr</span><span class=3D"w"></span>
<span class=3D"c">! currently, pointer declarations must be in a module</sp=
an>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"n">device</span><span clas=
s=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">pointer</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">dimens=
ion</span><span class=3D"p">(:)</span><span class=3D"w"> </span><span class=
=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">mod_dev_ptr</s=
pan><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"n">device</span><span clas=
s=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">pointer</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">dimens=
ion</span><span class=3D"p">(:)</span><span class=3D"w"> </span><span class=
=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">arg_dev_ptr</s=
pan><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"n">device</span><span clas=
s=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">target</span><s=
pan class=3D"p">,</span><span class=3D"w">  </span><span class=3D"k">dimens=
ion</span><span class=3D"p">(</span><span class=3D"mi">4</span><span class=
=3D"p">)</span><span class=3D"w"> </span><span class=3D"kd">::</span><span =
class=3D"w"> </span><span class=3D"n">mod_dev_arr</span><span class=3D"w"><=
/span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"n">device</span><span clas=
s=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">dimension</span=
><span class=3D"p">(</span><span class=3D"mi">4</span><span class=3D"p">)</=
span><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w=
"> </span><span class=3D"n">mod_res_arr</span><span class=3D"w"></span>
<span class=3D"k">contains</span>
<span class=3D"k">  </span><span class=3D"n">attributes</span><span class=
=3D"p">(</span><span class=3D"n">global</span><span class=3D"p">)</span><sp=
an class=3D"w"> </span><span class=3D"k">subroutine </span><span class=3D"n=
">test</span><span class=3D"p">(</span><span class=3D"n">arg_ptr</span><spa=
n class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">real</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"n">device</span><span cl=
ass=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">pointer</span=
><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">dime=
nsion</span><span class=3D"p">(:)</span><span class=3D"w"> </span><span cla=
ss=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">arg_ptr</spa=
n><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"c">! copy 4 elements from one o=
f two spots</span>
<span class=3D"w">    </span><span class=3D"k">if</span><span class=3D"w"> =
</span><span class=3D"p">(</span><span class=3D"nb">associated</span><span =
class=3D"p">(</span><span class=3D"n">arg_ptr</span><span class=3D"p">))</s=
pan><span class=3D"w"> </span><span class=3D"k">then</span>
<span class=3D"k">      </span><span class=3D"n">mod_res_arr</span><span cl=
ass=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><sp=
an class=3D"n">arg_ptr</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">else</span>
<span class=3D"k">      </span><span class=3D"n">mod_res_arr</span><span cl=
ass=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><sp=
an class=3D"n">mod_dev_ptr</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">end if</span>
<span class=3D"k">  end subroutine </span><span class=3D"n">test</span><spa=
n class=3D"w"></span>
<span class=3D"k">end module </span><span class=3D"n">devptr</span><span cl=
ass=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell25">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<hr class=3D"docutils">
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell26"><span></span><span class=3D"k">program </span><span class=
=3D"n">test</span><span class=3D"w"></span>
<span class=3D"k">use </span><span class=3D"n">devptr</span><span class=3D"=
w"></span>
<span class=3D"kt">real</span><span class=3D"p">,</span><span class=3D"w"> =
</span><span class=3D"n">device</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"k">target</span><span class=3D"p">,</span><sp=
an class=3D"w"> </span><span class=3D"k">dimension</span><span class=3D"p">=
(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span class=3D=
"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span cla=
ss=3D"n">a_dev</span><span class=3D"w"></span>
<span class=3D"kt">real  </span><span class=3D"k">result</span><span class=
=3D"p">(</span><span class=3D"mi">20</span><span class=3D"p">)</span><span =
class=3D"w"></span>

<span class=3D"n">a_dev</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"p">(</span><span class=
=3D"o">/</span><span class=3D"w"> </span><span class=3D"mf">1.0</span><span=
 class=3D"p">,</span><span class=3D"w"> </span><span class=3D"mf">2.0</span=
><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"mf">3.0=
</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"m=
f">4.0</span><span class=3D"w"> </span><span class=3D"o">/</span><span clas=
s=3D"p">)</span><span class=3D"w"></span>

<span class=3D"c">! Pointer assignment to device array declared on host,</s=
pan>
<span class=3D"c">! passed as argument.  First four result elements.</span>
<span class=3D"n">arg_dev_ptr</span><span class=3D"w"> </span><span class=
=3D"o">=3D&gt;</span><span class=3D"w"> </span><span class=3D"n">a_dev</spa=
n><span class=3D"w"></span>
<span class=3D"k">call </span><span class=3D"n">test</span><span class=3D"o=
">&lt;&lt;&lt;</span><span class=3D"mi">1</span><span class=3D"p">,</span><=
span class=3D"mi">1</span><span class=3D"o">&gt;&gt;&gt;</span><span class=
=3D"p">(</span><span class=3D"n">arg_dev_ptr</span><span class=3D"p">)</spa=
n><span class=3D"w"></span>
<span class=3D"k">result</span><span class=3D"p">(</span><span class=3D"mi"=
>1</span><span class=3D"p">:</span><span class=3D"mi">4</span><span class=
=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span =
class=3D"w"> </span><span class=3D"n">mod_res_arr</span><span class=3D"w"><=
/span>

<span class=3D"c">!$cuf kernel do &lt;&lt;&lt;*,*&gt;&gt;&gt;</span>
<span class=3D"k">do </span><span class=3D"n">i</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"m=
i">1</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"mi">4</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">mod_dev_arr</span><span class=
=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">)</span><span cl=
ass=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><sp=
an class=3D"n">arg_dev_ptr</span><span class=3D"p">(</span><span class=3D"n=
">i</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"o">+</span><span class=3D"w"> </span><span class=3D"mf">4.0</span><span=
 class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">a_dev</span><span class=3D"p">=
(</span><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"=
w">       </span><span class=3D"o">=3D</span><span class=3D"w"> </span><spa=
n class=3D"n">arg_dev_ptr</span><span class=3D"p">(</span><span class=3D"n"=
>i</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D=
"o">+</span><span class=3D"w"> </span><span class=3D"mf">8.0</span><span cl=
ass=3D"w"></span>
<span class=3D"k">end do</span><span class=3D"w"></span>

<span class=3D"c">! Pointer assignment to module array, argument nullified<=
/span>
<span class=3D"c">! Second four result elements</span>
<span class=3D"n">mod_dev_ptr</span><span class=3D"w"> </span><span class=
=3D"o">=3D&gt;</span><span class=3D"w"> </span><span class=3D"n">mod_dev_ar=
r</span><span class=3D"w"></span>
<span class=3D"n">arg_dev_ptr</span><span class=3D"w"> </span><span class=
=3D"o">=3D&gt;</span><span class=3D"w"> </span><span class=3D"nb">null</spa=
n><span class=3D"p">()</span><span class=3D"w"></span>
<span class=3D"k">call </span><span class=3D"n">test</span><span class=3D"o=
">&lt;&lt;&lt;</span><span class=3D"mi">1</span><span class=3D"p">,</span><=
span class=3D"mi">1</span><span class=3D"o">&gt;&gt;&gt;</span><span class=
=3D"p">(</span><span class=3D"n">arg_dev_ptr</span><span class=3D"p">)</spa=
n><span class=3D"w"></span>
<span class=3D"k">result</span><span class=3D"p">(</span><span class=3D"mi"=
>5</span><span class=3D"p">:</span><span class=3D"mi">8</span><span class=
=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span =
class=3D"w"> </span><span class=3D"n">mod_res_arr</span><span class=3D"w"><=
/span>

<span class=3D"c">! Pointer assignment to updated device array, now associa=
ted</span>
<span class=3D"c">! Third four result elements</span>
<span class=3D"n">arg_dev_ptr</span><span class=3D"w"> </span><span class=
=3D"o">=3D&gt;</span><span class=3D"w"> </span><span class=3D"n">a_dev</spa=
n><span class=3D"w"></span>
<span class=3D"k">call </span><span class=3D"n">test</span><span class=3D"o=
">&lt;&lt;&lt;</span><span class=3D"mi">1</span><span class=3D"p">,</span><=
span class=3D"mi">1</span><span class=3D"o">&gt;&gt;&gt;</span><span class=
=3D"p">(</span><span class=3D"n">arg_dev_ptr</span><span class=3D"p">)</spa=
n><span class=3D"w"></span>
<span class=3D"k">result</span><span class=3D"p">(</span><span class=3D"mi"=
>9</span><span class=3D"p">:</span><span class=3D"mi">12</span><span class=
=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span =
class=3D"w"> </span><span class=3D"n">mod_res_arr</span><span class=3D"w"><=
/span>

<span class=3D"c">!$cuf kernel do &lt;&lt;&lt;*,*&gt;&gt;&gt;</span>
<span class=3D"k">do </span><span class=3D"n">i</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"m=
i">1</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"mi">4</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">mod_dev_arr</span><span class=
=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">)</span><span cl=
ass=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><sp=
an class=3D"mi">2</span><span class=3D"mf">5.0</span><span class=3D"w"> </s=
pan><span class=3D"o">-</span><span class=3D"w"> </span><span class=3D"n">m=
od_dev_ptr</span><span class=3D"p">(</span><span class=3D"n">i</span><span =
class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">a_dev</span><span class=3D"p">=
(</span><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"=
w">       </span><span class=3D"o">=3D</span><span class=3D"w"> </span><spa=
n class=3D"mi">2</span><span class=3D"mf">5.0</span><span class=3D"w"> </sp=
an><span class=3D"o">-</span><span class=3D"w"> </span><span class=3D"n">ar=
g_dev_ptr</span><span class=3D"p">(</span><span class=3D"n">i</span><span c=
lass=3D"p">)</span><span class=3D"w"></span>
<span class=3D"k">end do</span><span class=3D"w"></span>

<span class=3D"c">! Non-contiguous pointer assignment to updated device arr=
ay</span>
<span class=3D"c">! Fourth four element elements</span>
<span class=3D"n">arg_dev_ptr</span><span class=3D"w"> </span><span class=
=3D"o">=3D&gt;</span><span class=3D"w"> </span><span class=3D"n">a_dev</spa=
n><span class=3D"p">(</span><span class=3D"mi">4</span><span class=3D"p">:<=
/span><span class=3D"mi">1</span><span class=3D"p">:</span><span class=3D"o=
">-</span><span class=3D"mi">1</span><span class=3D"p">)</span><span class=
=3D"w"></span>
<span class=3D"k">call </span><span class=3D"n">test</span><span class=3D"o=
">&lt;&lt;&lt;</span><span class=3D"mi">1</span><span class=3D"p">,</span><=
span class=3D"mi">1</span><span class=3D"o">&gt;&gt;&gt;</span><span class=
=3D"p">(</span><span class=3D"n">arg_dev_ptr</span><span class=3D"p">)</spa=
n><span class=3D"w"></span>
<span class=3D"k">result</span><span class=3D"p">(</span><span class=3D"mi"=
>13</span><span class=3D"p">:</span><span class=3D"mi">16</span><span class=
=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span =
class=3D"w"> </span><span class=3D"n">mod_res_arr</span><span class=3D"w"><=
/span>

<span class=3D"c">! Non-contiguous pointer assignment to updated module arr=
ay</span>
<span class=3D"c">! Last four elements of the result</span>
<span class=3D"k">nullify</span><span class=3D"p">(</span><span class=3D"n"=
>arg_dev_ptr</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">mod_dev_ptr</span><span class=3D"w"> </span><span class=
=3D"o">=3D&gt;</span><span class=3D"w"> </span><span class=3D"n">mod_dev_ar=
r</span><span class=3D"p">(</span><span class=3D"mi">4</span><span class=3D=
"p">:</span><span class=3D"mi">1</span><span class=3D"p">:</span><span clas=
s=3D"o">-</span><span class=3D"mi">1</span><span class=3D"p">)</span><span =
class=3D"w"></span>
<span class=3D"k">call </span><span class=3D"n">test</span><span class=3D"o=
">&lt;&lt;&lt;</span><span class=3D"mi">1</span><span class=3D"p">,</span><=
span class=3D"mi">1</span><span class=3D"o">&gt;&gt;&gt;</span><span class=
=3D"p">(</span><span class=3D"n">arg_dev_ptr</span><span class=3D"p">)</spa=
n><span class=3D"w"></span>
<span class=3D"k">result</span><span class=3D"p">(</span><span class=3D"mi"=
>17</span><span class=3D"p">:</span><span class=3D"mi">20</span><span class=
=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span =
class=3D"w"> </span><span class=3D"n">mod_res_arr</span><span class=3D"w"><=
/span>

<span class=3D"k">print</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"p">,</span><span class=3D"k">all</span><span class=3D=
"p">(</span><span class=3D"k">result</span><span class=3D"o">=3D=3D</span><=
span class=3D"p">(</span><span class=3D"o">/</span><span class=3D"p">(</spa=
n><span class=3D"kt">real</span><span class=3D"p">(</span><span class=3D"n"=
>i</span><span class=3D"p">),</span><span class=3D"n">i</span><span class=
=3D"o">=3D</span><span class=3D"mi">1</span><span class=3D"p">,</span><span=
 class=3D"mi">20</span><span class=3D"p">)</span><span class=3D"o">/</span>=
<span class=3D"p">))</span><span class=3D"w"></span>
<span class=3D"k">end</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell26">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"declaring-textures">
<h3><span class=3D"section-number">2.12.4. </span>Declaring Textures<a clas=
s=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compi=
lers/cuda-fortran-prog-guide/index.html#declaring-textures" title=3D"Permal=
ink to this headline">=EF=83=81</a></h3>
<p>Reading values through the texture memory interface is no longer recomme=
nded or necessary on newer GPUs and support for this feature has been dropp=
ed in CUDA 12.0.</p>
<p>CUDA texture memory can be fetched through a special texture attribute a=
scribed to F90 pointers that point to device data with the target attribute=
. In CUDA Fortran, textures are currently just for read-only data that trav=
el through the texture cache. Since there is separate hardware to support t=
his cache, in many cases using the texture attribute is a performance boost=
, especially in cases where the accesses are irregular and noncontiguous am=
ongst threads. The following simple example demonstrates this capability:</=
p>
<p><strong>Declaring textures in CUDA Fortran modules</strong></p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell27"><span></span><span class=3D"k">module </span><span class=
=3D"n">memtests</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
(</span><span class=3D"mi">8</span><span class=3D"p">),</span><span class=
=3D"w"> </span><span class=3D"n">texture</span><span class=3D"p">,</span><s=
pan class=3D"w"> </span><span class=3D"k">pointer</span><span class=3D"w"> =
</span><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D=
"n">t</span><span class=3D"p">(:)</span><span class=3D"w">  </span><span cl=
ass=3D"c">! declare the texture</span>
<span class=3D"w">  </span><span class=3D"k">contains</span>
<span class=3D"k">    </span><span class=3D"n">attributes</span><span class=
=3D"p">(</span><span class=3D"n">device</span><span class=3D"p">)</span><sp=
an class=3D"w"> </span><span class=3D"kt">integer </span><span class=3D"k">=
function </span><span class=3D"n">bitrev8</span><span class=3D"p">(</span><=
span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"w"></span=
>
<span class=3D"w">    </span><span class=3D"kt">integer </span><span class=
=3D"n">ix1</span><span class=3D"p">,</span><span class=3D"w"> </span><span =
class=3D"n">ix2</span><span class=3D"p">,</span><span class=3D"w"> </span><=
span class=3D"n">ix</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">ix</span><span class=3D"w"> =
</span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D=
"n">i</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">ix1</span><span class=3D"w">=
 </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"nb">ishft</span><span class=3D"p">(</span><span class=3D"nb">iand</span=
><span class=3D"p">(</span><span class=3D"n">ix</span><span class=3D"p">,</=
span><span class=3D"n">z</span><span class=3D"s1">'0aa'</span><span class=
=3D"p">),</span><span class=3D"o">-</span><span class=3D"mi">1</span><span =
class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">ix2</span><span class=3D"w">=
 </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"nb">ishft</span><span class=3D"p">(</span><span class=3D"nb">iand</span=
><span class=3D"p">(</span><span class=3D"n">ix</span><span class=3D"p">,</=
span><span class=3D"n">z</span><span class=3D"s1">'055'</span><span class=
=3D"p">),</span><span class=3D"w"> </span><span class=3D"mi">1</span><span =
class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">ix</span><span class=3D"w"> =
</span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D=
"nb">ior</span><span class=3D"p">(</span><span class=3D"n">ix1</span><span =
class=3D"p">,</span><span class=3D"n">ix2</span><span class=3D"p">)</span><=
span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">ix1</span><span class=3D"w">=
 </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"nb">ishft</span><span class=3D"p">(</span><span class=3D"nb">iand</span=
><span class=3D"p">(</span><span class=3D"n">ix</span><span class=3D"p">,</=
span><span class=3D"n">z</span><span class=3D"s1">'0cc'</span><span class=
=3D"p">),</span><span class=3D"o">-</span><span class=3D"mi">2</span><span =
class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">ix2</span><span class=3D"w">=
 </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"nb">ishft</span><span class=3D"p">(</span><span class=3D"nb">iand</span=
><span class=3D"p">(</span><span class=3D"n">ix</span><span class=3D"p">,</=
span><span class=3D"n">z</span><span class=3D"s1">'033'</span><span class=
=3D"p">),</span><span class=3D"w"> </span><span class=3D"mi">2</span><span =
class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">ix</span><span class=3D"w"> =
</span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D=
"nb">ior</span><span class=3D"p">(</span><span class=3D"n">ix1</span><span =
class=3D"p">,</span><span class=3D"n">ix2</span><span class=3D"p">)</span><=
span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">ix1</span><span class=3D"w">=
 </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"nb">ishft</span><span class=3D"p">(</span><span class=3D"n">ix</span><s=
pan class=3D"p">,</span><span class=3D"o">-</span><span class=3D"mi">4</spa=
n><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">ix2</span><span class=3D"w">=
 </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"nb">ishft</span><span class=3D"p">(</span><span class=3D"n">ix</span><s=
pan class=3D"p">,</span><span class=3D"w"> </span><span class=3D"mi">4</spa=
n><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">bitrev8</span><span class=3D=
"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span cla=
ss=3D"nb">iand</span><span class=3D"p">(</span><span class=3D"nb">ior</span=
><span class=3D"p">(</span><span class=3D"n">ix1</span><span class=3D"p">,<=
/span><span class=3D"n">ix2</span><span class=3D"p">),</span><span class=3D=
"n">z</span><span class=3D"s1">'0ff'</span><span class=3D"p">)</span><span =
class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">end function </span><span cl=
ass=3D"n">bitrev8</span><span class=3D"w"></span>

<span class=3D"w">    </span><span class=3D"n">attributes</span><span class=
=3D"p">(</span><span class=3D"n">global</span><span class=3D"p">)</span><sp=
an class=3D"w"> </span><span class=3D"k">subroutine </span><span class=3D"n=
">without</span><span class=3D"p">(</span><span class=3D"w"> </span><span c=
lass=3D"n">a</span><span class=3D"p">,</span><span class=3D"w"> </span><spa=
n class=3D"n">b</span><span class=3D"w"> </span><span class=3D"p">)</span><=
span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">real</span><span class=3D"p=
">(</span><span class=3D"mi">8</span><span class=3D"p">),</span><span class=
=3D"w"> </span><span class=3D"n">device</span><span class=3D"w"> </span><sp=
an class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">a</spa=
n><span class=3D"p">(</span><span class=3D"o">*</span><span class=3D"p">),<=
/span><span class=3D"w"> </span><span class=3D"n">b</span><span class=3D"p"=
>(</span><span class=3D"o">*</span><span class=3D"p">)</span><span class=3D=
"w"></span>
<span class=3D"w">    </span><span class=3D"n">i</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
n">blockDim</span><span class=3D"p">%</span><span class=3D"n">x</span><span=
 class=3D"o">*</span><span class=3D"p">(</span><span class=3D"n">blockIdx</=
span><span class=3D"p">%</span><span class=3D"n">x</span><span class=3D"o">=
-</span><span class=3D"mi">1</span><span class=3D"p">)</span><span class=3D=
"w"> </span><span class=3D"o">+</span><span class=3D"w"> </span><span class=
=3D"n">threadIdx</span><span class=3D"p">%</span><span class=3D"n">x</span>=
<span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">j</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
n">bitrev8</span><span class=3D"p">(</span><span class=3D"n">threadIdx</spa=
n><span class=3D"p">%</span><span class=3D"n">x</span><span class=3D"o">-</=
span><span class=3D"mi">1</span><span class=3D"p">)</span><span class=3D"w"=
> </span><span class=3D"o">+</span><span class=3D"w"> </span><span class=3D=
"mi">1</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">b</span><span class=3D"p">(<=
/span><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">a</span><span class=3D"p">(</span><span class=3D"n">j</span><span cl=
ass=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">return</span>
<span class=3D"k">    end subroutine</span>

<span class=3D"k">    </span><span class=3D"n">attributes</span><span class=
=3D"p">(</span><span class=3D"n">global</span><span class=3D"p">)</span><sp=
an class=3D"w"> </span><span class=3D"k">subroutine </span><span class=3D"n=
">withtex</span><span class=3D"p">(</span><span class=3D"w"> </span><span c=
lass=3D"n">a</span><span class=3D"p">,</span><span class=3D"w"> </span><spa=
n class=3D"n">b</span><span class=3D"w"> </span><span class=3D"p">)</span><=
span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">real</span><span class=3D"p=
">(</span><span class=3D"mi">8</span><span class=3D"p">),</span><span class=
=3D"w"> </span><span class=3D"n">device</span><span class=3D"w"> </span><sp=
an class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">a</spa=
n><span class=3D"p">(</span><span class=3D"o">*</span><span class=3D"p">),<=
/span><span class=3D"w"> </span><span class=3D"n">b</span><span class=3D"p"=
>(</span><span class=3D"o">*</span><span class=3D"p">)</span><span class=3D=
"w"></span>
<span class=3D"w">    </span><span class=3D"n">i</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
n">blockDim</span><span class=3D"p">%</span><span class=3D"n">x</span><span=
 class=3D"o">*</span><span class=3D"p">(</span><span class=3D"n">blockIdx</=
span><span class=3D"p">%</span><span class=3D"n">x</span><span class=3D"o">=
-</span><span class=3D"mi">1</span><span class=3D"p">)</span><span class=3D=
"w"> </span><span class=3D"o">+</span><span class=3D"w"> </span><span class=
=3D"n">threadIdx</span><span class=3D"p">%</span><span class=3D"n">x</span>=
<span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">j</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
n">bitrev8</span><span class=3D"p">(</span><span class=3D"n">threadIdx</spa=
n><span class=3D"p">%</span><span class=3D"n">x</span><span class=3D"o">-</=
span><span class=3D"mi">1</span><span class=3D"p">)</span><span class=3D"w"=
> </span><span class=3D"o">+</span><span class=3D"w"> </span><span class=3D=
"mi">1</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">b</span><span class=3D"p">(<=
/span><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">t</span><span class=3D"p">(</span><span class=3D"n">j</span><span cl=
ass=3D"p">)</span><span class=3D"w">  </span><span class=3D"c">! This subro=
utine accesses a through the texture</span>
<span class=3D"w">    </span><span class=3D"k">return</span>
<span class=3D"k">    end subroutine</span>
<span class=3D"k">end module </span><span class=3D"n">memtests</span><span =
class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell27">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<hr class=3D"docutils">
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell28"><span></span><span class=3D"k">program </span><span class=
=3D"n">t</span><span class=3D"w"></span>
<span class=3D"k">use </span><span class=3D"n">cudafor</span><span class=3D=
"w"></span>
<span class=3D"k">use </span><span class=3D"n">memtests</span><span class=
=3D"w"></span>
<span class=3D"kt">real</span><span class=3D"p">(</span><span class=3D"mi">=
8</span><span class=3D"p">),</span><span class=3D"w"> </span><span class=3D=
"n">device</span><span class=3D"p">,</span><span class=3D"w"> </span><span =
class=3D"k">target</span><span class=3D"p">,</span><span class=3D"w"> </spa=
n><span class=3D"k">allocatable</span><span class=3D"w"> </span><span class=
=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">da</span><span=
 class=3D"p">(:)</span><span class=3D"w"></span>
<span class=3D"kt">real</span><span class=3D"p">(</span><span class=3D"mi">=
8</span><span class=3D"p">),</span><span class=3D"w"> </span><span class=3D=
"n">device</span><span class=3D"p">,</span><span class=3D"w"> </span><span =
class=3D"k">allocatable</span><span class=3D"w"> </span><span class=3D"kd">=
::</span><span class=3D"w"> </span><span class=3D"n">db</span><span class=
=3D"p">(:)</span><span class=3D"w"></span>
<span class=3D"kt">integer</span><span class=3D"p">,</span><span class=3D"w=
"> </span><span class=3D"k">parameter</span><span class=3D"w"> </span><span=
 class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">n</span>=
<span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </=
span><span class=3D"mi">1024</span><span class=3D"o">*</span><span class=3D=
"mi">1024</span><span class=3D"w"></span>
<span class=3D"kt">integer</span><span class=3D"p">,</span><span class=3D"w=
"> </span><span class=3D"k">parameter</span><span class=3D"w"> </span><span=
 class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">nthreads=
</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D=
"w"> </span><span class=3D"mi">256</span><span class=3D"w"></span>
<span class=3D"kt">integer</span><span class=3D"p">,</span><span class=3D"w=
"> </span><span class=3D"k">parameter</span><span class=3D"w"> </span><span=
 class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">ntimes</=
span><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w=
"> </span><span class=3D"mi">1000</span><span class=3D"w"></span>
<span class=3D"k">type</span><span class=3D"p">(</span><span class=3D"n">cu=
daEvent</span><span class=3D"p">)</span><span class=3D"w"> </span><span cla=
ss=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">start</span>=
<span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">stop<=
/span>
<span class=3D"kt">real</span><span class=3D"p">(</span><span class=3D"mi">=
8</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"=
n">b</span><span class=3D"p">(</span><span class=3D"n">n</span><span class=
=3D"p">)</span><span class=3D"w"></span>

<span class=3D"k">allocate</span><span class=3D"p">(</span><span class=3D"n=
">da</span><span class=3D"p">(</span><span class=3D"n">nthreads</span><span=
 class=3D"p">))</span><span class=3D"w"></span>
<span class=3D"k">allocate</span><span class=3D"p">(</span><span class=3D"n=
">db</span><span class=3D"p">(</span><span class=3D"n">n</span><span class=
=3D"p">))</span><span class=3D"w"></span>

<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaEventCreate</span=
><span class=3D"p">(</span><span class=3D"n">start</span><span class=3D"p">=
)</span><span class=3D"w"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaEventCreate</span=
><span class=3D"p">(</span><span class=3D"k">stop</span><span class=3D"p">)=
</span><span class=3D"w"></span>

<span class=3D"n">db</span><span class=3D"w"> </span><span class=3D"o">=3D<=
/span><span class=3D"w"> </span><span class=3D"mi">10</span><span class=3D"=
mf">0.0d0</span><span class=3D"w"></span>
<span class=3D"n">da</span><span class=3D"w"> </span><span class=3D"o">=3D<=
/span><span class=3D"w"> </span><span class=3D"p">(</span><span class=3D"o"=
>/</span><span class=3D"w"> </span><span class=3D"p">(</span><span class=3D=
"nb">dble</span><span class=3D"p">(</span><span class=3D"n">i</span><span c=
lass=3D"p">),</span><span class=3D"n">i</span><span class=3D"o">=3D</span><=
span class=3D"mi">1</span><span class=3D"p">,</span><span class=3D"n">nthre=
ads</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"o">/</span><span class=3D"p">)</span><span class=3D"w"></span>

<span class=3D"k">call </span><span class=3D"n">without</span><span class=
=3D"o">&lt;&lt;&lt;</span><span class=3D"n">n</span><span class=3D"o">/</sp=
an><span class=3D"n">nthreads</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">nthreads</span><span class=3D"o">&gt;&gt;&=
gt;</span><span class=3D"w"> </span><span class=3D"p">(</span><span class=
=3D"n">da</span><span class=3D"p">,</span><span class=3D"w"> </span><span c=
lass=3D"n">db</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaEventRecord</span=
><span class=3D"p">(</span><span class=3D"n">start</span><span class=3D"p">=
,</span><span class=3D"mi">0</span><span class=3D"p">)</span><span class=3D=
"w"></span>
<span class=3D"k">do </span><span class=3D"n">j</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"m=
i">1</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">ntimes</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">call </span><span class=3D"n">=
without</span><span class=3D"o">&lt;&lt;&lt;</span><span class=3D"n">n</spa=
n><span class=3D"o">/</span><span class=3D"n">nthreads</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"n">nthreads</span><spa=
n class=3D"o">&gt;&gt;&gt;</span><span class=3D"w"> </span><span class=3D"p=
">(</span><span class=3D"n">da</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">db</span><span class=3D"p">)</span><span c=
lass=3D"w"></span>
<span class=3D"k">end do</span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaEventRecord</span=
><span class=3D"p">(</span><span class=3D"k">stop</span><span class=3D"p">,=
</span><span class=3D"mi">0</span><span class=3D"p">)</span><span class=3D"=
w"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaDeviceSynchronize=
</span><span class=3D"p">()</span><span class=3D"w"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaEventElapsedTime<=
/span><span class=3D"p">(</span><span class=3D"n">time1</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">start</span><spa=
n class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">stop</spa=
n><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">time1</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">time1</span><span cla=
ss=3D"w"> </span><span class=3D"o">/</span><span class=3D"w"> </span><span =
class=3D"p">(</span><span class=3D"n">ntimes</span><span class=3D"o">*</spa=
n><span class=3D"mf">1.0e3</span><span class=3D"p">)</span><span class=3D"w=
"></span>
<span class=3D"n">b</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">db</span><span class=3D"w"=
></span>
<span class=3D"k">print</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"p">,</span><span class=3D"nb">sum</span><span class=
=3D"p">(</span><span class=3D"n">b</span><span class=3D"p">)</span><span cl=
ass=3D"o">=3D=3D</span><span class=3D"p">(</span><span class=3D"n">n</span>=
<span class=3D"o">*</span><span class=3D"p">(</span><span class=3D"n">nthre=
ads</span><span class=3D"o">+</span><span class=3D"mi">1</span><span class=
=3D"p">)</span><span class=3D"o">/</span><span class=3D"mi">2</span><span c=
lass=3D"p">)</span><span class=3D"w"></span>

<span class=3D"n">db</span><span class=3D"w"> </span><span class=3D"o">=3D<=
/span><span class=3D"w"> </span><span class=3D"mi">10</span><span class=3D"=
mf">0.0d0</span><span class=3D"w"></span>
<span class=3D"n">t</span><span class=3D"w"> </span><span class=3D"o">=3D&g=
t;</span><span class=3D"w"> </span><span class=3D"n">da</span><span class=
=3D"w">  </span><span class=3D"c">! assign the texture to da using f90 poin=
ter assignment</span>

<span class=3D"k">call </span><span class=3D"n">withtex</span><span class=
=3D"o">&lt;&lt;&lt;</span><span class=3D"n">n</span><span class=3D"o">/</sp=
an><span class=3D"n">nthreads</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">nthreads</span><span class=3D"o">&gt;&gt;&=
gt;</span><span class=3D"w"> </span><span class=3D"p">(</span><span class=
=3D"n">da</span><span class=3D"p">,</span><span class=3D"w"> </span><span c=
lass=3D"n">db</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaEventRecord</span=
><span class=3D"p">(</span><span class=3D"n">start</span><span class=3D"p">=
,</span><span class=3D"mi">0</span><span class=3D"p">)</span><span class=3D=
"w"></span>
<span class=3D"k">do </span><span class=3D"n">j</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"m=
i">1</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">ntimes</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">call </span><span class=3D"n">=
withtex</span><span class=3D"o">&lt;&lt;&lt;</span><span class=3D"n">n</spa=
n><span class=3D"o">/</span><span class=3D"n">nthreads</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"n">nthreads</span><spa=
n class=3D"o">&gt;&gt;&gt;</span><span class=3D"w"> </span><span class=3D"p=
">(</span><span class=3D"n">da</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">db</span><span class=3D"p">)</span><span c=
lass=3D"w"></span>
<span class=3D"k">end do</span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaEventRecord</span=
><span class=3D"p">(</span><span class=3D"k">stop</span><span class=3D"p">,=
</span><span class=3D"mi">0</span><span class=3D"p">)</span><span class=3D"=
w"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaDeviceSynchronize=
</span><span class=3D"p">()</span><span class=3D"w"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaEventElapsedTime<=
/span><span class=3D"p">(</span><span class=3D"n">time2</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">start</span><spa=
n class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">stop</spa=
n><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">time2</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">time2</span><span cla=
ss=3D"w"> </span><span class=3D"o">/</span><span class=3D"w"> </span><span =
class=3D"p">(</span><span class=3D"n">ntimes</span><span class=3D"o">*</spa=
n><span class=3D"mf">1.0e3</span><span class=3D"p">)</span><span class=3D"w=
"></span>
<span class=3D"n">b</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">db</span><span class=3D"w"=
></span>
<span class=3D"k">print</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"p">,</span><span class=3D"nb">sum</span><span class=
=3D"p">(</span><span class=3D"n">b</span><span class=3D"p">)</span><span cl=
ass=3D"o">=3D=3D</span><span class=3D"p">(</span><span class=3D"n">n</span>=
<span class=3D"o">*</span><span class=3D"p">(</span><span class=3D"n">nthre=
ads</span><span class=3D"o">+</span><span class=3D"mi">1</span><span class=
=3D"p">)</span><span class=3D"o">/</span><span class=3D"mi">2</span><span c=
lass=3D"p">)</span><span class=3D"w"></span>

<span class=3D"k">print</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"p">,</span><span class=3D"s2">"Time with    textures"=
</span><span class=3D"p">,</span><span class=3D"n">time2</span><span class=
=3D"w"></span>
<span class=3D"k">print</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"p">,</span><span class=3D"s2">"Time without textures"=
</span><span class=3D"p">,</span><span class=3D"n">time1</span><span class=
=3D"w"></span>
<span class=3D"k">print</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"p">,</span><span class=3D"s2">"Speedup with textures"=
</span><span class=3D"p">,</span><span class=3D"n">time1</span><span class=
=3D"w"> </span><span class=3D"o">/</span><span class=3D"w"> </span><span cl=
ass=3D"n">time2</span><span class=3D"w"></span>

<span class=3D"k">deallocate</span><span class=3D"p">(</span><span class=3D=
"n">da</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"k">deallocate</span><span class=3D"p">(</span><span class=3D=
"n">db</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"k">end</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell28">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
</section>
<section id=3D"cuda-fortran-conditional-compilation">
<h2><span class=3D"section-number">2.13. </span>CUDA Fortran Conditional Co=
mpilation<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/ar=
chive/25.3/compilers/cuda-fortran-prog-guide/index.html#cuda-fortran-condit=
ional-compilation" title=3D"Permalink to this headline">=EF=83=81</a></h2>
<p>This section describes several ways that CUDA Fortran can be enabled in =
your application while minimizing the changes made for maintaining a single=
 CPU/GPU code base.</p>
<p>If CUDA Fortran is enabled in compilation, either by specifying <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">-=E2=81=A0cuda</sp=
an></code> on the command line or renaming the file with the <code class=3D=
"docutils literal notranslate"><span class=3D"pre">.cuf</span></code> or <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">.CUF</span><=
/code> extension, then for a source line that begins with the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">!@cuf</span></code> s=
entinel the rest of the line appears as a statement, otherwise the entire l=
ine is a comment.</p>
<p>If CUDA Fortran is enabled in compilation, either by specifying <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">-=E2=81=A0cuda</sp=
an></code> on the command line, and pre-processing is enabled by either the=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">-=E2=81=
=A0Mpreprocess</span></code> compiler option or by using capital letters in=
 the filename extension (.CUF, .F90, etc.) then the <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">_CUDA</span></code> macro is defi=
ned.</p>
<p>If CUDA Fortran is enabled in compilation, then the CUF kernel directive=
 (denoted by <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">!$cuf</span> <span class=3D"pre">kernel</span></code>) will generate dev=
ice code for that loop. Otherwise, the code will run on the CPU.</p>
<p>Variable renaming can be accomplished through a combination of the above=
 techniques, and the <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">use</span> <span class=3D"pre">...,</span> <span class=3D"pre">o=
nly:</span></code> Fortran statements to rename module variables. For insta=
nce, you could rename device arrays contained in a module with use device_d=
eclaration_mod, only : a =3D&gt; a_dev, b =3D&gt; b_dev in combination with=
 either the CUF sentinel or the <code class=3D"docutils literal notranslate=
"><span class=3D"pre">_CUDA</span></code> macro. Fortran associate blocks c=
an used similarly and offer more fine-grained control of variable renaming.=
</p>
<p>This example shows a number of these techniques, and can be compiled and=
 run with or without CUDA Fortran enabled.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell29"><span></span><span class=3D"k">program </span><span class=
=3D"n">p</span><span class=3D"w"></span>
<span class=3D"c">!@cuf use cudafor</span>
<span class=3D"kt">real </span><span class=3D"n">a</span><span class=3D"p">=
(</span><span class=3D"mi">1000</span><span class=3D"p">)</span><span class=
=3D"w"></span>
<span class=3D"c">!@cuf attributes(managed) :: a</span>
<span class=3D"kt">real </span><span class=3D"n">b</span><span class=3D"p">=
(</span><span class=3D"mi">1000</span><span class=3D"p">)</span><span class=
=3D"w"></span>
<span class=3D"c">!@cuf real, device :: b_dev(1000)</span>
<span class=3D"n">b</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"mf">2.0</span><span class=3D"=
w"></span>
<span class=3D"c">!@cuf b_dev =3D b</span>
<span class=3D"c">!@cuf associate(b=3D&gt;b_dev)</span>
<span class=3D"c">!$cuf kernel do(1) &lt;&lt;&lt;*,*&gt;&gt;&gt;</span>
<span class=3D"k">do </span><span class=3D"n">i</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"m=
i">1</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"mi">1000</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">a</span><span class=3D"p">(<=
/span><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"kt">real</span><span class=3D"p">(</span><span class=3D"n">i</span><spa=
n class=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">*</span><=
span class=3D"w"> </span><span class=3D"n">b</span><span class=3D"p">(</spa=
n><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"w"></s=
pan>
<span class=3D"k">end do</span><span class=3D"w"></span>
<span class=3D"c">!@cuf end associate</span>
<span class=3D"cp">#ifdef _CUDA</span>
<span class=3D"k">print</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"p">,</span><span class=3D"s2">"GPU sum passed? "</spa=
n><span class=3D"p">,</span><span class=3D"nb">sum</span><span class=3D"p">=
(</span><span class=3D"n">a</span><span class=3D"p">).</span><span class=3D=
"n">eq</span><span class=3D"p">.</span><span class=3D"mi">1000</span><span =
class=3D"o">*</span><span class=3D"mi">1001</span><span class=3D"w"></span>
<span class=3D"cp">#else</span>
<span class=3D"k">print</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"p">,</span><span class=3D"s2">"CPU sum passed? "</spa=
n><span class=3D"p">,</span><span class=3D"nb">sum</span><span class=3D"p">=
(</span><span class=3D"n">a</span><span class=3D"p">).</span><span class=3D=
"n">eq</span><span class=3D"p">.</span><span class=3D"mi">1000</span><span =
class=3D"o">*</span><span class=3D"mi">1001</span><span class=3D"w"></span>
<span class=3D"cp">#endif</span>
<span class=3D"k">end program</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell29">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"building-a-cuda-fortran-program">
<h2><span class=3D"section-number">2.14. </span>Building a CUDA Fortran Pro=
gram<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive=
/25.3/compilers/cuda-fortran-prog-guide/index.html#building-a-cuda-fortran-=
program" title=3D"Permalink to this headline">=EF=83=81</a></h2>
<p>CUDA Fortran is supported by the NVIDIA Fortran compiler when the filena=
me uses a CUDA Fortran extension. The <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">.cuf</span></code> extension specifies that the=
 file is a free-format CUDA Fortran program; the <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">.CUF</span></code> extension may als=
o be used, in which case the program is processed by the preprocessor befor=
e being compiled. To compile a fixed-format program, add the command line o=
ption <code class=3D"docutils literal notranslate"><span class=3D"pre">-=E2=
=81=A0Mfixed</span></code>. CUDA Fortran extensions can be enabled in any F=
ortran source file by adding the <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">-=E2=81=A0cuda</span></code> command line option. It=
 is important to remember that if you compile a file with the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">-=E2=81=A0cuda</span>=
</code> command line option, you must also link the file with the <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">-=E2=81=A0cuda</spa=
n></code> command line option. If you compile with <code class=3D"docutils =
literal notranslate"><span class=3D"pre">-=E2=81=A0cuda</span></code>, but =
do not link with <code class=3D"docutils literal notranslate"><span class=
=3D"pre">-=E2=81=A0cuda</span></code>, you will receive an undefined refere=
nce to the symbol cuda_compiled.</p>
<p>To change the version of the CUDA Toolkit used from the default, specify=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">-=E2=81=
=A0cuda</span> <span class=3D"pre">-=E2=81=A0gpu=3DcudaX.Y</span></code>; C=
UDA Toolkit version <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">X.Y</span></code> must be installed.</p>
<p>Relocatable device code is generated by default. You can override this o=
ption by specifying <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">-=E2=81=A0cuda</span> <span class=3D"pre">-=E2=81=A0gpu=3Dnordc</=
span></code>.</p>
<p>If you are using many instances of the CUDA kernel loop directives, that=
 is, CUF kernels, you may want to add the <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">-=E2=81=A0Minfo</span></code> switch to ver=
ify that CUDA kernels are being generated where you expect and whether you =
have followed the restrictions outlined in the preceding sections.</p>
</section>
<section id=3D"managed-and-unified-memory-options-and-interoperability">
<h2><span class=3D"section-number">2.15. </span>Managed and Unified Memory =
Options and Interoperability<a class=3D"headerlink" href=3D"https://docs.nv=
idia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#=
managed-and-unified-memory-options-and-interoperability" title=3D"Permalink=
 to this headline">=EF=83=81</a></h2>
<p>CUDA Fortran is one of several GPU programming models available for Fort=
ran developers. Other models make use of compiler options which CUDA Fortra=
n developers may find useful. A general discussion of the memory models whi=
ch are now supported can be found in the NVIDIA HPC Compiler User=E2=80=99s=
 Guide, available online at <a class=3D"reference external" href=3D"https:/=
/docs.nvidia.com/hpc-sdk/">docs.nvidia.com/hpc-sdk</a>.</p>
<p>One nvfortran compiler option that has been supported for many years is =
<code class=3D"docutils literal notranslate"><span class=3D"pre">-=E2=81=A0=
gpu=3Dmem:managed</span></code>. This has been especially useful in the std=
par programming models. For CUDA Fortran, what this option does is to use c=
udaMallocManaged() for all Fortran allocatable data, in essence treating al=
locatable arrays as though they have the managed attribute (See 2.6.2). Thi=
s allows these arrays to be used in global subroutines, in CUF kernels, and=
 to be passed into library functions which normally take device arrays.</p>
<p>A drawback of this is that the Fortran compiler can lose the information=
, as arrays are passed through levels of subroutines, that the array was or=
iginally allocatable. Therefore the managed attribute behavior can get lost=
; it works one way in the top-level functions but not in the leaf functions=
 where you really want it. There are a few ways to work around this, but th=
ey are usually unwanted changes to the code. Unlike OpenACC or stdpar, CUDA=
 Fortran has no implicit data movement. It is all explicit, under the contr=
ol of the developer, through data attributes, assignment statements, and AP=
I calls like cudaMemcpy.</p>
<p>Starting with the 23.11 release, on systems which support HMM/ATS and un=
ified memory, the NVHPC compilers now support an option named <code class=
=3D"docutils literal notranslate"><span class=3D"pre">-=E2=81=A0gpu=3Dmem:u=
nified</span></code>. This is similar to the managed option, but this appli=
es to not just allocatable data, but all host data: allocatable, local stac=
k data, and global static data. All program data can be accessed on the GPU=
. In some respect, all this option does for CUDA Fortran is removes compile=
r errors and warnings that host data is being used where device data is exp=
ected. All the low-level movement of data back-and-forth between CPU and GP=
U accesses is handled by the operating system and CUDA driver, and a separa=
te host and device copy of the data is not required.</p>
<p>Of course, CUDA programs which have been tuned for two discrete memories=
, and that make use of asynchronous operations, multiple streams, and concu=
rrent operation of CPUs and GPUs, may experience race conditions when using=
 these options and there is now one copy of the data, not two. To help debu=
g these issues, the <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">NVCOMPILER_ACC_SYNCHRONOUS</span></code> environment variable now=
 accepts a bit field. Setting the value of this environment variable to 2 w=
ill insert a synchronization point at the end of each CUF kernel, and setti=
ng it to 4 will insert a synchronization point at the end of each global ke=
rnel launch.</p>
<p>Here is an example of a simple CUDA Fortran program that can now act on =
unified memory when compiled with the <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">-=E2=81=A0gpu=3Dmem:unified</span></code> optio=
n:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell30"><span></span><span class=3D"k">module </span><span class=
=3D"n">m1</span><span class=3D"w"></span>
<span class=3D"kt">integer</span><span class=3D"p">,</span><span class=3D"w=
"> </span><span class=3D"k">parameter</span><span class=3D"w"> </span><span=
 class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">N</span>=
<span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </=
span><span class=3D"mi">5</span><span class=3D"w"></span>
<span class=3D"kt">integer</span><span class=3D"w"> </span><span class=3D"k=
d">::</span><span class=3D"w"> </span><span class=3D"n">m</span><span class=
=3D"p">(</span><span class=3D"n">N</span><span class=3D"p">)</span><span cl=
ass=3D"w"></span>

<span class=3D"k">contains</span>
<span class=3D"k">  </span><span class=3D"n">attributes</span><span class=
=3D"p">(</span><span class=3D"n">global</span><span class=3D"p">)</span><sp=
an class=3D"w"> </span><span class=3D"k">subroutine </span><span class=3D"n=
">g1</span><span class=3D"p">(</span><span class=3D"w"> </span><span class=
=3D"n">a</span><span class=3D"w"> </span><span class=3D"p">)</span><span cl=
ass=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">a</span><span class=3D"p">(</span><span class=3D"o">*</span><sp=
an class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">i</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
n">threadIdx</span><span class=3D"p">%</span><span class=3D"n">x</span><spa=
n class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">if</span><span class=3D"w"> =
</span><span class=3D"p">(</span><span class=3D"n">i</span><span class=3D"w=
"> </span><span class=3D"p">.</span><span class=3D"n">le</span><span class=
=3D"p">.</span><span class=3D"w"> </span><span class=3D"n">N</span><span cl=
ass=3D"p">)</span><span class=3D"w"> </span><span class=3D"n">a</span><span=
 class=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">)</span><s=
pan class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </sp=
an><span class=3D"n">m</span><span class=3D"p">(</span><span class=3D"n">i<=
/span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">return</span>
<span class=3D"k">  end subroutine </span><span class=3D"n">g1</span><span =
class=3D"w"></span>
<span class=3D"k">end module </span><span class=3D"n">m1</span><span class=
=3D"w"></span>

<span class=3D"k">program </span><span class=3D"n">t1</span><span class=3D"=
w"></span>
<span class=3D"w">  </span><span class=3D"k">use </span><span class=3D"n">m=
1</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">use </span><span class=3D"n">c=
udafor</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">integer</span><span class=3D"=
w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span clas=
s=3D"n">istat</span><span class=3D"p">,</span><span class=3D"w"> </span><sp=
an class=3D"n">a</span><span class=3D"p">(</span><span class=3D"n">N</span>=
<span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">m</span><span class=3D"w"> </s=
pan><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"p"=
>[</span><span class=3D"w"> </span><span class=3D"p">((</span><span class=
=3D"n">i</span><span class=3D"p">),</span><span class=3D"n">i</span><span c=
lass=3D"o">=3D</span><span class=3D"mi">1</span><span class=3D"p">,</span><=
span class=3D"n">N</span><span class=3D"p">)</span><span class=3D"w"> </spa=
n><span class=3D"p">]</span><span class=3D"w">  </span><span class=3D"c">! =
Init global data</span>
<span class=3D"w">  </span><span class=3D"k">call </span><span class=3D"n">=
g1</span><span class=3D"w"> </span><span class=3D"o">&lt;&lt;&lt;</span><sp=
an class=3D"mi">1</span><span class=3D"p">,</span><span class=3D"n">N</span=
><span class=3D"o">&gt;&gt;&gt;</span><span class=3D"w"> </span><span class=
=3D"p">(</span><span class=3D"n">a</span><span class=3D"p">)</span><span cl=
ass=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">istat</span><span class=3D"w">=
 </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cudaDeviceSynchronize</span><span class=3D"p">()</span><span class=
=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">print</span><span class=3D"w">=
 </span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D"=
n">a</span><span class=3D"p">(</span><span class=3D"mi">1</span><span class=
=3D"p">:</span><span class=3D"n">N</span><span class=3D"p">)</span><span cl=
ass=3D"w"></span>
<span class=3D"k">end program </span><span class=3D"n">t1</span><span class=
=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell30">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Note that we have added a call to <code class=3D"docutils literal notran=
slate"><span class=3D"pre">cudaDeviceSynchronize()</span></code>, as the un=
ified data is read and written on the device, printed from the host, and gl=
obal kernel launches are still asynchronous with respect to the host.</p>
<p>In addition, starting with the 24.3 release, and also on systems which s=
upport HMM/ATS and unified memory, the NVHPC CUDA Fortran compiler supports=
 the <code class=3D"docutils literal notranslate"><span class=3D"pre">unifi=
ed</span></code> attribute. In general, data with the <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">unified</span></code> attribute=
 behaves similarly to managed data, however it is allocated using system me=
mory, not with cudaMallocManaged(). The attribute allows a programmer to en=
able unified memory on a variable-by-variable basis, and it does not requir=
e compiling with <code class=3D"docutils literal notranslate"><span class=
=3D"pre">-=E2=81=A0gpu=3Dmem:unified</span></code>.</p>
<p>When using the Managed Memory Model, the Unified Memory Model, or the ma=
naged or unified attributes on variables, refer to <a class=3D"reference in=
ternal" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda=
-fortran-prog-guide/index.html#mm-cudamemadvise"><span class=3D"std std-ref=
">cudaMemAdvise</span></a> or <a class=3D"reference internal" href=3D"https=
://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/i=
ndex.html#mm-cudamemprefetchasync"><span class=3D"std std-ref">cudaMemPrefe=
tchAsync</span></a> for memory hints which have been shown to improve appli=
cation performance in many cases.</p>
<span class=3D"target" id=3D"cf-cuda-fort-ref"></span></section>
</section>
<section id=3D"reference">
<h1><span class=3D"section-number">3. </span>Reference<a class=3D"headerlin=
k" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fort=
ran-prog-guide/index.html#reference" title=3D"Permalink to this headline">=
=EF=83=81</a></h1>
<p>This section is the CUDA Fortran Language Reference.</p>
<section id=3D"new-subroutine-and-function-attributes">
<h2><span class=3D"section-number">3.1. </span>New Subroutine and Function =
Attributes<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/a=
rchive/25.3/compilers/cuda-fortran-prog-guide/index.html#new-subroutine-and=
-function-attributes" title=3D"Permalink to this headline">=EF=83=81</a></h=
2>
<p>CUDA Fortran adds new attributes to subroutines and functions. This sect=
ion describes how to specify the new attributes, their meaning and restrict=
ions.</p>
<p>A Subroutine may have the host, global, or device attribute, or may have=
 both host and device attribute. A Function may have the host or device att=
ribute, or both. These attributes are specified using the <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">attributes(attr)</span></co=
de> prefix on the Subroutine or Function statement; if there is no attribut=
es prefix on the subprogram statement, then default rules are used, as desc=
ribed in the following sections.</p>
<section id=3D"host-subroutines-and-functions">
<h3><span class=3D"section-number">3.1.1. </span>Host Subroutines and Funct=
ions<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive=
/25.3/compilers/cuda-fortran-prog-guide/index.html#host-subroutines-and-fun=
ctions" title=3D"Permalink to this headline">=EF=83=81</a></h3>
<p>The host attribute may be explicitly specified on the Subroutine or Func=
tion statement as follows:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell31"><span></span><span class=3D"n">attributes</span><span cla=
ss=3D"p">(</span><span class=3D"n">host</span><span class=3D"p">)</span><sp=
an class=3D"w"> </span><span class=3D"k">subroutine </span><span class=3D"n=
">sub</span><span class=3D"p">(...)</span><span class=3D"w"></span>
<span class=3D"n">attributes</span><span class=3D"p">(</span><span class=3D=
"n">host</span><span class=3D"p">)</span><span class=3D"w"> </span><span cl=
ass=3D"kt">integer </span><span class=3D"k">function </span><span class=3D"=
n">func</span><span class=3D"p">(...)</span><span class=3D"w"></span>
<span class=3D"kt">integer </span><span class=3D"n">attributes</span><span =
class=3D"p">(</span><span class=3D"n">host</span><span class=3D"p">)</span>=
<span class=3D"w"> </span><span class=3D"k">function </span><span class=3D"=
n">func</span><span class=3D"p">(...)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell31">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>The host attributes prefix may be preceded or followed by any other allo=
wable subroutine or function prefix specifiers (recursive, pure, elemental,=
 function return datatype). A subroutine or function with the host attribut=
e is called a host subroutine or function, or a <em>host subprogram</em>. A=
 host subprogram is compiled for execution on the host processor. A subprog=
ram with no attributes prefix has the host attribute by default.</p>
</section>
<section id=3D"global-and-grid-global-subroutines">
<h3><span class=3D"section-number">3.1.2. </span>Global and Grid_Global Sub=
routines<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/arc=
hive/25.3/compilers/cuda-fortran-prog-guide/index.html#global-and-grid-glob=
al-subroutines" title=3D"Permalink to this headline">=EF=83=81</a></h3>
<p>The global and grid_global attribute may be explicitly specified on the =
Subroutine statement as follows:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell32"><span></span><span class=3D"n">attributes</span><span cla=
ss=3D"p">(</span><span class=3D"n">global</span><span class=3D"p">)</span><=
span class=3D"w"> </span><span class=3D"k">subroutine </span><span class=3D=
"n">sub</span><span class=3D"p">(...)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell32">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell33"><span></span><span class=3D"n">attributes</span><span cla=
ss=3D"p">(</span><span class=3D"n">grid_global</span><span class=3D"p">)</s=
pan><span class=3D"w"> </span><span class=3D"k">subroutine </span><span cla=
ss=3D"n">subg</span><span class=3D"p">(...)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell33">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Functions may not have a global attribute. A subroutine with either glob=
al attribute is called a <em>kernel subroutine</em>. A kernel subroutine ma=
y not be recursive, pure, or elemental, so no other subroutine prefixes are=
 allowed. A kernel subroutine is compiled as a kernel for execution on the =
device, to be called from a host routine using an execution configuration. =
A kernel subroutine may not be contained in another subroutine or function,=
 and may not contain any other subprogram. A grid_global subroutine is supp=
orted on cc70 hardware or greater, and specifies that the kernel should be =
launched in such a way that all threads in the grid can synchronize.</p>
<p>Launch bounds can optionally be specified as part of the global subrouti=
ne definition to provide optimization hints to the compiler. This will main=
ly aid register usage, spilling, and occupancy heuristics used in the low-l=
evel code generation. See the CUDA C Programming Guide for more information=
. The form used in CUDA Fortran is:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell34"><span></span><span class=3D"n">attributes</span><span cla=
ss=3D"p">(</span><span class=3D"n">global</span><span class=3D"p">)</span><=
span class=3D"w"> </span><span class=3D"n">launch_bounds</span><span class=
=3D"p">(</span><span class=3D"n">maxTPB</span><span class=3D"p">,</span><sp=
an class=3D"w"> </span><span class=3D"n">minBPM</span><span class=3D"p">)</=
span><span class=3D"w"> </span><span class=3D"k">subroutine </span><span cl=
ass=3D"n">sub</span><span class=3D"p">(...)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell34">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>where maxTPB is the maxThreadsPerBlock, the maximum number of threads pe=
r block with which the application will ever launch, and minBPM is the desi=
red minimum number of resident blocks per multiprocessor. Both values must =
be numeric constants.</p>
<p>Beginning with the 23.3 release, support for thread block clusters is en=
abled for Hopper (cc90) and later targets. To specify the dimensions of the=
 cluster, use the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">cluster_dims</span></code> syntax and specify each x, y, and z dim=
ension. Values must be numeric constants. See the CUDA C Programming Guide =
for more information. For instance, this example in CUDA Fortran:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell35"><span></span><span class=3D"n">attributes</span><span cla=
ss=3D"p">(</span><span class=3D"n">global</span><span class=3D"p">)</span><=
span class=3D"w"> </span><span class=3D"n">cluster_dims</span><span class=
=3D"p">(</span><span class=3D"mi">2</span><span class=3D"p">,</span><span c=
lass=3D"mi">2</span><span class=3D"p">,</span><span class=3D"mi">1</span><s=
pan class=3D"p">)</span><span class=3D"w"> </span><span class=3D"k">subrout=
ine </span><span class=3D"n">sub</span><span class=3D"p">(...)</span><span =
class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell35">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>will set up a 2x2 (x and y) set of thread blocks in a cluster. The launc=
h to these kernels using the chevron syntax will be adjusted appropriately =
at the call site.</p>
<p>Also, as part of the Hopper support, the <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">launch_bounds</span></code> syntax has be=
en extended to accept a third argument, an upper bound on the cluster size.=
</p>
</section>
<section id=3D"device-subroutines-and-functions">
<h3><span class=3D"section-number">3.1.3. </span>Device Subroutines and Fun=
ctions<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archi=
ve/25.3/compilers/cuda-fortran-prog-guide/index.html#device-subroutines-and=
-functions" title=3D"Permalink to this headline">=EF=83=81</a></h3>
<p>The device attribute may be explicitly specified on the Subroutine or Fu=
nction statement as follows:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell36"><span></span><span class=3D"n">attributes</span><span cla=
ss=3D"p">(</span><span class=3D"n">device</span><span class=3D"p">)</span><=
span class=3D"w"> </span><span class=3D"k">subroutine </span><span class=3D=
"n">sub</span><span class=3D"p">(...)</span><span class=3D"w"></span>
<span class=3D"n">attributes</span><span class=3D"p">(</span><span class=3D=
"n">device</span><span class=3D"p">)</span><span class=3D"w"> </span><span =
class=3D"n">datatype</span><span class=3D"w"> </span><span class=3D"k">func=
tion </span><span class=3D"n">func</span><span class=3D"p">(...)</span><spa=
n class=3D"w"></span>
<span class=3D"n">datatype</span><span class=3D"w"> </span><span class=3D"n=
">attributes</span><span class=3D"p">(</span><span class=3D"n">device</span=
><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"k">func=
tion </span><span class=3D"n">func</span><span class=3D"p">(...)</span><spa=
n class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell36">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>A subroutine or function with the device attribute is called a <em>devic=
e subprogram</em>. A device subprogram is compiled for execution on the dev=
ice, and can be called from a kernel subroutine or other device subprograms=
. A device subprogram may also be recursive, pure, or elemental. A subrouti=
ne or function with the device attribute can be in a different file or scop=
e than the callers, but you must use relocatable device code linking, and p=
rovide an explicit interface. Otherwise, the device routines should be in t=
he same module as the caller.</p>
</section>
<section id=3D"restrictions-on-kernel-subroutines-and-device-subprograms">
<h3><span class=3D"section-number">3.1.4. </span>Restrictions on Kernel Sub=
routines and Device Subprograms<a class=3D"headerlink" href=3D"https://docs=
.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.ht=
ml#restrictions-on-kernel-subroutines-and-device-subprograms" title=3D"Perm=
alink to this headline">=EF=83=81</a></h3>
<p>A subroutine or function with the device or global attribute must satisf=
y the following restrictions:</p>
<ul class=3D"simple">
<li><p>It may not contain another subprogram.</p></li>
<li><p>It may not be contained in another subroutine or function.</p></li>
<li><p>A kernel subroutine may not be recursive, nor have the recursive pre=
fix on the subroutine statement.</p></li>
<li><p>A kernel subroutine may not be pure or elemental, nor have the pure =
or elemental prefix on the subroutine statement.</p></li>
</ul>
<p>For more information, refer to <a class=3D"reference internal" href=3D"h=
ttps://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-gui=
de/index.html#cfref-dev-code"><span class=3D"std std-ref">Device Code</span=
></a>.</p>
</section>
</section>
<section id=3D"variable-attributes">
<h2><span class=3D"section-number">3.2. </span>Variable Attributes<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#variable-attributes" title=3D"Permal=
ink to this headline">=EF=83=81</a></h2>
<p>CUDA Fortran adds new attributes for variables and arrays. This section =
describes how to specify the new attributes and their meaning and restricti=
ons.</p>
<p>Variables declared in a host subprogram may have one of three new attrib=
utes: they may be declared to be in device global memory, in managed memory=
, or in pinned memory.</p>
<p>Variables in modules may be declared to be in device global memory, in t=
he managed memory space, or in constant memory space.</p>
<p>Variables declared in a device program units may have one of three new a=
ttributes: they may be declared to be in device global memory, in constant =
memory space, in the thread block shared memory, or without any additional =
attribute they will be allocated in thread local memory. For performance an=
d useability reasons, the value attribute can also be used on scalar dummy =
arguments so they are passed by value, rather than the Fortran default to p=
ass arguments by reference.</p>
<section id=3D"device-data">
<h3><span class=3D"section-number">3.2.1. </span>Device data<a class=3D"hea=
derlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cud=
a-fortran-prog-guide/index.html#device-data" title=3D"Permalink to this hea=
dline">=EF=83=81</a></h3>
<p>A variable or array with the device attribute is defined to reside in th=
e device global memory. The device attribute can be specified with the <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">attributes</sp=
an></code> statement, or as an attribute on the type declaration statement.=
 The following example declares two arrays, <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">a</span></code> and <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">b</span></code>, to be device a=
rrays of size 100.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell37"><span></span><span class=3D"kt">real</span><span class=3D=
"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span cla=
ss=3D"n">a</span><span class=3D"p">(</span><span class=3D"mi">100</span><sp=
an class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">attributes</span><span class=3D"p">(</span><span class=3D=
"n">device</span><span class=3D"p">)</span><span class=3D"w"> </span><span =
class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">a</span><=
span class=3D"w"></span>
<span class=3D"kt">real</span><span class=3D"p">,</span><span class=3D"w"> =
</span><span class=3D"n">device</span><span class=3D"w"> </span><span class=
=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">b</span><span =
class=3D"p">(</span><span class=3D"mi">100</span><span class=3D"p">)</span>=
<span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell37">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>These rules apply to device data:</p>
<ul class=3D"simple">
<li><p>An allocatable device array dynamically allocates device global memo=
ry.</p></li>
<li><p>Device variables and arrays may appear in modules, but may not be in=
 a Common block or an Equivalence statement.</p></li>
<li><p>Members of a derived type may not have the device attribute unless t=
hey are allocatable.</p></li>
<li><p>Device variables and arrays may be passed as actual arguments to hos=
t and device subprograms; in that case, the subprogram interface must be ex=
plicit (in the Fortran sense), and the matching dummy argument must also ha=
ve the device attribute.</p></li>
<li><p>Device variables and arrays declared in a host subprogram cannot hav=
e the <code class=3D"docutils literal notranslate"><span class=3D"pre">Save=
</span></code> attribute unless they are allocatable.</p></li>
</ul>
<p>In host subprograms, device data may only be used in the following manne=
r:</p>
<ul class=3D"simple">
<li><p>In declaration statements</p></li>
<li><p>In Allocate and Deallocate statements</p></li>
<li><p>As an argument to the Allocated intrinsic function</p></li>
<li><p>As the source or destination in a data transfer assignment statement=
</p></li>
<li><p>As an actual argument to a kernel subroutine</p></li>
<li><p>As an actual argument to another host subprogram or runtime API call=
</p></li>
<li><p>As a dummy argument in a host subprogram</p></li>
</ul>
<p>A device array may have the allocatable attribute, or may have adjustabl=
e extent.</p>
</section>
<section id=3D"managed-data">
<h3><span class=3D"section-number">3.2.2. </span>Managed data<a class=3D"he=
aderlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cu=
da-fortran-prog-guide/index.html#managed-data" title=3D"Permalink to this h=
eadline">=EF=83=81</a></h3>
<p>A variable or array with the managed attribute is managed by the unified=
 memory system and migrates between host main memory and device global memo=
ry. The managed attribute can be specified with the <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">attributes</span></code> statemen=
t, or as an attribute on the type declaration statement. Managed local arra=
ys can have an explicit shape, be automatic, or allocatable. Managed dummy =
arrays may be assumed-size or assumed-shape. The following example declares=
 two arrays, <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">a</span></code> and <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">b</span></code>, to be managed arrays of size 100, and allocat=
es a third array, <code class=3D"docutils literal notranslate"><span class=
=3D"pre">c</span></code> with size 200.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell38"><span></span><span class=3D"kt">real</span><span class=3D=
"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span cla=
ss=3D"n">a</span><span class=3D"p">(</span><span class=3D"mi">100</span><sp=
an class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">attributes</span><span class=3D"p">(</span><span class=3D=
"n">managed</span><span class=3D"p">)</span><span class=3D"w"> </span><span=
 class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">a</span>=
<span class=3D"w"></span>
<span class=3D"kt">real</span><span class=3D"p">,</span><span class=3D"w"> =
</span><span class=3D"n">managed</span><span class=3D"w"> </span><span clas=
s=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">b</span><span=
 class=3D"p">(</span><span class=3D"mi">100</span><span class=3D"p">)</span=
><span class=3D"w"></span>
<span class=3D"kt">real</span><span class=3D"p">,</span><span class=3D"w"> =
</span><span class=3D"k">allocatable</span><span class=3D"p">,</span><span =
class=3D"w"> </span><span class=3D"n">managed</span><span class=3D"w"> </sp=
an><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">=
c</span><span class=3D"p">(:)</span><span class=3D"w"></span>
<span class=3D"p">.</span><span class=3D"w"> </span><span class=3D"p">.</sp=
an><span class=3D"w"> </span><span class=3D"p">.</span><span class=3D"w"></=
span>
<span class=3D"k">allocate</span><span class=3D"p">(</span><span class=3D"n=
">c</span><span class=3D"p">(</span><span class=3D"mi">200</span><span clas=
s=3D"p">))</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell38">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>These rules apply to managed data on the host:</p>
<ul class=3D"simple">
<li><p>Managed variables and arrays may appear in host subprograms and modu=
les, but may not be in a Common block or an Equivalence statement.</p></li>
<li><p>Managed variables and arrays declared in a host subprogram cannot ha=
ve the <code class=3D"docutils literal notranslate"><span class=3D"pre">Sav=
e</span></code> attribute unless they are allocatable.</p></li>
<li><p>Derived types may have the managed attribute.</p></li>
<li><p>Members of a derived type may have the managed attribute.</p></li>
<li><p>Managed derived types may also contain allocatable device arrays.</p=
></li>
<li><p>Managed variables and arrays may be passed as actual arguments to ot=
her host subprograms; if the subprogram interface is overloaded, the generi=
c matching priority is match another managed dummy argument first, match a =
dummy with the device attribute next, and match a dummy with no (or host) a=
ttribute last.</p></li>
<li><p>Passing a non-managed actual argument to a managed dummy argument wi=
ll result in either a compilation error if the interface is explicit, or un=
expected behavior otherwise.</p></li>
<li><p>Managed variables and arrays may be passed as actual arguments to gl=
obal subroutines just as device variables and arrays are.</p></li>
<li><p>By default, managed data is allocated with global scope, i.e. the fl=
ag passed to cudaMallocManaged is <code class=3D"docutils literal notransla=
te"><span class=3D"pre">cudaMemAttachGlobal</span></code>.</p></li>
<li><p>The scope of a managed variable can be changed with a call to``cudaS=
treamAttachMemAsync``.</p></li>
<li><p>Individual managed variables can be associated with a given stream b=
y calling <code class=3D"docutils literal notranslate"><span class=3D"pre">=
cudaforSetDefaultStream</span></code>.</p></li>
<li><p>All subsequently allocated managed variables can also be associated =
with a given stream by calling <code class=3D"docutils literal notranslate"=
><span class=3D"pre">cudaforSetDefaultStream</span></code>.</p></li>
<li><p>Accessing managed data on the host while a running kernel is accessi=
ng managed data within the same scope on the device will result in either a=
 segmentation fault or a race condition.</p></li>
</ul>
<p>These rules apply to managed data on the device:</p>
<ul class=3D"simple">
<li><p>The managed attribute may be used on dummy arguments.</p></li>
<li><p>Managed data is treated as if it were device data.</p></li>
<li><p>There is no support for allocating or deallocating managed data on t=
he device.</p></li>
</ul>
<div class=3D"admonition note">
<p class=3D"admonition-title">Note</p>
<p>Even if your application only uses a single GPU, if you are running on s=
ystems which have multiple GPUs that are not peer-to-peer enabled, managed =
memory will be allocated as zero-copy memory and performance will suffer ac=
cordingly. A workaround is to set the environment variable <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">CUDA_VISIBLE_DEVICES</span=
></code> so only one GPU is seen, or to force allocation on the GPU by sett=
ing <code class=3D"docutils literal notranslate"><span class=3D"pre">CUDA_M=
ANAGED_FORCE_DEVICE_ALLOC</span></code>. The CUDA C Programming Guide has m=
ore details on this in the <a class=3D"reference external" href=3D"https://=
docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#unified-memory-pro=
gramming">Unified Memory Programing</a> section.</p>
</div>
</section>
<section id=3D"unified-data">
<h3><span class=3D"section-number">3.2.3. </span>Unified data<a class=3D"he=
aderlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cu=
da-fortran-prog-guide/index.html#unified-data" title=3D"Permalink to this h=
eadline">=EF=83=81</a></h3>
<p>A variable or array with the unified attribute can be accessed from both=
 host and device code. Whether the data migrates or is read and written acr=
oss the memory bus is under the control of the CUDA driver and settings. Th=
e unified attribute can be specified with the <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">attributes</span></code> statement, or =
as an attribute on the type declaration statement. Unified arrays must be l=
ocal, fixed-size, automatic or allocatable. The unified attribute is not al=
lowed on global module arrays. A local F90 pointer can have the unified att=
ribute, then point to a global array with the target attribute. This pointe=
r can be passed as a kernel argument into a device code kernel, similar to =
unified memory support in CUDA C++.</p>
<p>These rules apply to unified data on the host:</p>
<ul class=3D"simple">
<li><p>Unified variables and arrays may appear in host subprograms only, no=
t in modules.</p></li>
<li><p>Derived types may have the unified attribute.</p></li>
<li><p>Members of a derived type may have the unified attribute.</p></li>
<li><p>Unified derived types may also contain allocatable device arrays, wh=
ich can be useful for deep data structures.</p></li>
<li><p>Accessing unified data on the host while a running kernel is accessi=
ng it on the device may result in race conditions.</p></li>
</ul>
<p>These rules apply to unified data on the device:</p>
<ul class=3D"simple">
<li><p>Unified data is treated as if it were device data.</p></li>
<li><p>There is no support for allocating or deallocating unified data on t=
he device.</p></li>
</ul>
<p>This table may help explain how matching of actual arguments to dummy ar=
guments, when there are generic, overloaded interfaces exposed, are compute=
d. For each argument pair, a distance is returned. The minimum distance, le=
ss than infinity, wins.</p>
<div class=3D"wy-table-responsive"><table class=3D"table-no-stripes docutil=
s align-default" id=3D"id5">
<caption><span class=3D"caption-text">Table 2. Attributed Argument Matching=
 Distance Values</span><a class=3D"headerlink" href=3D"https://docs.nvidia.=
com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#id5" =
title=3D"Permalink to this table">=EF=83=81</a></caption>
<colgroup>
<col style=3D"width: 9%">
<col style=3D"width: 11%">
<col style=3D"width: 8%">
<col style=3D"width: 9%">
<col style=3D"width: 9%">
<col style=3D"width: 16%">
<col style=3D"width: 18%">
<col style=3D"width: 18%">
</colgroup>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>Dummy Argument</p></th>
<th class=3D"head"><p>Actual None (host)</p></th>
<th class=3D"head"><p>Actual Device</p></th>
<th class=3D"head"><p>Actual Managed</p></th>
<th class=3D"head"><p>Actual Unified</p></th>
<th class=3D"head"><p>Actual OpenACC use_ device</p></th>
<th class=3D"head"><p>Actual None (gpu=3D mem: unified)</p></th>
<th class=3D"head"><p>Actual None (gpu=3D mem: managed)</p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">None(host)</span></code></p></td>
<td><p>0</p></td>
<td><p>INF</p></td>
<td><p>3</p></td>
<td><p>3</p></td>
<td><p>1</p></td>
<td><p>3</p></td>
<td><p>3</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">Device</span></code></p></td>
<td><p>INF</p></td>
<td><p>0</p></td>
<td><p>2</p></td>
<td><p>2</p></td>
<td><p>0</p></td>
<td><p>2</p></td>
<td><p>2</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">Managed</span></code></p></td>
<td><p>INF</p></td>
<td><p>INF</p></td>
<td><p>0</p></td>
<td><p>1</p></td>
<td><p>INF</p></td>
<td><p>1</p></td>
<td><p>0</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">Unified</span></code></p></td>
<td><p>INF</p></td>
<td><p>INF</p></td>
<td><p>1</p></td>
<td><p>0</p></td>
<td><p>INF</p></td>
<td><p>0</p></td>
<td><p>1</p></td>
</tr>
</tbody>
</table></div>
<p>It should be noted that the Fortran host modules provided in CUDA Fortra=
n, such as those provided for CUDA libraries discussed later in this chapte=
r, contain interfaces in which the dummy arguments are either host or devic=
e. Therefore, the implementation which operates on device data is still pre=
ferred for actual arguments of either device, managed, or unified.</p>
<p>Also remember that the matching is based on how and where the data can b=
e used. Care must be taken when allocating and deallocating the data, and g=
enerally the attributes must exactly match during those two operations. The=
 pinned attribute discussed in the next section has the same requirement.</=
p>
</section>
<section id=3D"pinned-arrays">
<h3><span class=3D"section-number">3.2.4. </span>Pinned arrays<a class=3D"h=
eaderlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/c=
uda-fortran-prog-guide/index.html#pinned-arrays" title=3D"Permalink to this=
 headline">=EF=83=81</a></h3>
<p>An allocatable array with the pinned attribute will be allocated in spec=
ial page-locked host memory, when such memory is available. The advantage o=
f using pinned memory is that transfers between the device and pinned memor=
y are faster and can be asynchronous. An array with the pinned attribute ma=
y be declared in a module or in a host subprogram. The pinned attribute can=
 be specified with the <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">attributes</span></code> statement, or as an attribute on the =
type declaration statement. The following example declares two arrays, <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">p</span></code=
> and <code class=3D"docutils literal notranslate"><span class=3D"pre">q</s=
pan></code>, to be pinned allocatable arrays.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell39"><span></span><span class=3D"kt">real</span><span class=3D=
"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span cla=
ss=3D"n">p</span><span class=3D"p">(:)</span><span class=3D"w"></span>
<span class=3D"k">allocatable</span><span class=3D"w"> </span><span class=
=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">p</span><span =
class=3D"w"></span>
<span class=3D"n">attributes</span><span class=3D"p">(</span><span class=3D=
"n">pinned</span><span class=3D"p">)</span><span class=3D"w"> </span><span =
class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">p</span><=
span class=3D"w"></span>
<span class=3D"kt">real</span><span class=3D"p">,</span><span class=3D"w"> =
</span><span class=3D"k">allocatable</span><span class=3D"p">,</span><span =
class=3D"w"> </span><span class=3D"n">pinned</span><span class=3D"w"> </spa=
n><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">q=
</span><span class=3D"p">(:)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell39">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Pinned arrays may be passed as arguments to host subprograms regardless =
of whether the interface is explicit, or whether the dummy argument has the=
 pinned and allocatable attributes. Where the array is deallocated, the dec=
laration for the array must still have the pinned attribute, or the dealloc=
ation may fail.</p>
</section>
<section id=3D"constant-data">
<h3><span class=3D"section-number">3.2.5. </span>Constant data<a class=3D"h=
eaderlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/c=
uda-fortran-prog-guide/index.html#constant-data" title=3D"Permalink to this=
 headline">=EF=83=81</a></h3>
<p>A variable or array with the <code class=3D"docutils literal notranslate=
"><span class=3D"pre">constant</span></code> attribute is defined to reside=
 in the device constant memory space. The constant attribute can be specifi=
ed with the <code class=3D"docutils literal notranslate"><span class=3D"pre=
">attributes</span></code> statement, or as an attribute on the type declar=
ation statement. The following example declares two arrays, <code class=3D"=
docutils literal notranslate"><span class=3D"pre">c</span></code> and <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">d</span></code>=
, to be constant arrays of size 100.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell40"><span></span><span class=3D"kt">real</span><span class=3D=
"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span cla=
ss=3D"n">c</span><span class=3D"p">(</span><span class=3D"mi">100</span><sp=
an class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">attributes</span><span class=3D"p">(</span><span class=3D=
"n">constant</span><span class=3D"p">)</span><span class=3D"w"> </span><spa=
n class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">c</span=
><span class=3D"w"></span>
<span class=3D"kt">real</span><span class=3D"p">,</span><span class=3D"w"> =
</span><span class=3D"n">constant</span><span class=3D"w"> </span><span cla=
ss=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">d</span><spa=
n class=3D"p">(</span><span class=3D"mi">100</span><span class=3D"p">)</spa=
n><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell40">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>These rules apply to constant data:</p>
<ul class=3D"simple">
<li><p>Constant variables and arrays can appear in modules, but may not be =
in a Common block or an <code class=3D"docutils literal notranslate"><span =
class=3D"pre">Equivalence</span></code> statement. Constant variables appea=
ring in modules may be accessed via the <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">use</span></code> statement in both host and =
device subprograms.</p></li>
<li><p>Constant data may not have the Pointer, Target, or Allocatable attri=
butes.</p></li>
<li><p>Members of a derived type may not have the constant attribute.</p></=
li>
<li><p>Arrays with the <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">constant</span></code> attribute must have fixed size.</p></li=
>
<li><p>Constant variables and arrays may be passed as actual arguments to h=
ost and device subprograms, as long as the subprogram interface is explicit=
, and the matching dummy argument also has the <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">constant</span></code> attribute. Cons=
tant variables cannot be passed as actual arguments between a host subprogr=
am and a device global subprogram.</p></li>
<li><p>Within device subprograms, variables and arrays with the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">constant</span></code=
> attribute may not be assigned or modified.</p></li>
<li><p>Within host subprograms, variables and arrays with the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">constant</span></code=
> attribute may be read and written.</p></li>
</ul>
<p>In host subprograms, data with the <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">constant</span></code> attribute may only be us=
ed in the following manner:</p>
<ul class=3D"simple">
<li><p>As a named entity within a USE statement.</p></li>
<li><p>As the source or destination in a data transfer assignment statement=
</p></li>
<li><p>As an actual argument to another host subprogram</p></li>
<li><p>As a dummy argument in a host subprogram</p></li>
</ul>
<span class=3D"target" id=3D"cfref-var-attr-shared-data"></span></section>
<section id=3D"shared-data">
<h3><span class=3D"section-number">3.2.6. </span>Shared data<a class=3D"hea=
derlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cud=
a-fortran-prog-guide/index.html#shared-data" title=3D"Permalink to this hea=
dline">=EF=83=81</a></h3>
<p>A variable or array with the shared attribute is defined to reside in th=
e shared memory space of a thread block. A shared variable or array may onl=
y be declared and used inside a device subprogram. The shared attribute can=
 be specified with the <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">attributes</span></code> statement, or as an attribute on the =
type declaration statement. The following example declares two arrays, <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">s</span></code=
> and <code class=3D"docutils literal notranslate"><span class=3D"pre">t</s=
pan></code>, to be shared arrays of size 100.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell41"><span></span><span class=3D"kt">real</span><span class=3D=
"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span cla=
ss=3D"n">c</span><span class=3D"p">(</span><span class=3D"mi">100</span><sp=
an class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">attributes</span><span class=3D"p">(</span><span class=3D=
"n">shared</span><span class=3D"p">)</span><span class=3D"w"> </span><span =
class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">c</span><=
span class=3D"w"></span>
<span class=3D"kt">real</span><span class=3D"p">,</span><span class=3D"w"> =
</span><span class=3D"n">shared</span><span class=3D"w"> </span><span class=
=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">d</span><span =
class=3D"p">(</span><span class=3D"mi">100</span><span class=3D"p">)</span>=
<span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell41">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>These rules apply to shared data:</p>
<ul class=3D"simple">
<li><p>Shared data may not have the Pointer, Target, or Allocatable attribu=
tes.</p></li>
<li><p>Shared variables may not be in a Common block or Equivalence stateme=
nt.</p></li>
<li><p>Members of a derived type may not have the shared attribute.</p></li=
>
<li><p>Shared variables and arrays may be passed as actual arguments to fro=
m a device subprogram to another device subprogram, as long as the interfac=
e is explicit and the matching dummy argument has the shared attribute.</p>=
</li>
</ul>
<p>Shared arrays that are not dummy arguments may be declared as assumed-si=
ze arrays; that is, the last dimension of a shared array may have an asteri=
sk as its upper bound:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell42"><span></span><span class=3D"kt">real</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"n">shared</span><span =
class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><=
span class=3D"n">x</span><span class=3D"p">(</span><span class=3D"o">*</spa=
n><span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell42">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Such an array has special significance. Its size is determined at run ti=
me by the call to the kernel. When the kernel is called, the value of the <=
code class=3D"docutils literal notranslate"><span class=3D"pre">bytes</span=
></code> argument in the execution configuration is used to specify the num=
ber of bytes of shared memory that is dynamically allocated for each thread=
 block. This memory is used for the assumed-size shared memory arrays in th=
at thread block; if there is more than one assumed-size shared memory array=
, they are all implicitly equivalenced, starting at the same shared memory =
address. Programmers must take this into account when coding.</p>
<p>Shared arrays may be declared as Fortran automatic arrays. For automatic=
 arrays, the bounds are declared as an expression containing constants, par=
ameters, blockdim variables, and integer arguments passed in by value. The =
allocation of automatic arrays also comes from the dynamic area specified v=
ia the chevron launch configuration. If more than one automatic array is de=
clared, the compiler and runtime manage the offsets into the dynamic area. =
Programmers must provide a sufficient number of bytes in the chevron launch=
 configuration shared memory value to cover all automatic arrays declared i=
n the global subroutine.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell43"><span></span><span class=3D"n">attributes</span><span cla=
ss=3D"p">(</span><span class=3D"n">global</span><span class=3D"p">)</span><=
span class=3D"w"> </span><span class=3D"k">subroutine </span><span class=3D=
"n">sub</span><span class=3D"p">(</span><span class=3D"n">A</span><span cla=
ss=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">n</span><span =
class=3D"p">,</span><span class=3D"w"></span>
<span class=3D"kt">integer</span><span class=3D"p">,</span><span class=3D"w=
"> </span><span class=3D"k">value</span><span class=3D"w"> </span><span cla=
ss=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">n</span><spa=
n class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">nb</span>=
<span class=3D"w"></span>
<span class=3D"kt">real</span><span class=3D"p">,</span><span class=3D"w"> =
</span><span class=3D"n">shared</span><span class=3D"w"> </span><span class=
=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">s</span><span =
class=3D"p">(</span><span class=3D"n">nb</span><span class=3D"o">*</span><s=
pan class=3D"n">blockdim</span><span class=3D"p">%</span><span class=3D"n">=
x</span><span class=3D"p">,</span><span class=3D"n">nb</span><span class=3D=
"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell43">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>If a shared array is not a dummy argument and not assumed-size or automa=
tic, it must be fixed size. In this case, the allocation for the shared arr=
ay does not come from the dynamically allocated shared memory area specifie=
d in the launch configuration, but rather it is declared statically within =
the function. If the global routine uses only fixed size shared arrays, or =
none at all, no shared memory amount needs to be specified at the launch.</=
p>
</section>
<section id=3D"texture-data">
<h3><span class=3D"section-number">3.2.7. </span>Texture data<a class=3D"he=
aderlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cu=
da-fortran-prog-guide/index.html#texture-data" title=3D"Permalink to this h=
eadline">=EF=83=81</a></h3>
<p>Reading values through the texture memory interface is no longer recomme=
nded or necessary on newer GPUs and support for this feature has been dropp=
ed in CUDA 12.0.</p>
<p>Read-only real and integer device data can be accessed in device subprog=
rams through the texture memory by assigning an F90 pointer variable to the=
 underlying device array. To use texture memory in this manner, follow thes=
e steps:</p>
<ol class=3D"arabic">
<li><p>Add a declaration to a module declaration section that contains the =
device code, such that the declaration is available to the device subprogra=
m through host association, and available to the host code via either host =
or use association:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre id=
=3D"codecell44"><span></span><span class=3D"n">real</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"n">texture</span><span cl=
ass=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">pointer</span=
><span class=3D"w"> </span><span class=3D"o">::</span><span class=3D"w"> </=
span><span class=3D"n">t</span><span class=3D"p">(</span><span class=3D"o">=
:</span><span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell44">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</li>
<li><p>In your host code, add the target attribute to the device data that =
you wish to access via texture memory:</p>
<ul class=3D"simple">
<li><p>Change: <code class=3D"docutils literal notranslate"><span class=3D"=
pre">real,</span> <span class=3D"pre">device</span> <span class=3D"pre">::<=
/span> <span class=3D"pre">a(n)</span></code></p></li>
<li><p>To: <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>real,</span> <span class=3D"pre">target,</span> <span class=3D"pre">device=
</span> <span class=3D"pre">::</span> <span class=3D"pre">a(n)</span></code=
></p></li>
</ul>
<p>The target attribute is standard F90/F2003 syntax to denote an array or =
other data structure that may be =E2=80=9Cpointed to=E2=80=9D by another en=
tity.</p>
</li>
<li><p>Tie the texture declaration to the device array by using the F90 poi=
nter assignment operator in your host code. A simple expression like the fo=
llowing one performs all the underlying CUDA texture binding operations.</p=
>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre id=
=3D"codecell45"><span></span><span class=3D"n">t</span><span class=3D"w"> <=
/span><span class=3D"o">=3D&gt;</span><span class=3D"w"> </span><span class=
=3D"n">a</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell45">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>The CUDA Fortran device code that can refer to <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">t</span></code> through host associ=
ation can now access the elements of <code class=3D"docutils literal notran=
slate"><span class=3D"pre">t</span></code> without any change in syntax.</p=
>
<p>In the following example, accesses of <code class=3D"docutils literal no=
translate"><span class=3D"pre">t</span></code>, targeting <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">a</span></code>, go through=
 the texture cache.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre id=
=3D"codecell46"><span></span><span class=3D"o">!</span><span class=3D"w"> <=
/span><span class=3D"n">Vector</span><span class=3D"w"> </span><span class=
=3D"n">add</span><span class=3D"p">,</span><span class=3D"w"> </span><span =
class=3D"n">s</span><span class=3D"w"> </span><span class=3D"n">through</sp=
an><span class=3D"w"> </span><span class=3D"n">device</span><span class=3D"=
w"> </span><span class=3D"n">memory</span><span class=3D"p">,</span><span c=
lass=3D"w"> </span><span class=3D"n">t</span><span class=3D"w"> </span><spa=
n class=3D"n">is</span><span class=3D"w"> </span><span class=3D"n">through<=
/span><span class=3D"w"> </span><span class=3D"n">texture</span><span class=
=3D"w"> </span><span class=3D"n">memory</span><span class=3D"w"></span>
<span class=3D"n">i</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">threadIdx</span><span clas=
s=3D"o">%</span><span class=3D"n">x</span><span class=3D"w"> </span><span c=
lass=3D"o">+</span><span class=3D"w"> </span><span class=3D"p">(</span><spa=
n class=3D"n">blockIdx</span><span class=3D"o">%</span><span class=3D"n">x<=
/span><span class=3D"mi">-1</span><span class=3D"p">)</span><span class=3D"=
o">*</span><span class=3D"n">blockDim</span><span class=3D"o">%</span><span=
 class=3D"n">x</span><span class=3D"w"></span>
<span class=3D"n">s</span><span class=3D"p">(</span><span class=3D"n">i</sp=
an><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">s</span><span class=
=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">)</span><span cl=
ass=3D"w"> </span><span class=3D"o">+</span><span class=3D"w"> </span><span=
 class=3D"n">t</span><span class=3D"p">(</span><span class=3D"n">i</span><s=
pan class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell46">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</li>
</ol>
</section>
<section id=3D"value-dummy-arguments">
<h3><span class=3D"section-number">3.2.8. </span>Value dummy arguments<a cl=
ass=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/com=
pilers/cuda-fortran-prog-guide/index.html#value-dummy-arguments" title=3D"P=
ermalink to this headline">=EF=83=81</a></h3>
<p>In device subprograms, following the rules of Fortran, dummy arguments a=
re passed by default by reference. This means the actual argument must be s=
tored in device global memory, and the address of the argument is passed to=
 the subprogram. Scalar arguments can be passed by value, as is done in C, =
by adding the value attribute to the variable declaration.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell47"><span></span><span class=3D"n">attributes</span><span cla=
ss=3D"p">(</span><span class=3D"n">global</span><span class=3D"p">)</span><=
span class=3D"w"> </span><span class=3D"k">subroutine </span><span class=3D=
"n">madd</span><span class=3D"p">(</span><span class=3D"w"> </span><span cl=
ass=3D"n">a</span><span class=3D"p">,</span><span class=3D"w"> </span><span=
 class=3D"n">b</span><span class=3D"p">,</span><span class=3D"w"> </span><s=
pan class=3D"n">n</span><span class=3D"w"> </span><span class=3D"p">)</span=
><span class=3D"w"></span>
<span class=3D"w">      </span><span class=3D"kt">real</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"k">dimension</span><sp=
an class=3D"p">(</span><span class=3D"n">n</span><span class=3D"p">,</span>=
<span class=3D"n">n</span><span class=3D"p">)</span><span class=3D"w"> </sp=
an><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">=
a</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"=
n">b</span><span class=3D"w"></span>
<span class=3D"w">      </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">value</span><spa=
n class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span=
><span class=3D"n">n</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell47">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>In this case, the value of n can be passed from the host without needing=
 to reside in device memory. The variable arrays corresponding to the dummy=
 arguments a and b must be set up before the call to reside on the device.<=
/p>
</section>
</section>
<section id=3D"allocating-device-memory-pinned-memory-and-managed-memory">
<h2><span class=3D"section-number">3.3. </span>Allocating Device Memory, Pi=
nned Memory, and Managed Memory<a class=3D"headerlink" href=3D"https://docs=
.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.ht=
ml#allocating-device-memory-pinned-memory-and-managed-memory" title=3D"Perm=
alink to this headline">=EF=83=81</a></h2>
<p>This section describes extensions to the Allocate statement, specificall=
y for dynamically allocating device arrays, host pinned arrays, managed arr=
ays, and other supported methods for allocating memory specific to CUDA For=
tran.</p>
<section id=3D"allocating-device-memory">
<h3><span class=3D"section-number">3.3.1. </span>Allocating Device Memory<a=
 class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/=
compilers/cuda-fortran-prog-guide/index.html#allocating-device-memory" titl=
e=3D"Permalink to this headline">=EF=83=81</a></h3>
<p>Device arrays can have the allocatable attribute. These arrays are dynam=
ically allocated in host subprograms using the Allocate statement, and dyna=
mically deallocated using the Deallocate statement. If a device array decla=
red in a host subprogram does not have the Save attribute, it will be autom=
atically deallocated when the subprogram returns.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell48"><span></span><span class=3D"kt">real</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"k">allocatable</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">device=
</span><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D=
"w"> </span><span class=3D"n">b</span><span class=3D"p">(:)</span><span cla=
ss=3D"w"></span>
<span class=3D"k">allocate</span><span class=3D"p">(</span><span class=3D"n=
">b</span><span class=3D"p">(</span><span class=3D"mi">5024</span><span cla=
ss=3D"p">),</span><span class=3D"nb">stat</span><span class=3D"o">=3D</span=
><span class=3D"n">istat</span><span class=3D"p">)</span><span class=3D"w">=
</span>
<span class=3D"p">...</span><span class=3D"w"></span>
<span class=3D"k">if</span><span class=3D"p">(</span><span class=3D"nb">all=
ocated</span><span class=3D"p">(</span><span class=3D"n">b</span><span clas=
s=3D"p">))</span><span class=3D"w"> </span><span class=3D"k">deallocate</sp=
an><span class=3D"p">(</span><span class=3D"n">b</span><span class=3D"p">)<=
/span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell48">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Scalar variables can be allocated on the device using the Fortran 2003 a=
llocatable scalar feature. To use these, declare and initialize the scalar =
on the host as:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell49"><span></span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">allocatable</spa=
n><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">dev=
ice</span><span class=3D"w"> </span><span class=3D"kd">::</span><span class=
=3D"w"> </span><span class=3D"n">ndev</span><span class=3D"w"></span>
<span class=3D"k">allocate</span><span class=3D"p">(</span><span class=3D"n=
">ndev</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">ndev</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"mi">100</span><span clas=
s=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell49">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>The language also supports the ability to create the equivalent of autom=
atic and local device arrays without using the allocate statement. These ar=
rays will also have a lifetime of the subprogram as is usual with the Fortr=
an language:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell50"><span></span><span class=3D"k">subroutine </span><span cl=
ass=3D"n">vfunc</span><span class=3D"p">(</span><span class=3D"n">a</span><=
span class=3D"p">,</span><span class=3D"n">c</span><span class=3D"p">,</spa=
n><span class=3D"n">n</span><span class=3D"p">)</span><span class=3D"w"></s=
pan>
<span class=3D"w">    </span><span class=3D"kt">real</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"n">device</span><span cl=
ass=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><sp=
an class=3D"n">adev</span><span class=3D"p">(</span><span class=3D"n">n</sp=
an><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">real</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"n">device</span><span cl=
ass=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><sp=
an class=3D"n">atmp</span><span class=3D"p">(</span><span class=3D"mi">4</s=
pan><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"p">...</span><span class=3D"w">=
</span>
<span class=3D"k">end subroutine </span><span class=3D"n">vfunc</span><span=
 class=3D"w">   </span><span class=3D"c">! adev and atmp are deallocated</s=
pan>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell50">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Automatic and local arrays declared in this way, not containing the allo=
catable attribute, cannot have the Save attribute.</p>
</section>
<section id=3D"allocating-device-memory-using-runtime-routines">
<h3><span class=3D"section-number">3.3.2. </span>Allocating Device Memory U=
sing Runtime Routines<a class=3D"headerlink" href=3D"https://docs.nvidia.co=
m/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#allocat=
ing-device-memory-using-runtime-routines" title=3D"Permalink to this headli=
ne">=EF=83=81</a></h3>
<p>For programmers comfortable with the CUDA C programming environment, For=
tran interfaces to the CUDA memory management runtime routines are provided=
. These functions return memory which will bypass certain Fortran allocatab=
le properties such as automatic deallocation, and thus the arrays are treat=
ed more like C malloc=E2=80=99ed areas. Mixing standard Fortran allocate/de=
allocate with the runtime Malloc/Free for a given array is not supported.</=
p>
<p>The cudaMalloc function can be used to allocate single-dimensional array=
s of the supported intrinsic data-types, and cudaFree can be used to free i=
t:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell51"><span></span><span class=3D"kt">real</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"k">allocatable</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">device=
</span><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D=
"w"> </span><span class=3D"n">v</span><span class=3D"p">(:)</span><span cla=
ss=3D"w"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaMalloc</span><spa=
n class=3D"p">(</span><span class=3D"n">v</span><span class=3D"p">,</span><=
span class=3D"w"> </span><span class=3D"mi">100</span><span class=3D"p">)</=
span><span class=3D"w"></span>
<span class=3D"p">...</span><span class=3D"w"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaFree</span><span =
class=3D"p">(</span><span class=3D"n">v</span><span class=3D"p">)</span><sp=
an class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell51">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>For a complete list of the memory management runtime routines, refer to =
<a class=3D"reference internal" href=3D"https://docs.nvidia.com/hpc-sdk/arc=
hive/25.3/compilers/cuda-fortran-prog-guide/index.html#memory-mgmt"><span c=
lass=3D"std std-ref">Memory Management</span></a>.</p>
</section>
<section id=3D"allocate-pinned-memory">
<h3><span class=3D"section-number">3.3.3. </span>Allocate Pinned Memory<a c=
lass=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/co=
mpilers/cuda-fortran-prog-guide/index.html#allocate-pinned-memory" title=3D=
"Permalink to this headline">=EF=83=81</a></h3>
<p>Allocatable arrays with the pinned attribute are dynamically allocated u=
sing the Allocate statement. The compiler will generate code to allocate th=
e array in host page-locked memory, if available. If no such memory space i=
s available, or if it is exhausted, the compiler allocates the array in nor=
mal paged host memory. Otherwise, pinned allocatable arrays work and act li=
ke any other allocatable array on the host.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell52"><span></span><span class=3D"kt">real</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"k">allocatable</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">pinned=
</span><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D=
"w"> </span><span class=3D"n">p</span><span class=3D"p">(:)</span><span cla=
ss=3D"w"></span>
<span class=3D"k">allocate</span><span class=3D"p">(</span><span class=3D"n=
">p</span><span class=3D"p">(</span><span class=3D"mi">5000</span><span cla=
ss=3D"p">),</span><span class=3D"nb">stat</span><span class=3D"o">=3D</span=
><span class=3D"n">istat</span><span class=3D"p">)</span><span class=3D"w">=
</span>
<span class=3D"p">...</span><span class=3D"w"></span>
<span class=3D"k">if</span><span class=3D"p">(</span><span class=3D"nb">all=
ocated</span><span class=3D"p">(</span><span class=3D"n">p</span><span clas=
s=3D"p">))</span><span class=3D"w"> </span><span class=3D"k">deallocate</sp=
an><span class=3D"p">(</span><span class=3D"n">p</span><span class=3D"p">)<=
/span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell52">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>To determine whether or not the allocation from page-locked memory was s=
uccessful, an additional PINNED keyword is added to the allocate statement.=
 It returns a logical success value.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell53"><span></span><span class=3D"kt">logical </span><span clas=
s=3D"n">plog</span><span class=3D"w"></span>
<span class=3D"k">allocate</span><span class=3D"p">(</span><span class=3D"n=
">p</span><span class=3D"p">(</span><span class=3D"mi">5000</span><span cla=
ss=3D"p">),</span><span class=3D"w"> </span><span class=3D"nb">stat</span><=
span class=3D"o">=3D</span><span class=3D"n">istat</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"n">pinned</span><span clas=
s=3D"o">=3D</span><span class=3D"n">plog</span><span class=3D"p">)</span><s=
pan class=3D"w"></span>
<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(.</=
span><span class=3D"nb">not</span><span class=3D"p">.</span><span class=3D"=
w"> </span><span class=3D"n">plog</span><span class=3D"p">)</span><span cla=
ss=3D"w"> </span><span class=3D"k">then</span><span class=3D"w"></span>
<span class=3D"p">.</span><span class=3D"w"> </span><span class=3D"p">.</sp=
an><span class=3D"w"> </span><span class=3D"p">.</span><span class=3D"w"></=
span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell53">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"allocating-managed-memory">
<h3><span class=3D"section-number">3.3.4. </span>Allocating Managed Memory<=
a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3=
/compilers/cuda-fortran-prog-guide/index.html#allocating-managed-memory" ti=
tle=3D"Permalink to this headline">=EF=83=81</a></h3>
<p>Managed arrays may or may not have the allocatable attribute. These arra=
ys are all dynamically allocated just as device arrays are.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell54"><span></span><span class=3D"kt">real</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"k">allocatable</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">manage=
d</span><span class=3D"w"> </span><span class=3D"kd">::</span><span class=
=3D"w"> </span><span class=3D"n">b</span><span class=3D"p">(:)</span><span =
class=3D"w"></span>
<span class=3D"k">allocate</span><span class=3D"p">(</span><span class=3D"n=
">b</span><span class=3D"p">(</span><span class=3D"mi">5024</span><span cla=
ss=3D"p">),</span><span class=3D"nb">stat</span><span class=3D"o">=3D</span=
><span class=3D"n">istat</span><span class=3D"p">)</span><span class=3D"w">=
</span>
<span class=3D"p">...</span><span class=3D"w"></span>
<span class=3D"k">if</span><span class=3D"p">(</span><span class=3D"nb">all=
ocated</span><span class=3D"p">(</span><span class=3D"n">b</span><span clas=
s=3D"p">))</span><span class=3D"w"> </span><span class=3D"k">deallocate</sp=
an><span class=3D"p">(</span><span class=3D"n">b</span><span class=3D"p">)<=
/span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell54">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>CUDA Fortran supports the ability to create the equivalent of automatic =
and local managed arrays without using the allocate statement. These arrays=
 will also have a lifetime of the subprogram as is usual with the Fortran l=
anguage:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell55"><span></span><span class=3D"k">subroutine </span><span cl=
ass=3D"n">vfunc</span><span class=3D"p">(</span><span class=3D"n">a</span><=
span class=3D"p">,</span><span class=3D"n">c</span><span class=3D"p">,</spa=
n><span class=3D"n">n</span><span class=3D"p">)</span><span class=3D"w"></s=
pan>
<span class=3D"w">    </span><span class=3D"kt">real</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"n">managed</span><span c=
lass=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><s=
pan class=3D"n">aman</span><span class=3D"p">(</span><span class=3D"n">n</s=
pan><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">real</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"n">managed</span><span c=
lass=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><s=
pan class=3D"n">atmp</span><span class=3D"p">(</span><span class=3D"mi">4</=
span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"p">...</span><span class=3D"w">=
</span>
<span class=3D"k">end subroutine </span><span class=3D"n">vfunc</span><span=
 class=3D"w">   </span><span class=3D"c">! aman and atmp are deallocated</s=
pan>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell55">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"allocating-managed-memory-using-runtime-routines">
<h3><span class=3D"section-number">3.3.5. </span>Allocating Managed Memory =
Using Runtime Routines<a class=3D"headerlink" href=3D"https://docs.nvidia.c=
om/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#alloca=
ting-managed-memory-using-runtime-routines" title=3D"Permalink to this head=
line">=EF=83=81</a></h3>
<p>The cudaMallocManaged function can be used to allocate single-dimensiona=
l managed arrays of the supported intrinsic data-types, and cudaFree can be=
 used to free it:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell56"><span></span><span class=3D"k">use </span><span class=3D"=
n">cudafor</span><span class=3D"w"></span>
<span class=3D"kt">real</span><span class=3D"p">,</span><span class=3D"w"> =
</span><span class=3D"k">allocatable</span><span class=3D"p">,</span><span =
class=3D"w"> </span><span class=3D"n">managed</span><span class=3D"w"> </sp=
an><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">=
v</span><span class=3D"p">(:)</span><span class=3D"w"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaMallocManaged</sp=
an><span class=3D"p">(</span><span class=3D"n">v</span><span class=3D"p">,<=
/span><span class=3D"w"> </span><span class=3D"mi">100</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"n">cudaMemAttachHost</=
span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"p">...</span><span class=3D"w"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaFree</span><span =
class=3D"p">(</span><span class=3D"n">v</span><span class=3D"p">)</span><sp=
an class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell56">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>For a complete list of the memory management runtime routines, refer to =
<a class=3D"reference internal" href=3D"https://docs.nvidia.com/hpc-sdk/arc=
hive/25.3/compilers/cuda-fortran-prog-guide/index.html#memory-mgmt"><span c=
lass=3D"std std-ref">Memory Management</span></a>.</p>
</section>
<section id=3D"allocating-device-memory-asynchronously">
<h3><span class=3D"section-number">3.3.6. </span>Allocating Device Memory A=
synchronously<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sd=
k/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#allocating-devi=
ce-memory-asynchronously" title=3D"Permalink to this headline">=EF=83=81</a=
></h3>
<p>Beginning in CUDA 11.2, allocatable device arrays can be dynamically all=
ocated in host subprograms using the Allocate statement, asynchronously, on=
 a specified stream.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell57"><span></span><span class=3D"kt">real</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"k">allocatable</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">device=
</span><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D=
"w"> </span><span class=3D"n">b</span><span class=3D"p">(:)</span><span cla=
ss=3D"w"></span>
<span class=3D"kt">integer</span><span class=3D"p">(</span><span class=3D"n=
b">kind</span><span class=3D"o">=3D</span><span class=3D"n">cuda_stream_kin=
d</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"=
kd">::</span><span class=3D"w"> </span><span class=3D"n">istream</span><spa=
n class=3D"w"></span>
<span class=3D"p">...</span><span class=3D"w"></span>
<span class=3D"k">allocate</span><span class=3D"p">(</span><span class=3D"n=
">b</span><span class=3D"p">(</span><span class=3D"mi">5024</span><span cla=
ss=3D"p">),</span><span class=3D"n">stream</span><span class=3D"o">=3D</spa=
n><span class=3D"n">istream</span><span class=3D"p">)</span><span class=3D"=
w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell57">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>These arrays can also be dynamically deallocated using the Deallocate st=
atement. It is not necessary, or allowed, to specify a stream during deallo=
cation. If a device array declared in a host subprogram does not have the S=
ave attribute, it will be automatically deallocated when the subprogram ret=
urns. Given the allocation above, this statement will deallocate the array =
b on the stream specified by istream.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell58"><span></span><span class=3D"k">if</span><span class=3D"p"=
>(</span><span class=3D"nb">allocated</span><span class=3D"p">(</span><span=
 class=3D"n">b</span><span class=3D"p">))</span><span class=3D"w"> </span><=
span class=3D"k">deallocate</span><span class=3D"p">(</span><span class=3D"=
n">b</span><span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell58">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Arrays declared using the Allocate statement with a stream are associate=
d with that stream as if the <code class=3D"docutils literal notranslate"><=
span class=3D"pre">cudaforSetDefaultStream</span></code> function were call=
ed for that combination of device data and stream. To use this data in oper=
ations outside of this stream, users should call <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">cudaStreamSynchronize</span></code> =
first to block host execution until all stream operations have completed.</=
p>
</section>
<section id=3D"allocating-device-memory-asynchronously-using-runtime-routin=
es">
<h3><span class=3D"section-number">3.3.7. </span>Allocating Device Memory A=
synchronously Using Runtime Routines<a class=3D"headerlink" href=3D"https:/=
/docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/ind=
ex.html#allocating-device-memory-asynchronously-using-runtime-routines" tit=
le=3D"Permalink to this headline">=EF=83=81</a></h3>
<p>The cudaMallocAsync function can be used to allocate single-dimensional =
arrays of the supported intrinsic data-types, and cudaFreeAsync can be used=
 to free it, asynchronously, on a given stream:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell59"><span></span><span class=3D"kt">real</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"k">allocatable</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">device=
</span><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D=
"w"> </span><span class=3D"n">v</span><span class=3D"p">(:)</span><span cla=
ss=3D"w"></span>
<span class=3D"kt">integer</span><span class=3D"p">(</span><span class=3D"n=
b">kind</span><span class=3D"o">=3D</span><span class=3D"n">cuda_stream_kin=
d</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"=
kd">::</span><span class=3D"w"> </span><span class=3D"n">istream</span><spa=
n class=3D"w"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaMallocAsync</span=
><span class=3D"p">(</span><span class=3D"n">v</span><span class=3D"p">,</s=
pan><span class=3D"w"> </span><span class=3D"mi">100</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"n">istream</span><span c=
lass=3D"p">)</span><span class=3D"w"></span>
<span class=3D"p">...</span><span class=3D"w"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaFreeAsync</span><=
span class=3D"p">(</span><span class=3D"n">v</span><span class=3D"p">,</spa=
n><span class=3D"w"> </span><span class=3D"n">istream</span><span class=3D"=
p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell59">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>For a complete list of the memory management runtime routines, refer to =
<a class=3D"reference internal" href=3D"https://docs.nvidia.com/hpc-sdk/arc=
hive/25.3/compilers/cuda-fortran-prog-guide/index.html#memory-mgmt"><span c=
lass=3D"std std-ref">Memory Management</span></a>.</p>
</section>
<section id=3D"controlling-device-data-is-managed">
<h3><span class=3D"section-number">3.3.8. </span>Controlling Device Data is=
 Managed<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/arc=
hive/25.3/compilers/cuda-fortran-prog-guide/index.html#controlling-device-d=
ata-is-managed" title=3D"Permalink to this headline">=EF=83=81</a></h3>
<p>Beginning in the HPC SDK compiler version 21.9, it is possible to change=
 the CUDA Fortran device data allocation behavior to actually allocate mana=
ged memory instead of device memory, with potentially no coding changes.</p=
>
<p>This can be useful in order to oversubscribe the available GPU memory, a=
nd allow the OS and driver to page memory to and from the GPU as needed, ei=
ther as an experiment or for running larger problem sizes than normally ava=
ilable.</p>
<p>All CUDA Fortran device allocations go through a small wrapper layer bef=
ore making the actual CUDA API call. By setting the environment variable</p=
>
<div class=3D"highlight-text notranslate"><div class=3D"highlight"><pre id=
=3D"codecell60"><span></span>NVCOMPILER_CUDAFOR_DEVICE_IS_MANAGED=3D1
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell60">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>allocations in the form of the first two subsections in this section, <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">Allocating</=
span> <span class=3D"pre">Device</span> <span class=3D"pre">Memory</span></=
code> and <code class=3D"docutils literal notranslate"><span class=3D"pre">=
Allocating</span> <span class=3D"pre">Device</span> <span class=3D"pre">Mem=
ory</span> <span class=3D"pre">Using</span> <span class=3D"pre">Runtime</sp=
an> <span class=3D"pre">Routines</span></code> will eventually call cudaMal=
locManaged rather than cudaMalloc. In addition, some prefetching hints are =
added to make the accesses to the newly allocated data most efficient from =
the GPU (the current device).</p>
</section>
</section>
<section id=3D"data-transfer-between-host-and-device-memory">
<h2><span class=3D"section-number">3.4. </span>Data transfer between host a=
nd device memory<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc=
-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#data-transfe=
r-between-host-and-device-memory" title=3D"Permalink to this headline">=EF=
=83=81</a></h2>
<p>This section provides methods to transfer data between the host and devi=
ce memory.</p>
<section id=3D"data-transfer-using-assignment-statements">
<h3><span class=3D"section-number">3.4.1. </span>Data Transfer Using Assign=
ment Statements<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-=
sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#data-transfer=
-using-assignment-statements" title=3D"Permalink to this headline">=EF=83=
=81</a></h3>
<p>You can copy variables and arrays from the host memory to the device mem=
ory by using simple assignment statements in host subprograms. By default, =
using assignment statements to read or write device, managed, or constant d=
ata implicitly uses CUDA stream zero. This means such data copies are synch=
ronous, and the data copy waits until all previous kernels and data copies =
complete. Alternatively, you can use the <code class=3D"docutils literal no=
translate"><span class=3D"pre">cudaforSetDefaultStream</span></code> call t=
o associate one or more device and managed variables to a particular stream=
. After this call has occurred, assignment statements on those variables wi=
ll run asynchronously on the specified stream.</p>
<p>Specific information on assignment statements:</p>
<ul class=3D"simple">
<li><p>An assignment statement where the left hand side is a device variabl=
e or device array or array section, and the right hand side is a host varia=
ble or host array or array section, copies data from the host memory to the=
 device global memory.</p></li>
<li><p>An assignment statement where the left hand side is a host variable =
or host array or array section, and the right hand side is a device variabl=
e or device array or array section, copies data from the device global memo=
ry to the host memory.</p></li>
<li><p>An assignment statement with a device variable or device array or ar=
ray section on both sides of the assignment statement copies data between t=
wo device variables or arrays.</p></li>
</ul>
<p>Similarly, you can use simple assignment statements to copy or assign va=
riables or arrays with the constant attribute.</p>
<p>Specific information on assignment statements and managed data:</p>
<ul class=3D"simple">
<li><p>An assignment statement where the left hand side is a managed variab=
le or managed array, and the right hand side is a conforming scalar constan=
t, host variable, host array or array section, copies data from the host me=
mory to the device global memory using cudaMemcpy, memset, or a similar ope=
ration.</p></li>
<li><p>An assignment statement where the left hand side is a managed array =
section and the right hand side is any host variable copies data using gene=
rated host code.</p></li>
<li><p>An assignment statement where the left hand side is a managed variab=
le, managed array or array section, and the right hand side is a device var=
iable or device array or array section, copies data from the device global =
memory to the host memory using cudaMemcpy or a similar operation.</p></li>
<li><p>An assignment statement where the right hand side is a managed varia=
ble or managed array, and the left hand side is a host variable, host array=
 or array section, copies data from the device global memory to the host me=
mory using cudaMemcpy or a similar operation.</p></li>
<li><p>An assignment statement where the right hand side is a managed array=
 section and the left hand side is any host or managed variable copies data=
 using generated host code.</p></li>
<li><p>An assignment statement where the right hand side is a managed varia=
ble, managed array or array section, and the left hand side is a device var=
iable or device array or array section, copies data using cudaMemcpy and ac=
cesses the data from the device.</p></li>
</ul>
<p>More information on Memcpy and Memset behavior with managed memory can b=
e found in the <a class=3D"reference external" href=3D"https://docs.nvidia.=
com/cuda/cuda-c-programming-guide/index.html#unified-memory-programming">Un=
ified Memory Programing</a> section of the <em>CUDA C Programming Guide</em=
>.</p>
</section>
<section id=3D"implicit-data-transfer-in-expressions">
<h3><span class=3D"section-number">3.4.2. </span>Implicit Data Transfer in =
Expressions<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/=
archive/25.3/compilers/cuda-fortran-prog-guide/index.html#implicit-data-tra=
nsfer-in-expressions" title=3D"Permalink to this headline">=EF=83=81</a></h=
3>
<p>Some limited data transfer can be enclosed within expressions. In genera=
l, the rule of thumb is all arithmetic or operations must occur on the host=
, which normally only allows one device array to appear on the right-hand-s=
ide of an expression. Temporary arrays are generated to accommodate the hos=
t copies of device data as needed. For instance, if <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">a</span></code>, <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">b</span></code>, and <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">c</span></code>=
 are conforming host arrays, and <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">adev</span></code>, <code class=3D"docutils literal =
notranslate"><span class=3D"pre">bdev</span></code>, and <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">cdev</span></code> are confo=
rming device arrays, the following expressions are legal:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell61"><span></span><span class=3D"n">a</span><span class=3D"w">=
 </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">adev</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell61">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell62"><span></span><span class=3D"n">adev</span><span class=3D"=
w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span clas=
s=3D"n">a</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell62">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell63"><span></span><span class=3D"n">b</span><span class=3D"w">=
 </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">a</span><span class=3D"w"> </span><span class=3D"o">+</span><span cl=
ass=3D"w"> </span><span class=3D"n">adev</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell63">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell64"><span></span><span class=3D"n">c</span><span class=3D"w">=
 </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">x</span><span class=3D"w"> </span><span class=3D"o">*</span><span cl=
ass=3D"w"> </span><span class=3D"n">adev</span><span class=3D"w"> </span><s=
pan class=3D"o">+</span><span class=3D"w"> </span><span class=3D"n">b</span=
><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell64">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>The following expressions are not legal as they either promote a false i=
mpression of where the actual computation occurs, or would be more efficien=
t written in another way, or both:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell65"><span></span><span class=3D"n">c</span><span class=3D"w">=
 </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">adev</span><span class=3D"w"> </span><span class=3D"o">+</span><span=
 class=3D"w"> </span><span class=3D"n">bdev</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell65">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell66"><span></span><span class=3D"n">adev</span><span class=3D"=
w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span clas=
s=3D"n">adev</span><span class=3D"w"> </span><span class=3D"o">+</span><spa=
n class=3D"w"> </span><span class=3D"n">a</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell66">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell67"><span></span><span class=3D"n">b</span><span class=3D"w">=
 </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"nb">sqrt</span><span class=3D"p">(</span><span class=3D"n">adev</span><=
span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell67">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Elemental transfers are supported by the language but perform poorly. Ar=
ray slices are also supported, and their performance is dependent on the si=
ze of the slice, the amount of contiguous data in the slices, and the imple=
mentation.</p>
<span class=3D"target" id=3D"cfref-data-trans-runtm-routines"></span></sect=
ion>
<section id=3D"data-transfer-using-runtime-routines">
<h3><span class=3D"section-number">3.4.3. </span>Data Transfer Using Runtim=
e Routines<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/a=
rchive/25.3/compilers/cuda-fortran-prog-guide/index.html#data-transfer-usin=
g-runtime-routines" title=3D"Permalink to this headline">=EF=83=81</a></h3>
<p>For programmers comfortable with the CUDA C programming environment, For=
tran interfaces to the CUDA memory management runtime routines are provided=
. These functions can transfer data either from the host to device, device =
to host, or from one device array to another.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">cud=
aMemcpy</span></code> function can be used to copy data between the host an=
d the GPU:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell68"><span></span><span class=3D"kt">real</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"n">device</span><span =
class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><=
span class=3D"n">wrk</span><span class=3D"p">(</span><span class=3D"mi">102=
4</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"kt">real </span><span class=3D"n">cur</span><span class=3D"p=
">(</span><span class=3D"mi">512</span><span class=3D"p">)</span><span clas=
s=3D"w"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaMemcpy</span><spa=
n class=3D"p">(</span><span class=3D"n">wrk</span><span class=3D"p">,</span=
><span class=3D"w"> </span><span class=3D"n">cur</span><span class=3D"p">,<=
/span><span class=3D"w"> </span><span class=3D"mi">512</span><span class=3D=
"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell68">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>For those familiar with the CUDA C routines, the kind parameter to the M=
emcpy routines is optional in Fortran because the attributes of the arrays =
are explicitly declared. Counts expressed in arguments to the Fortran runti=
me routines are expressed in terms of data type elements, not bytes.</p>
<p>For a complete list of memory management runtime routines, refer to <a c=
lass=3D"reference internal" href=3D"https://docs.nvidia.com/hpc-sdk/archive=
/25.3/compilers/cuda-fortran-prog-guide/index.html#memory-mgmt"><span class=
=3D"std std-ref">Memory Management</span></a>.</p>
</section>
</section>
<section id=3D"invoking-a-kernel-subroutine">
<h2><span class=3D"section-number">3.5. </span>Invoking a kernel subroutine=
<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.=
3/compilers/cuda-fortran-prog-guide/index.html#invoking-a-kernel-subroutine=
" title=3D"Permalink to this headline">=EF=83=81</a></h2>
<p>A call to a kernel subroutine must give the execution configuration for =
the call. The execution configuration gives the size and shape of the grid =
and thread blocks that execute the function as well as the amount of shared=
 memory to use for assumed-size shared memory arrays and the associated str=
eam.</p>
<p>The execution configuration is specified after the subroutine name in th=
e call statement; it has the form:</p>
<div class=3D"highlight-text notranslate"><div class=3D"highlight"><pre id=
=3D"codecell69"><span></span>&lt;&lt;&lt; grid, block, bytes, stream &gt;&g=
t;&gt;
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell69">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gri=
d</span></code> is an integer, a value of <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">type(dim3)</span></code>, or <code class=3D=
"docutils literal notranslate"><span class=3D"pre">*</span></code>. If grid=
 is an integer, it is converted to <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">dim3(grid,1,1)</span></code>. If it is <code class=
=3D"docutils literal notranslate"><span class=3D"pre">type(dim3)</span></co=
de>, the product <code class=3D"docutils literal notranslate"><span class=
=3D"pre">grid%x*grid%y*grid%z</span></code> gives the number of thread bloc=
ks to launch. This product must be less than or equal to the maximum number=
 of blocks supported by the device. Launching a grid_global subroutine kern=
el puts further restrictions on the number of blocks. Setting the grid to <=
code class=3D"docutils literal notranslate"><span class=3D"pre">*</span></c=
ode> instructs the runtime to compute the number of blocks via a call to <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">cudaOccupanc=
yMaxActiveBlocksPerMultiprocessor()</span></code>, which takes grid_global =
(or not) into account. Setting a single grid dim3 x, y, or z value to -1 al=
so takes this same querying path through the runtime.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">blo=
ck</span></code> is an integer, or of <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">type(dim3)</span></code>. If it is <code class=
=3D"docutils literal notranslate"><span class=3D"pre">type(dim3)</span></co=
de>, the number of threads per thread block is <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">block%x*block%y*block%z,</span></code>=
 which must be less than or equal to the maximum supported by the device. I=
f <code class=3D"docutils literal notranslate"><span class=3D"pre">block</s=
pan></code> is an integer, it is converted to <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">dim3(block,1,1)</span></code>.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">byt=
es</span></code> is optional; if present, it must be a scalar integer, and =
specifies the number of bytes of shared memory to be allocated for each thr=
ead block to use for assumed-size shared memory arrays. For more informatio=
n, refer to <a class=3D"reference internal" href=3D"https://docs.nvidia.com=
/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#cfref-va=
r-attr-shared-data"><span class=3D"std std-ref">Shared Data</span></a>. If =
not specified, the value zero is used.</p></li>
<li><p>stream is optional; if present, it must be an integer, and have a va=
lue of zero, or a value returned by a call to cudaStreamCreate. See Section=
 4.5 on page 41. It specifies the stream to which this call is enqueued. Th=
e stream constant value <code class=3D"docutils literal notranslate"><span =
class=3D"pre">cudaStreamPerThread</span></code> may be specified. This will=
 use a unique stream for each CPU thread.</p></li>
</ul>
<p>For instance, a kernel subroutine</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell70"><span></span><span class=3D"n">attributes</span><span cla=
ss=3D"p">(</span><span class=3D"n">global</span><span class=3D"p">)</span><=
span class=3D"w"> </span><span class=3D"k">subroutine </span><span class=3D=
"n">sub</span><span class=3D"p">(</span><span class=3D"w"> </span><span cla=
ss=3D"n">a</span><span class=3D"w"> </span><span class=3D"p">)</span><span =
class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell70">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>can be called like:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell71"><span></span><span class=3D"k">call </span><span class=3D=
"n">sub</span><span class=3D"w"> </span><span class=3D"o">&lt;&lt;&lt;</spa=
n><span class=3D"w"> </span><span class=3D"n">DG</span><span class=3D"p">,<=
/span><span class=3D"w"> </span><span class=3D"n">DB</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"n">bytes</span><span cla=
ss=3D"w"> </span><span class=3D"o">&gt;&gt;&gt;</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">=
A</span><span class=3D"w"> </span><span class=3D"p">)</span><span class=3D"=
w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell71">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>The function call fails if the <code class=3D"docutils literal notransla=
te"><span class=3D"pre">grid</span></code> or <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">block</span></code> arguments are great=
er than the maximum sizes allowed, or if <code class=3D"docutils literal no=
translate"><span class=3D"pre">bytes</span></code> is greater than the shar=
ed memory available. Shared memory may also be consumed by fixed-sized shar=
ed memory declarations in the kernel and for other dedicated uses, such as =
function arguments and execution configuration arguments.</p>
<span class=3D"target" id=3D"cfref-dev-code"></span></section>
<section id=3D"device-code">
<h2><span class=3D"section-number">3.6. </span>Device code<a class=3D"heade=
rlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-=
fortran-prog-guide/index.html#device-code" title=3D"Permalink to this headl=
ine">=EF=83=81</a></h2>
<span class=3D"target" id=3D"cfref-dev-code-datatypes"></span><section id=
=3D"datatypes-allowed">
<h3><span class=3D"section-number">3.6.1. </span>Datatypes Allowed<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#datatypes-allowed" title=3D"Permalin=
k to this headline">=EF=83=81</a></h3>
<p>Variables and arrays with the device, constant, or shared attributes, or=
 declared in device subprograms, are limited to the types described in this=
 section. They may have any of the intrinsic datatypes in the following tab=
le.</p>
<div class=3D"wy-table-responsive"><table class=3D"table-no-stripes docutil=
s align-default" id=3D"cfref-dev-code-datatypes-dev-code-intrinsic-tbl">
<caption><span class=3D"caption-text">Table 3. Device Code Intrinsic Dataty=
pes</span><a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/a=
rchive/25.3/compilers/cuda-fortran-prog-guide/index.html#cfref-dev-code-dat=
atypes-dev-code-intrinsic-tbl" title=3D"Permalink to this table">=EF=83=81<=
/a></caption>
<colgroup>
<col style=3D"width: 44%">
<col style=3D"width: 56%">
</colgroup>
<tbody>
<tr class=3D"row-odd"><td><p>Type</p></td>
<td><p>Type Kind</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">integer</span></code></p></td>
<td><p>1,2,4(default),8</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">logical</span></code></p></td>
<td><p>1,2,4(default),8</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">real</span></code></p></td>
<td><p>2,4(default),8</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">double</span> <span class=3D"pre">precision</span></code=
></p></td>
<td><p>equivalent to <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">real(kind=3D8)</span></code></p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">complex</span></code></p></td>
<td><p>4(default),8</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">character(len=3D1)</span></code></p></td>
<td><p>1 (default)</p></td>
</tr>
</tbody>
</table></div>
<p>Additionally, they may be of derived type, where the members of the deri=
ved type have one of the allowed intrinsic datatypes, or another allowed de=
rived type.</p>
<p>The system module <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">cudafor</span></code> includes definitions of the derived type <=
code class=3D"docutils literal notranslate"><span class=3D"pre">dim3</span>=
</code>, defined as</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell72"><span></span><span class=3D"k">type</span><span class=3D"=
p">(</span><span class=3D"n">dim3</span><span class=3D"p">)</span><span cla=
ss=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><s=
pan class=3D"mi">4</span><span class=3D"p">)</span><span class=3D"w"> </spa=
n><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">x=
</span><span class=3D"p">,</span><span class=3D"n">y</span><span class=3D"p=
">,</span><span class=3D"n">z</span><span class=3D"w"></span>
<span class=3D"k">end type</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell72">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"built-in-variables">
<h3><span class=3D"section-number">3.6.2. </span>Built-in Variables<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#built-in-variables" title=3D"Permali=
nk to this headline">=EF=83=81</a></h3>
<p>Several CUDA Fortran read-only predefined variables are available in dev=
ice code. They are declared as follows:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell73"><span></span><span class=3D"k">type</span><span class=3D"=
p">(</span><span class=3D"n">dim3</span><span class=3D"p">)</span><span cla=
ss=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><spa=
n class=3D"n">threadidx</span><span class=3D"p">,</span><span class=3D"w"> =
</span><span class=3D"n">blockdim</span><span class=3D"p">,</span><span cla=
ss=3D"w"> </span><span class=3D"n">blockidx</span><span class=3D"p">,</span=
><span class=3D"w"> </span><span class=3D"n">griddim</span><span class=3D"w=
"></span>
<span class=3D"kt">integer</span><span class=3D"p">(</span><span class=3D"m=
i">4</span><span class=3D"p">),</span><span class=3D"w"> </span><span class=
=3D"k">parameter</span><span class=3D"w"> </span><span class=3D"kd">::</spa=
n><span class=3D"w"> </span><span class=3D"n">warpsize</span><span class=3D=
"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span cla=
ss=3D"mi">32</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell73">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<ul class=3D"simple">
<li><p>The variable <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">threadidx</span></code> contains the thread index within its thre=
ad block; for one- or two-dimensional thread blocks, the <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">threadidx%y</span></code> an=
d/or <code class=3D"docutils literal notranslate"><span class=3D"pre">threa=
didx%z</span></code> components have the value one.</p></li>
<li><p>The variable <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">blockdim</span></code> contains the dimensions of the thread bloc=
k; <code class=3D"docutils literal notranslate"><span class=3D"pre">blockdi=
m</span></code> has the same value for all threads in the same grid; for on=
e- or two-dimensional thread blocks, the <code class=3D"docutils literal no=
translate"><span class=3D"pre">blockdim%y</span></code> and/or <code class=
=3D"docutils literal notranslate"><span class=3D"pre">blockdim%z</span></co=
de> components have the value one.</p></li>
<li><p>The variable <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">blockidx</span></code> contains the block index within the grid; =
as with <code class=3D"docutils literal notranslate"><span class=3D"pre">th=
readidx</span></code>, for one-dimensional grids, <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">blockidx%y</span></code> has the va=
lue one. The value of <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">blockidx%z</span></code> is always one. The value of <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">blockidx</span></cod=
e> is the same for all threads in the same thread block.</p></li>
<li><p>The variable <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">griddim</span></code> contains the dimensions of the grid. The va=
lue of <code class=3D"docutils literal notranslate"><span class=3D"pre">gri=
ddim</span></code> is the same for all threads in the same grid; the value =
of <code class=3D"docutils literal notranslate"><span class=3D"pre">griddim=
%y</span></code> and <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">griddim%z</span></code> is one for one-dimensional grids.</p></l=
i>
<li><p>The variables <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">threadidx</span></code>, <code class=3D"docutils literal notrans=
late"><span class=3D"pre">blockdim</span></code>, <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">blockidx</span></code>, and <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">griddim</span></c=
ode> are available only in device subprograms.</p></li>
<li><p>The constant <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">warpsize</span></code> contains the number of threads in a warp. =
It is currently defined to be 32.</p></li>
</ul>
</section>
<section id=3D"fortran-intrinsics">
<h3><span class=3D"section-number">3.6.3. </span>Fortran Intrinsics<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#fortran-intrinsics" title=3D"Permali=
nk to this headline">=EF=83=81</a></h3>
<p>This section lists the Fortran intrinsic functions allowed in device sub=
programs.</p>
<p>The use of system module <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">wmma</span></code> is required to call mathematical and s=
ome numeric intrinsics using <code class=3D"docutils literal notranslate"><=
span class=3D"pre">real(2)</span></code> data type. Information about which=
 intrinsics are only available via wmma module can be found in <a class=3D"=
reference internal" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/co=
mpilers/cuda-fortran-prog-guide/index.html#cfref-fort-mods-dev-mod-wmma"><s=
pan class=3D"std std-ref">WMMA Module</span></a> description section.</p>
<div class=3D"wy-table-responsive"><table class=3D"table-no-stripes docutil=
s align-default" id=3D"id6">
<caption><span class=3D"caption-text">Table 4. Fortran Numeric and Logical =
Intrinsics</span><a class=3D"headerlink" href=3D"https://docs.nvidia.com/hp=
c-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#id6" title=
=3D"Permalink to this table">=EF=83=81</a></caption>
<colgroup>
<col style=3D"width: 22%">
<col style=3D"width: 27%">
<col style=3D"width: 3%">
<col style=3D"width: 22%">
<col style=3D"width: 27%">
</colgroup>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>Name</p></th>
<th class=3D"head"><p>Argument Datatypes</p></th>
<th class=3D"head"></th>
<th class=3D"head"><p>Name</p></th>
<th class=3D"head"><p>Argument Datatypes</p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">abs</span></code></p></td>
<td><p>integer, real(2,4,8), complex</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">int=
</span></code></p></td>
<td><p>integer, real(2,4,8), complex</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">aimag</span></code></p></td>
<td><p>complex</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">log=
ical</span></code></p></td>
<td><p>logical</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">aint</span></code></p></td>
<td><p>real(4,8)</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">max=
</span></code></p></td>
<td><p>integer, real(2,4,8)</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">anint</span></code></p></td>
<td><p>real(4,8)</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">min=
</span></code></p></td>
<td><p>integer, real(2,4,8)</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">ceiling</span></code></p></td>
<td><p>real(4,8)</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">mod=
</span></code></p></td>
<td><p>integer, real(4,8)</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">cmplx</span></code></p></td>
<td><p>real(2,4,8) or (real,real)</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">mod=
ulo</span></code></p></td>
<td><p>integer, real(4,8)</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">conjg</span></code></p></td>
<td><p>complex</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">nin=
t</span></code></p></td>
<td><p>real(4,8)</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">dim</span></code></p></td>
<td><p>integer, real(4,8)</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">rea=
l</span></code></p></td>
<td><p>integer, real(2,4,8), complex</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">floor</span></code></p></td>
<td><p>real(4,8)</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">sig=
n</span></code></p></td>
<td><p>integer, real(4,8)</p></td>
</tr>
</tbody>
</table></div>
<div class=3D"wy-table-responsive"><table class=3D"table-no-stripes docutil=
s align-default" id=3D"id7">
<caption><span class=3D"caption-text">Table 5. Fortran Mathematical Intrins=
ics</span><a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/a=
rchive/25.3/compilers/cuda-fortran-prog-guide/index.html#id7" title=3D"Perm=
alink to this table">=EF=83=81</a></caption>
<colgroup>
<col style=3D"width: 19%">
<col style=3D"width: 28%">
<col style=3D"width: 4%">
<col style=3D"width: 19%">
<col style=3D"width: 29%">
</colgroup>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>Name</p></th>
<th class=3D"head"><p>Argument Datatypes</p></th>
<th class=3D"head"></th>
<th class=3D"head"><p>Name</p></th>
<th class=3D"head"><p>Argument Datatypes</p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">acos</span></code></p></td>
<td><p>real(2,4,8)</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cos=
h</span></code></p></td>
<td><p>real(2,4,8)</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">acosh</span></code></p></td>
<td><p>real(4,8)</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">erf=
</span></code></p></td>
<td><p>real(4,8)</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">asin</span></code></p></td>
<td><p>real(2,4,8)</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">erf=
c</span></code></p></td>
<td><p>real(4,8)</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">asinh</span></code></p></td>
<td><p>real(4,8)</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">exp=
</span></code></p></td>
<td><p>real(2,4,8), complex</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">atan</span></code></p></td>
<td><p>real(2,4,8)</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">gam=
ma</span></code></p></td>
<td><p>real(4,8)</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">atanh</span></code></p></td>
<td><p>real(4,8)</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">hyp=
ot</span></code></p></td>
<td><p>(real(4,8),real(4,8))</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">atan2</span></code></p></td>
<td><p>(real,real)</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">log=
</span></code></p></td>
<td><p>real(2,4,8), complex</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">bessel_j0</span></code></p></td>
<td><p>real(4,8)</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">log=
10</span></code></p></td>
<td><p>real(2,4,8)</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">bessel_j1</span></code></p></td>
<td><p>real(4,8)</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">log=
_gamma</span></code></p></td>
<td><p>real(4,8)</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">bessel_jn</span></code></p></td>
<td><p>(int,real(4,8))</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">sin=
</span></code></p></td>
<td><p>real(2,4,8), complex</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">bessel_y0</span></code></p></td>
<td><p>real(4,8)</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">sin=
h</span></code></p></td>
<td><p>real(2,4,8)</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">bessel_y1</span></code></p></td>
<td><p>real(4,8)</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">sqr=
t</span></code></p></td>
<td><p>real(2,4,8), complex</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">bessel_yn</span></code></p></td>
<td><p>(int,real(4,8))</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">tan=
</span></code></p></td>
<td><p>real(2,4,8)</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">cos</span></code></p></td>
<td><p>real(2,4,8), complex</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">tan=
h</span></code></p></td>
<td><p>real(2,4,8)</p></td>
</tr>
</tbody>
</table></div>
<div class=3D"wy-table-responsive"><table class=3D"table-no-stripes docutil=
s align-default" id=3D"id8">
<caption><span class=3D"caption-text">Table 6. Fortran Numeric Inquiry Intr=
insics</span><a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sd=
k/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#id8" title=3D"P=
ermalink to this table">=EF=83=81</a></caption>
<colgroup>
<col style=3D"width: 18%">
<col style=3D"width: 22%">
<col style=3D"width: 3%">
<col style=3D"width: 24%">
<col style=3D"width: 32%">
</colgroup>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>Name</p></th>
<th class=3D"head"><p>Argument Datatypes</p></th>
<th class=3D"head"></th>
<th class=3D"head"><p>Name</p></th>
<th class=3D"head"><p>Argument Datatypes</p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">bit_size</span></code></p></td>
<td><p>integer</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">pre=
cision</span></code></p></td>
<td><p>real(2,4,8), complex</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">digits</span></code></p></td>
<td><p>integer, real(2,4,8)</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">rad=
ix</span></code></p></td>
<td><p>integer, real(2,4,8)</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">epsilon</span></code></p></td>
<td><p>real(2,4,8)</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">ran=
ge</span></code></p></td>
<td><p>integer, real(2,4,8), complex</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">huge</span></code></p></td>
<td><p>integer, real(2,4,8)</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">sel=
ected_int_kind</span></code></p></td>
<td><p>integer</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">maxexponent</span></code></p></td>
<td><p>real(2,4,8)</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">sel=
ected_real_kind</span></code></p></td>
<td><p>(integer,integer)</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">minexponent</span></code></p></td>
<td><p>real(2,4,8)</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">tin=
y</span></code></p></td>
<td><p>real(2,4,8)</p></td>
</tr>
</tbody>
</table></div>
<div class=3D"wy-table-responsive"><table class=3D"table-no-stripes docutil=
s align-default" id=3D"id9">
<caption><span class=3D"caption-text">Table 7. Fortran Bit Manipulation Int=
rinsics</span><a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-s=
dk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#id9" title=3D"=
Permalink to this table">=EF=83=81</a></caption>
<colgroup>
<col style=3D"width: 18%">
<col style=3D"width: 29%">
<col style=3D"width: 4%">
<col style=3D"width: 19%">
<col style=3D"width: 29%">
</colgroup>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>Name</p></th>
<th class=3D"head"><p>Argument Datatypes</p></th>
<th class=3D"head"></th>
<th class=3D"head"><p>Name</p></th>
<th class=3D"head"><p>Argument Datatypes</p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">btest</span></code></p></td>
<td><p>integer</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">ish=
ft</span></code></p></td>
<td><p>integer</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">iand</span></code></p></td>
<td><p>integer</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">ish=
ftc</span></code></p></td>
<td><p>integer</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">ibclr</span></code></p></td>
<td><p>integer</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">lea=
dz</span></code></p></td>
<td><p>integer</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">ibits</span></code></p></td>
<td><p>integer</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">mvb=
its</span></code></p></td>
<td><p>integer</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">ibset</span></code></p></td>
<td><p>integer</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">not=
</span></code></p></td>
<td><p>integer</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">ieor</span></code></p></td>
<td><p>integer</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">pop=
cnt</span></code></p></td>
<td><p>integer</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">ior</span></code></p></td>
<td><p>integer</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">pop=
par</span></code></p></td>
<td><p>integer</p></td>
</tr>
</tbody>
</table></div>
<div class=3D"wy-table-responsive"><table class=3D"table-no-stripes docutil=
s align-default" id=3D"id10">
<caption><span class=3D"caption-text">Table 8. Fortran Reduction and Array =
Intrinsics</span><a class=3D"headerlink" href=3D"https://docs.nvidia.com/hp=
c-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#id10" title=
=3D"Permalink to this table">=EF=83=81</a></caption>
<colgroup>
<col style=3D"width: 21%">
<col style=3D"width: 24%">
<col style=3D"width: 4%">
<col style=3D"width: 17%">
<col style=3D"width: 35%">
</colgroup>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>Name</p></th>
<th class=3D"head"><p>Argument Datatypes</p></th>
<th class=3D"head"></th>
<th class=3D"head"><p>Name</p></th>
<th class=3D"head"><p>Argument Datatypes</p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">all</span></code></p></td>
<td><p>logical</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">max=
val</span></code></p></td>
<td><p>integer, real(2,4,8)</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">any</span></code></p></td>
<td><p>logical</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">min=
loc</span></code></p></td>
<td><p>integer, real(4,8)</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">count</span></code></p></td>
<td><p>logical</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">min=
val</span></code></p></td>
<td><p>integer, real(2,4,8)</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">dot_product</span></code></p></td>
<td><p>real(4,8)</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">nor=
m2</span></code></p></td>
<td><p>real(4,8)</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">matmul</span></code></p></td>
<td><p>real(4,8), complex</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">pro=
duct</span></code></p></td>
<td><p>integer, real(4,8), complex</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">maxloc</span></code></p></td>
<td><p>integer, real(4,8)</p></td>
<td></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">sum=
</span></code></p></td>
<td><p>integer, real(4,8), complex</p></td>
</tr>
</tbody>
</table></div>
</section>
<section id=3D"synchronization-functions">
<h3><span class=3D"section-number">3.6.4. </span>Synchronization Functions<=
a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3=
/compilers/cuda-fortran-prog-guide/index.html#synchronization-functions" ti=
tle=3D"Permalink to this headline">=EF=83=81</a></h3>
<p>This section describes the synchronization functions and subroutines sup=
ported in device subprograms.</p>
<p><strong>Synchronization Functions</strong></p>
<p>The synchronization functions control the synchronization of various thr=
eads during execution of thread blocks.</p>
<div class=3D"wy-table-responsive"><table class=3D"table-no-stripes docutil=
s align-default">
<colgroup>
<col style=3D"width: 49%">
<col style=3D"width: 51%">
</colgroup>
<tbody>
<tr class=3D"row-odd"><td><ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">syn=
cthreads</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">syn=
cthreads_count</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">syn=
cthreads_and</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">syn=
cthread_or</span></code></p></li>
</ul>
</td>
<td><ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">syn=
cwarp</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">thr=
eadfence</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">thr=
eadfence_block</span></code></p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">thr=
eadfence_system</span></code></p></li>
</ul>
</td>
</tr>
</tbody>
</table></div>
<p>For detailed information on these functions, refer to <a class=3D"refere=
nce internal" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compiler=
s/cuda-fortran-prog-guide/index.html#thread-mgmt"><span class=3D"std std-re=
f">Thread Management</span></a>.</p>
<p><strong>SYNCTHREADS</strong></p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">syn=
cthreads</span></code> intrinsic subroutine acts as a barrier synchronizati=
on for all threads in a single thread block; it has no arguments:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell74"><span></span><span class=3D"k">subroutine </span><span cl=
ass=3D"n">syncthreads</span><span class=3D"p">()</span><span class=3D"w"></=
span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell74">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Sometimes threads within a block access the same addresses in shared or =
global memory, thus creating potential read-after-write, write-after-read, =
or write-after-write hazards for some of these memory accesses. To avoid th=
ese potential issues, use <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">syncthreads()</span></code> to specify synchronization poin=
ts in the kernel. This intrinsic acts as a barrier at which all threads in =
the block must wait before any thread is allowed to proceed. Threads within=
 a block cooperate and share data by synchronizing their execution to coord=
inate memory accesses.</p>
<p>Each thread in a thread block pauses at the <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">syncthreads</span></code> call until a=
ll threads have reached that call. If any thread in a thread block issues a=
 call to <code class=3D"docutils literal notranslate"><span class=3D"pre">s=
yncthreads</span></code>, all threads must also reach and execute the same =
call statement, or the kernel fails to complete correctly.</p>
<p><strong>SYNCTHREADS_AND</strong></p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell75"><span></span><span class=3D"kt">integer </span><span clas=
s=3D"n">syncthreads_and</span><span class=3D"p">(</span><span class=3D"n">i=
nt_value</span><span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell75">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">syncthr=
eads_and</span></code>. like <code class=3D"docutils literal notranslate"><=
span class=3D"pre">syncthreads</span></code>, acts as a barrier at which al=
l threads in the block must wait before any thread is allowed to proceed. I=
n addition, <code class=3D"docutils literal notranslate"><span class=3D"pre=
">syncthreads_and</span></code> evaluates the integer argument <em>int_valu=
e</em> for all threads of the block and returns non-zero if and only if <em=
>int_value</em> evaluates to non-zero for <em>all</em> of them.</p>
<p><strong>SYNCTHREADS_COUNT</strong></p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell76"><span></span><span class=3D"kt">integer </span><span clas=
s=3D"n">syncthreads_count</span><span class=3D"p">(</span><span class=3D"n"=
>int_value</span><span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell76">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">syncthr=
eads_count</span></code>, like <code class=3D"docutils literal notranslate"=
><span class=3D"pre">syncthreads</span></code>, acts as a barrier at which =
all threads in the block must wait before any thread is allowed to proceed.=
 In addition, <code class=3D"docutils literal notranslate"><span class=3D"p=
re">syncthreads_count</span></code> evaluates the integer argument <em>int_=
value</em> for all threads of the block and returns the number of threads f=
or which <em>int_value</em> evaluates to non-zero.</p>
<p><strong>SYNCTHREADS_OR</strong></p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell77"><span></span><span class=3D"kt">integer </span><span clas=
s=3D"n">syncthreads_or</span><span class=3D"p">(</span><span class=3D"n">in=
t_value</span><span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell77">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">syncthr=
eads_or</span></code>, like <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">syncthreads</span></code>, acts as a barrier at which all=
 threads in the block must wait before any thread is allowed to proceed. In=
 addition, <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>syncthreads_or</span></code> evaluates the integer argument <em>int_value<=
/em> for all threads of the block and returns non-zero if and only if <em>i=
nt_value</em> evaluates to non-zero for <em>any</em> of them.</p>
<p><strong>SYNCWARP</strong></p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell78"><span></span><span class=3D"k">subroutine </span><span cl=
ass=3D"n">syncwarp</span><span class=3D"p">(</span><span class=3D"n">int_ma=
sk</span><span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell78">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">syncwar=
p</span></code> will cause all executing threads witin a warp, and specifie=
d in the mask argument, to reach a barrier, at which point all threads in t=
he mask must execute <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">syncwarp</span></code> before any thread is allowed to proceed.<=
/p>
<p><strong>Memory Fences</strong></p>
<p>In general, when a thread issues a series of writes to memory in a parti=
cular order, other threads may see the effects of these memory writes in a =
different order. You can use <code class=3D"docutils literal notranslate"><=
span class=3D"pre">threadfence()</span></code>, <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">threadfence_block()</span></code>, an=
d <code class=3D"docutils literal notranslate"><span class=3D"pre">threadfe=
nce_system()</span></code> to create a <em>memory fence</em> to enforce ord=
ering.</p>
<p>For example, suppose you use a kernel to compute the sum of an array of =
N numbers in one call. Each block first sums a subset of the array and stor=
es the result in global memory. When all blocks are done, the last block do=
ne reads each of these partial sums from global memory and sums them to obt=
ain the final result. To determine which block is finished last, each block=
 atomically increments a counter to signal that it is done with computing a=
nd storing its partial sum. If no fence is placed between storing the parti=
al sum and incrementing the counter, the counter might increment before the=
 partial sum is stored.</p>
<p><strong>THREADFENCE</strong></p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell79"><span></span><span class=3D"k">subroutine </span><span cl=
ass=3D"n">threadfence</span><span class=3D"p">()</span><span class=3D"w"></=
span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell79">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">threadf=
ence</span></code> acts as a memory fence, creating a wait. Typically, when=
 a thread issues a series of writes to memory in a particular order, other =
threads may see the effects of these memory writes in a different order. <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">threadfence(=
)</span></code> is one method to enforce a specific order. All global and s=
hared memory accesses made by the calling thread prior to <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">threadfence()</span></code>=
 are visible to:</p>
<ul class=3D"simple">
<li><p>All threads in the thread block for shared memory accesses</p></li>
<li><p>All threads in the device for global memory accesses</p></li>
</ul>
<p><strong>THREADFENCE_BLOCK</strong></p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell80"><span></span><span class=3D"k">subroutine </span><span cl=
ass=3D"n">threadfence_block</span><span class=3D"p">()</span><span class=3D=
"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell80">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">threadf=
ence_block</span></code> acts as a memory fence, creating a wait until all =
global and shared memory accesses made by the calling thread prior to <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">threadfence_blo=
ck()</span></code> are visible to all threads in the thread block for all a=
ccesses.</p>
<p><strong>THREADFENCE_SYSTEM</strong></p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell81"><span></span><span class=3D"k">subroutine </span><span cl=
ass=3D"n">threadfence_system</span><span class=3D"p">()</span><span class=
=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell81">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">threadf=
ence_system</span></code> acts as a memory fence, creating a wait until all=
 global and shared memory accesses made by the calling thread prior to <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">threadfence_sy=
stem()</span></code> are visible to:</p>
<ul class=3D"simple">
<li><p>All threads in the thread block for shared memory accesses</p></li>
<li><p>All threads in the device for global memory accesses</p></li>
<li><p>Host threads for page-locked host memory accesses</p></li>
</ul>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">threadf=
ence_system()</span></code> is only supported by devices of compute capabil=
ity 2.0 or higher.</p>
</section>
<section id=3D"warp-vote-operations">
<h3><span class=3D"section-number">3.6.5. </span>Warp-Vote Operations<a cla=
ss=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/comp=
ilers/cuda-fortran-prog-guide/index.html#warp-vote-operations" title=3D"Per=
malink to this headline">=EF=83=81</a></h3>
<p>New warp-vote and warp match operations have been added to NVIDIA CUDA F=
ortran. The older versions remain for legacy reasons; they will invoke the =
newer functionality with a mask specifying all threads in the warp.</p>
<p><strong>ALLTHREADS</strong></p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">all=
threads</span></code> function is a warp-vote operation with a single scala=
r logical argument:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell82"><span></span><span class=3D"k">if</span><span class=3D"p"=
>(</span><span class=3D"w"> </span><span class=3D"n">allthreads</span><span=
 class=3D"p">(</span><span class=3D"n">a</span><span class=3D"p">(</span><s=
pan class=3D"n">i</span><span class=3D"p">)</span><span class=3D"o">&lt;</s=
pan><span class=3D"mf">0.0</span><span class=3D"p">)</span><span class=3D"w=
"> </span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"n">allneg</span><span class=3D"w"> </span><span class=3D"o">=3D</span><=
span class=3D"w"> </span><span class=3D"p">.</span><span class=3D"n">true</=
span><span class=3D"p">.</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell82">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>The function <code class=3D"docutils literal notranslate"><span class=3D=
"pre">allthreads</span></code> evaluates its argument for all threads in th=
e current warp. The value of the function is <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">.true.</span></code> only if the value o=
f the argument is <code class=3D"docutils literal notranslate"><span class=
=3D"pre">.true.</span></code> for all threads in the warp.</p>
<p><strong>ANYTHREAD</strong></p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">any=
thread</span></code> function is a warp-vote operation with a single scalar=
 logical argument:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell83"><span></span><span class=3D"k">if</span><span class=3D"p"=
>(</span><span class=3D"w"> </span><span class=3D"n">anythread</span><span =
class=3D"p">(</span><span class=3D"n">a</span><span class=3D"p">(</span><sp=
an class=3D"n">i</span><span class=3D"p">)</span><span class=3D"o">&lt;</sp=
an><span class=3D"mf">0.0</span><span class=3D"p">)</span><span class=3D"w"=
> </span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D=
"n">allneg</span><span class=3D"w"> </span><span class=3D"o">=3D</span><spa=
n class=3D"w"> </span><span class=3D"p">.</span><span class=3D"n">true</spa=
n><span class=3D"p">.</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell83">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>The function <code class=3D"docutils literal notranslate"><span class=3D=
"pre">anythread</span></code> evaluates its argument for all threads in the=
 current warp. The value of the function is <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">.false.</span></code> only if the value o=
f the argument is <code class=3D"docutils literal notranslate"><span class=
=3D"pre">.false.</span></code> for all threads in the warp.</p>
<p><strong>BALLOT</strong></p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">bal=
lot</span></code> function is a warp-vote operation with a single integer a=
rgument:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell84"><span></span><span class=3D"n">unsigned</span><span class=
=3D"w"> </span><span class=3D"kt">integer </span><span class=3D"n">ballot</=
span><span class=3D"p">(</span><span class=3D"n">int_value</span><span clas=
s=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell84">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>The function <code class=3D"docutils literal notranslate"><span class=3D=
"pre">ballot</span></code> evaluates the argument <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">int_value</span></code> for all thr=
eads of the warp and returns an integer whose Nth bit is set if and only if=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">int_value=
</span></code> evaluates to non-zero for the Nth thread of the warp.</p>
<p>This function is only supported by devices of compute capability 2.0.</p=
>
<p><strong>Example:</strong></p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell85"><span></span><span class=3D"k">if</span><span class=3D"p"=
>(</span><span class=3D"w"> </span><span class=3D"n">ballot</span><span cla=
ss=3D"p">(</span><span class=3D"n">int_value</span><span class=3D"p">)</spa=
n><span class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"> </=
span><span class=3D"n">allneg</span><span class=3D"w"> </span><span class=
=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"p">.</span><span =
class=3D"n">true</span><span class=3D"p">.</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell85">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><strong>ACTIVEMASK</strong></p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell86"><span></span><span class=3D"n">unsigned</span><span class=
=3D"w"> </span><span class=3D"kt">integer </span><span class=3D"n">activema=
sk</span><span class=3D"p">()</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell86">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">act=
ivemask</span></code> function returns a 32-bit integer mask of all the cur=
rently active threads in the calling warp. The Nth bit is set if the Nth la=
ne in the warp is active when <code class=3D"docutils literal notranslate">=
<span class=3D"pre">activemask</span></code> is called.</p>
<p><strong>ALL_SYNC</strong></p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell87"><span></span><span class=3D"kt">integer </span><span clas=
s=3D"n">all_sync</span><span class=3D"p">(</span><span class=3D"n">int_mask=
</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n=
">int_predicate</span><span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell87">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">all=
_sync</span></code> function evaluates the predicate argument for all non-e=
xited threads in the mask and returns non-zero if the predicate is non-zero=
 for all threads.</p>
<p><strong>ANY_SYNC</strong></p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell88"><span></span><span class=3D"kt">integer </span><span clas=
s=3D"n">any_sync</span><span class=3D"p">(</span><span class=3D"n">int_mask=
</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n=
">int_predicate</span><span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell88">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">any=
_sync</span></code> function evaluates the predicate argument for all non-e=
xited threads in the mask and returns non-zero if the predicate is non-zero=
 for any of them.</p>
<p><strong>BALLOT_SYNC</strong></p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell89"><span></span><span class=3D"n">unsigned</span><span class=
=3D"w"> </span><span class=3D"kt">integer </span><span class=3D"n">ballot_s=
ync</span><span class=3D"p">(</span><span class=3D"n">int_mask</span><span =
class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">int_predica=
te</span><span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell89">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">bal=
lot_sync</span></code> function evaluates the predicate argument for all no=
n-exited threads set by the mask in the calling warp. The Nth bit is set in=
 the Nth lane if the predicate is non-zero for the Nth thread.</p>
<p><strong>MATCH_ALL_SYNC</strong></p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell90"><span></span><span class=3D"n">unsigned</span><span class=
=3D"w"> </span><span class=3D"kt">integer </span><span class=3D"n">match_al=
l_sync</span><span class=3D"p">(</span><span class=3D"n">int_mask</span><sp=
an class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">value</s=
pan><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">i=
nt_predicate</span><span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell90">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">mat=
ch_all_sync</span></code> function performs a broadcast and compare of the =
value for all threads within a warp specified by the mask argument. It retu=
rns <code class=3D"docutils literal notranslate"><span class=3D"pre">int_ma=
sk</span></code> if all threads have the same value, otherwise 0. The <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">int_predicate</=
span></code> is set to true in the former case, false in the latter. This f=
unction currently accepts the type of <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">value</span></code> to be integer(4), integer(8=
), real(4), or real(8).</p>
<p><strong>MATCH_ANY_SYNC</strong></p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell91"><span></span><span class=3D"n">unsigned</span><span class=
=3D"w"> </span><span class=3D"kt">integer </span><span class=3D"n">match_an=
y_sync</span><span class=3D"p">(</span><span class=3D"n">int_mask</span><sp=
an class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">value</s=
pan><span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell91">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">mat=
ch_any_sync</span></code> function performs a broadcast and compare of the =
value for all threads within a warp specified by the mask argument. It retu=
rns a mask of threads that have the same value as <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">value</span></code>. This function =
currently accepts the type of <code class=3D"docutils literal notranslate">=
<span class=3D"pre">value</span></code> to be integer(4), integer(8), real(=
4), or real(8).</p>
</section>
<section id=3D"load-and-store-functions-using-cache-hints">
<h3><span class=3D"section-number">3.6.6. </span>Load and Store Functions U=
sing Cache Hints<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc=
-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#load-and-sto=
re-functions-using-cache-hints" title=3D"Permalink to this headline">=EF=83=
=81</a></h3>
<p>These load and store functions can provide finer control over the cachin=
g behavior and act as optimization hints. They do not change the memory con=
sistency behavior of the program. These functions and subroutines can opera=
te on most supported data types, including integer(4), integer(8), real(2),=
 real(4), real(8), complex(4), and complex(8). There is also support for in=
teger(4) and real(4) of dimension(4), and integer(8) and real(8) of dimensi=
on(2), i.e. 128-bit loads and stores..</p>
<p>The cache load functions are:</p>
<div class=3D"wy-table-responsive"><table class=3D"table-no-stripes docutil=
s align-default" id=3D"id11">
<caption><span class=3D"caption-text">Table 9. Load Functions Using Cache H=
ints</span><a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/=
archive/25.3/compilers/cuda-fortran-prog-guide/index.html#id11" title=3D"Pe=
rmalink to this table">=EF=83=81</a></caption>
<colgroup>
<col style=3D"width: 42%">
<col style=3D"width: 58%">
</colgroup>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>Function</p></th>
<th class=3D"head"><p>Caching Behavior</p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">value</span> <span class=3D"pre">=3D</span> <span class=
=3D"pre">__ldca(mem)</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Cac=
he</span> <span class=3D"pre">at</span> <span class=3D"pre">all</span> <spa=
n class=3D"pre">levels</span></code></p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">value</span> <span class=3D"pre">=3D</span> <span class=
=3D"pre">__ldcg(mem)</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Cac=
he</span> <span class=3D"pre">at</span> <span class=3D"pre">global</span> <=
span class=3D"pre">level</span></code></p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">value</span> <span class=3D"pre">=3D</span> <span class=
=3D"pre">__ldcs(mem)</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Cac=
he</span> <span class=3D"pre">streaming,</span> <span class=3D"pre">accesse=
d</span> <span class=3D"pre">once</span></code></p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">value</span> <span class=3D"pre">=3D</span> <span class=
=3D"pre">__ldlu(mem)</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Las=
t</span> <span class=3D"pre">use</span></code></p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">value</span> <span class=3D"pre">=3D</span> <span class=
=3D"pre">__ldcv(mem)</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Don=
't</span> <span class=3D"pre">cache,</span> <span class=3D"pre">treat</span=
> <span class=3D"pre">as</span> <span class=3D"pre">volatile</span></code><=
/p></td>
</tr>
</tbody>
</table></div>
<p>The cache store subroutines are:</p>
<div class=3D"wy-table-responsive"><table class=3D"table-no-stripes docutil=
s align-default" id=3D"id12">
<caption><span class=3D"caption-text">Table 10. Store Subroutines Using Cac=
he Hints</span><a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-=
sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#id12" title=
=3D"Permalink to this table">=EF=83=81</a></caption>
<colgroup>
<col style=3D"width: 42%">
<col style=3D"width: 58%">
</colgroup>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>Subroutine</p></th>
<th class=3D"head"><p>Caching Behavior</p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">call</span> <span class=3D"pre">__stwb(mem,</span> <spa=
n class=3D"pre">value)</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Cac=
he</span> <span class=3D"pre">write-back</span> <span class=3D"pre">all</sp=
an> <span class=3D"pre">coherent</span> <span class=3D"pre">levels</span></=
code></p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">call</span> <span class=3D"pre">__stcg(mem,</span> <span=
 class=3D"pre">value)</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Cac=
he</span> <span class=3D"pre">at</span> <span class=3D"pre">global</span> <=
span class=3D"pre">level</span></code></p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">call</span> <span class=3D"pre">__stcs(mem,</span> <spa=
n class=3D"pre">value)</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Cac=
he</span> <span class=3D"pre">streaming,</span> <span class=3D"pre">accesse=
d</span> <span class=3D"pre">once</span></code></p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">call</span> <span class=3D"pre">__stwt(mem,</span> <span=
 class=3D"pre">value)</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Cac=
he</span> <span class=3D"pre">write-through</span></code></p></td>
</tr>
</tbody>
</table></div>
</section>
<section id=3D"load-and-store-functions-using-bulk-tma-operations">
<h3><span class=3D"section-number">3.6.7. </span>Load and Store Functions U=
sing Bulk TMA Operations<a class=3D"headerlink" href=3D"https://docs.nvidia=
.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#load=
-and-store-functions-using-bulk-tma-operations" title=3D"Permalink to this =
headline">=EF=83=81</a></h3>
<p>Starting with the NVHPC 25.3 release, initial support for asynchronous b=
ulk load and store operations is available in CUDA Fortran.  The TMA operat=
ions listed in this section are supported on Hopper (cc90) and newer archit=
ectures.  The load operations are typically issued by a single CUDA thread,=
 and load data into a section of shared memory.  Barriers are needed to ens=
ure the data has arrived and can be safely accessed.  These barriers are de=
clared as integer(8), shared variables, and are often the first argument to=
 the runtime API calls.  The store operations are similarly launched by a s=
ingle CUDA thread, but do not require a barrier.  Here is a simple vector a=
dd operation in CUDA Fortran using these new library functions.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell92"><span></span><span class=3D"n">attributes</span><span cla=
ss=3D"p">(</span><span class=3D"n">global</span><span class=3D"p">)</span><=
span class=3D"w"> </span><span class=3D"k">subroutine </span><span class=3D=
"n">stream_add</span><span class=3D"p">(</span><span class=3D"n">c</span><s=
pan class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">a</span=
><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">b</s=
pan><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">n=
</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">integer</span><span class=3D"=
p">,</span><span class=3D"w"> </span><span class=3D"k">value</span><span cl=
ass=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><sp=
an class=3D"n">n</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
(</span><span class=3D"mi">8</span><span class=3D"p">),</span><span class=
=3D"w"> </span><span class=3D"n">device</span><span class=3D"w"> </span><sp=
an class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">c</spa=
n><span class=3D"p">(</span><span class=3D"n">n</span><span class=3D"p">),<=
/span><span class=3D"w"> </span><span class=3D"n">a</span><span class=3D"p"=
>(</span><span class=3D"n">n</span><span class=3D"p">),</span><span class=
=3D"w"> </span><span class=3D"n">b</span><span class=3D"p">(</span><span cl=
ass=3D"n">n</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
(</span><span class=3D"mi">8</span><span class=3D"p">),</span><span class=
=3D"w"> </span><span class=3D"n">shared</span><span class=3D"w"> </span><sp=
an class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">tmpa</=
span><span class=3D"p">(</span><span class=3D"mi">1024</span><span class=3D=
"p">),</span><span class=3D"w"> </span><span class=3D"n">tmpb</span><span c=
lass=3D"p">(</span><span class=3D"mi">1024</span><span class=3D"p">)</span>=
<span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">integer</span><span class=3D"=
p">(</span><span class=3D"mi">8</span><span class=3D"p">),</span><span clas=
s=3D"w"> </span><span class=3D"n">shared</span><span class=3D"w"> </span><s=
pan class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">barri=
er1</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">barrier2</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">integer</span><span class=3D"=
p">(</span><span class=3D"mi">8</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">token1</span><span class=3D"p">,</span><span class=3D"w"> </spa=
n><span class=3D"n">token2</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">j</span><span class=3D"p">,</span><span class=3D"w"> </span><sp=
an class=3D"n">elem_count</span><span class=3D"w"></span>

<span class=3D"w">  </span><span class=3D"n">j</span><span class=3D"w"> </s=
pan><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n"=
>threadIdx</span><span class=3D"p">%</span><span class=3D"n">x</span><span =
class=3D"w"> </span><span class=3D"o">+</span><span class=3D"w"> </span><sp=
an class=3D"p">(</span><span class=3D"n">blockIdx</span><span class=3D"p">%=
</span><span class=3D"n">x</span><span class=3D"o">-</span><span class=3D"m=
i">1</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"o">*</span><span class=3D"w"> </span><span class=3D"mi">1024</span><spa=
n class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">if</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"n">threadIdx</span><span clas=
s=3D"p">%</span><span class=3D"n">x</span><span class=3D"w"> </span><span c=
lass=3D"o">=3D=3D</span><span class=3D"w"> </span><span class=3D"mi">1</spa=
n><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"k">the=
n</span>
<span class=3D"k">    call </span><span class=3D"n">barrier_init</span><spa=
n class=3D"p">(</span><span class=3D"n">barrier1</span><span class=3D"p">,<=
/span><span class=3D"w"> </span><span class=3D"n">blockDim</span><span clas=
s=3D"p">%</span><span class=3D"n">x</span><span class=3D"p">)</span><span c=
lass=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">call </span><span class=3D"n=
">barrier_init</span><span class=3D"p">(</span><span class=3D"n">barrier2</=
span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">=
blockDim</span><span class=3D"p">%</span><span class=3D"n">x</span><span cl=
ass=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">end if</span>
<span class=3D"k">  call </span><span class=3D"n">syncthreads</span><span c=
lass=3D"p">()</span><span class=3D"w">  </span><span class=3D"c">! All thre=
ads see SM barriers</span>

<span class=3D"w">  </span><span class=3D"c">! First thread does the bulk l=
oad, sets element count</span>
<span class=3D"w">  </span><span class=3D"k">if</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"n">threadIdx</span><span clas=
s=3D"p">%</span><span class=3D"n">x</span><span class=3D"w"> </span><span c=
lass=3D"o">=3D=3D</span><span class=3D"w"> </span><span class=3D"mi">1</spa=
n><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"k">the=
n</span>
<span class=3D"k">    </span><span class=3D"n">elem_count</span><span class=
=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span =
class=3D"nb">min</span><span class=3D"p">(</span><span class=3D"mi">1024</s=
pan><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">n=
</span><span class=3D"o">-</span><span class=3D"n">j</span><span class=3D"o=
">+</span><span class=3D"mi">1</span><span class=3D"p">)</span><span class=
=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">call </span><span class=3D"n=
">tma_bulk_load</span><span class=3D"p">(</span><span class=3D"n">barrier1<=
/span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n"=
>a</span><span class=3D"p">(</span><span class=3D"n">j</span><span class=3D=
"p">),</span><span class=3D"w"> </span><span class=3D"n">tmpa</span><span c=
lass=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">elem_count</=
span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">call </span><span class=3D"n=
">tma_bulk_load</span><span class=3D"p">(</span><span class=3D"n">barrier2<=
/span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n"=
>b</span><span class=3D"p">(</span><span class=3D"n">j</span><span class=3D=
"p">),</span><span class=3D"w"> </span><span class=3D"n">tmpb</span><span c=
lass=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">elem_count</=
span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">end if</span>
<span class=3D"k">  call </span><span class=3D"n">syncthreads</span><span c=
lass=3D"p">()</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">token1</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">barrier_arrive</span><span class=3D"p">(</span><span class=3D"n">bar=
rier1</span><span class=3D"p">)</span><span class=3D"w">  </span><span clas=
s=3D"c">! All threads arrive</span>
<span class=3D"w">  </span><span class=3D"n">token2</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">barrier_arrive</span><span class=3D"p">(</span><span class=3D"n">bar=
rier2</span><span class=3D"p">)</span><span class=3D"w">  </span><span clas=
s=3D"c">! Return a token to wait upon</span>

<span class=3D"w">  </span><span class=3D"c">! These runtime functions spin=
 and wait, return 1 on success</span>
<span class=3D"w">  </span><span class=3D"k">if</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"n">barrier_try_wait</span><sp=
an class=3D"p">(</span><span class=3D"n">barrier1</span><span class=3D"p">,=
</span><span class=3D"w"> </span><span class=3D"n">token1</span><span class=
=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">.</span><span cl=
ass=3D"n">eq</span><span class=3D"p">.</span><span class=3D"w"> </span><spa=
n class=3D"mi">0</span><span class=3D"p">)</span><span class=3D"w"> </span>=
<span class=3D"k">return</span>
<span class=3D"k">  if</span><span class=3D"w"> </span><span class=3D"p">(<=
/span><span class=3D"n">barrier_try_wait</span><span class=3D"p">(</span><s=
pan class=3D"n">barrier2</span><span class=3D"p">,</span><span class=3D"w">=
 </span><span class=3D"n">token2</span><span class=3D"p">)</span><span clas=
s=3D"w"> </span><span class=3D"p">.</span><span class=3D"n">eq</span><span =
class=3D"p">.</span><span class=3D"w"> </span><span class=3D"mi">0</span><s=
pan class=3D"p">)</span><span class=3D"w"> </span><span class=3D"k">return<=
/span>

<span class=3D"k">  do </span><span class=3D"n">i</span><span class=3D"w"> =
</span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D=
"n">threadIdx</span><span class=3D"p">%</span><span class=3D"n">x</span><sp=
an class=3D"p">,</span><span class=3D"w"> </span><span class=3D"mi">1024</s=
pan><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">b=
lockDim</span><span class=3D"p">%</span><span class=3D"n">x</span><span cla=
ss=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">tmpa</span><span class=3D"p"=
>(</span><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D=
"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span cla=
ss=3D"n">tmpa</span><span class=3D"p">(</span><span class=3D"n">i</span><sp=
an class=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">+</span>=
<span class=3D"w"> </span><span class=3D"n">tmpb</span><span class=3D"p">(<=
/span><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"w"=
></span>
<span class=3D"w">  </span><span class=3D"k">end do</span>
<span class=3D"k">  call </span><span class=3D"n">fence_proxy_async</span><=
span class=3D"p">()</span><span class=3D"w">  </span><span class=3D"c">! En=
sure readiness for store</span>
<span class=3D"w">  </span><span class=3D"k">call </span><span class=3D"n">=
syncthreads</span><span class=3D"p">()</span><span class=3D"w"></span>

<span class=3D"w">  </span><span class=3D"k">if</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"n">threadIdx</span><span clas=
s=3D"p">%</span><span class=3D"n">x</span><span class=3D"w"> </span><span c=
lass=3D"o">=3D=3D</span><span class=3D"w"> </span><span class=3D"mi">1</spa=
n><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"k">the=
n</span>
<span class=3D"k">    call </span><span class=3D"n">tma_bulk_store</span><s=
pan class=3D"p">(</span><span class=3D"n">tmpa</span><span class=3D"p">,</s=
pan><span class=3D"w"> </span><span class=3D"n">c</span><span class=3D"p">(=
</span><span class=3D"n">j</span><span class=3D"p">),</span><span class=3D"=
w"> </span><span class=3D"n">elem_count</span><span class=3D"p">)</span><sp=
an class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">end if</span>
<span class=3D"k">  return</span>
<span class=3D"k">end subroutine</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell92">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Another version of the load and store functions take the count in terms =
of bytes, and can take any type for the source and destination.  There are =
also wait functions that the user can provide the spin loop for:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell93"><span></span><span class=3D"n">j</span><span class=3D"w">=
 </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">threadIdx</span><span class=3D"p">%</span><span class=3D"n">x</span>=
<span class=3D"w"> </span><span class=3D"o">+</span><span class=3D"w"> </sp=
an><span class=3D"p">(</span><span class=3D"n">blockIdx</span><span class=
=3D"p">%</span><span class=3D"n">x</span><span class=3D"o">-</span><span cl=
ass=3D"mi">1</span><span class=3D"p">)</span><span class=3D"w"> </span><spa=
n class=3D"o">*</span><span class=3D"w"> </span><span class=3D"mi">1024</sp=
an><span class=3D"w"></span>
<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">threadIdx</span><span class=3D"p">%</span><span class=
=3D"n">x</span><span class=3D"w"> </span><span class=3D"o">=3D=3D</span><sp=
an class=3D"w"> </span><span class=3D"mi">1</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"k">then</span>
<span class=3D"k">  call </span><span class=3D"n">barrier_init</span><span =
class=3D"p">(</span><span class=3D"n">barrier1</span><span class=3D"p">,</s=
pan><span class=3D"w"> </span><span class=3D"n">blockDim</span><span class=
=3D"p">%</span><span class=3D"n">x</span><span class=3D"p">)</span><span cl=
ass=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">call </span><span class=3D"n">=
barrier_init</span><span class=3D"p">(</span><span class=3D"n">barrier2</sp=
an><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">bl=
ockDim</span><span class=3D"p">%</span><span class=3D"n">x</span><span clas=
s=3D"p">)</span><span class=3D"w"></span>
<span class=3D"k">end if</span>
<span class=3D"k">call </span><span class=3D"n">syncthreads</span><span cla=
ss=3D"p">()</span><span class=3D"w"></span>

<span class=3D"c">! First thread does the bulk load, sets byte count</span>
<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">threadIdx</span><span class=3D"p">%</span><span class=
=3D"n">x</span><span class=3D"w"> </span><span class=3D"o">=3D=3D</span><sp=
an class=3D"w"> </span><span class=3D"mi">1</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"k">then</span>
<span class=3D"k">  </span><span class=3D"n">tx_count</span><span class=3D"=
w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span clas=
s=3D"nb">min</span><span class=3D"p">(</span><span class=3D"mi">1024</span>=
<span class=3D"o">*</span><span class=3D"mi">8</span><span class=3D"p">,</s=
pan><span class=3D"w"> </span><span class=3D"p">(</span><span class=3D"n">n=
</span><span class=3D"o">-</span><span class=3D"n">j</span><span class=3D"o=
">+</span><span class=3D"mi">1</span><span class=3D"p">)</span><span class=
=3D"o">*</span><span class=3D"mi">8</span><span class=3D"p">)</span><span c=
lass=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">call </span><span class=3D"n">=
tma_bulk_g2s</span><span class=3D"p">(</span><span class=3D"n">barrier1</sp=
an><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">a<=
/span><span class=3D"p">(</span><span class=3D"n">j</span><span class=3D"p"=
>),</span><span class=3D"w"> </span><span class=3D"n">tmpa</span><span clas=
s=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">tx_count</span>=
<span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">call </span><span class=3D"n">=
tma_bulk_g2s</span><span class=3D"p">(</span><span class=3D"n">barrier2</sp=
an><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">b<=
/span><span class=3D"p">(</span><span class=3D"n">j</span><span class=3D"p"=
>),</span><span class=3D"w"> </span><span class=3D"n">tmpb</span><span clas=
s=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">tx_count</span>=
<span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"k">else</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"c">! Other threads have a byte co=
unt of zero</span>
<span class=3D"w">  </span><span class=3D"n">tx_count</span><span class=3D"=
w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span clas=
s=3D"mi">0</span><span class=3D"w"></span>
<span class=3D"k">end if</span>
<span class=3D"k">call </span><span class=3D"n">syncthreads</span><span cla=
ss=3D"p">()</span><span class=3D"w"></span>
<span class=3D"n">token1</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">barrier_arrive</span>=
<span class=3D"p">(</span><span class=3D"n">barrier1</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"n">tx_count</span><span =
class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">token2</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">barrier_arrive</span>=
<span class=3D"p">(</span><span class=3D"n">barrier2</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"n">tx_count</span><span =
class=3D"p">)</span><span class=3D"w"></span>

<span class=3D"c">! Loop until condition</span>
<span class=3D"k">do</span>
<span class=3D"k">  if</span><span class=3D"w"> </span><span class=3D"p">(<=
/span><span class=3D"n">barrier_try_wait_sleep</span><span class=3D"p">(</s=
pan><span class=3D"n">barrier1</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">token1</span><span class=3D"p">,</span><sp=
an class=3D"w"> </span><span class=3D"mi">1000000</span><span class=3D"p">)=
</span><span class=3D"w"> </span><span class=3D"p">.</span><span class=3D"n=
">ne</span><span class=3D"p">.</span><span class=3D"w"> </span><span class=
=3D"mi">0</span><span class=3D"p">)</span><span class=3D"w"> </span><span c=
lass=3D"k">exit</span>
<span class=3D"k">end do</span>

<span class=3D"k">do</span>
<span class=3D"k">  if</span><span class=3D"w"> </span><span class=3D"p">(<=
/span><span class=3D"n">barrier_try_wait_sleep</span><span class=3D"p">(</s=
pan><span class=3D"n">barrier2</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">token2</span><span class=3D"p">,</span><sp=
an class=3D"w"> </span><span class=3D"mi">1000000</span><span class=3D"p">)=
</span><span class=3D"w"> </span><span class=3D"p">.</span><span class=3D"n=
">ne</span><span class=3D"p">.</span><span class=3D"w"> </span><span class=
=3D"mi">0</span><span class=3D"p">)</span><span class=3D"w"> </span><span c=
lass=3D"k">exit</span>
<span class=3D"k">end do</span>

<span class=3D"k">do </span><span class=3D"n">i</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n=
">threadIdx</span><span class=3D"p">%</span><span class=3D"n">x</span><span=
 class=3D"p">,</span><span class=3D"w"> </span><span class=3D"mi">1024</spa=
n><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">blo=
ckDim</span><span class=3D"p">%</span><span class=3D"n">x</span><span class=
=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">tmpa</span><span class=3D"p">(=
</span><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"w=
"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">tmpa</span><span class=3D"p">(</span><span class=3D"n">i</span><span=
 class=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">+</span><s=
pan class=3D"w"> </span><span class=3D"n">tmpb</span><span class=3D"p">(</s=
pan><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"w"><=
/span>
<span class=3D"k">end do</span>
<span class=3D"k">call </span><span class=3D"n">fence_proxy_async</span><sp=
an class=3D"p">()</span><span class=3D"w"></span>
<span class=3D"k">call </span><span class=3D"n">syncthreads</span><span cla=
ss=3D"p">()</span><span class=3D"w"></span>

<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">threadIdx</span><span class=3D"p">%</span><span class=
=3D"n">x</span><span class=3D"w"> </span><span class=3D"o">=3D=3D</span><sp=
an class=3D"w"> </span><span class=3D"mi">1</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"k">then</span>
<span class=3D"k">  call </span><span class=3D"n">tma_bulk_s2g</span><span =
class=3D"p">(</span><span class=3D"n">tmpa</span><span class=3D"p">,</span>=
<span class=3D"w"> </span><span class=3D"n">c</span><span class=3D"p">(</sp=
an><span class=3D"n">j</span><span class=3D"p">),</span><span class=3D"w"> =
</span><span class=3D"n">tx_count</span><span class=3D"p">)</span><span cla=
ss=3D"w"></span>
<span class=3D"k">end if</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell93">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>There are other possible variations of these calls which may be added in=
 future releases.  The set that is supported initially are summarized in th=
e following tables.</p>
<div class=3D"wy-table-responsive"><table class=3D"table-no-stripes docutil=
s align-default" id=3D"id13">
<caption><span class=3D"caption-text">Table 11. TMA Subroutines</span><a cl=
ass=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/com=
pilers/cuda-fortran-prog-guide/index.html#id13" title=3D"Permalink to this =
table">=EF=83=81</a></caption>
<colgroup>
<col style=3D"width: 54%">
<col style=3D"width: 46%">
</colgroup>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>Subroutine</p></th>
<th class=3D"head"><p>Operation</p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">call</span> <span class=3D"pre">barrier_init(barrier,</=
span> <span class=3D"pre">count)</span></code></p></td>
<td><p>Initialize the barrier object with
the number of threads participating</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">call</span> <span class=3D"pre">tma_bulk_g2s(barrier,</s=
pan> <span class=3D"pre">src,</span> <span class=3D"pre">dst,</span> <span =
class=3D"pre">nbytes)</span></code></p></td>
<td><p>General bulk load from global memory
to shared memory, count is in bytes</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">call</span> <span class=3D"pre">tma_bulk_load(barrier,<=
/span> <span class=3D"pre">src,</span> <span class=3D"pre">dst,</span> <spa=
n class=3D"pre">nelems)</span></code></p></td>
<td><p>Type-specific bulk load from global mem
to shared mem, count is in elements</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">call</span> <span class=3D"pre">tma_bulk_s2g(src,</span>=
 <span class=3D"pre">dst,</span> <span class=3D"pre">nbytes)</span></code><=
/p></td>
<td><p>General bulk store from shared memory
to global memory, count is in bytes</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">call</span> <span class=3D"pre">tma_bulk_store(src,</sp=
an> <span class=3D"pre">dst,</span> <span class=3D"pre">nelems)</span></cod=
e></p></td>
<td><p>Type-specific bulk store from shared mem
to global mem, count is in elements</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">call</span> <span class=3D"pre">fence_proxy_async()</spa=
n></code></p></td>
<td><p>Synchronize shared memory and TMA engine;
also called as part of barrier_init()</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">call</span> <span class=3D"pre">tma_bulk_commit_group()=
</span></code></p></td>
<td><p>Called as part of these bulk store
operations</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">call</span> <span class=3D"pre">tma_bulk_wait_group()</s=
pan></code></p></td>
<td><p>Called as part of these bulk store
operations</p></td>
</tr>
</tbody>
</table></div>
<div class=3D"wy-table-responsive"><table class=3D"table-no-stripes docutil=
s align-default" id=3D"id14">
<caption><span class=3D"caption-text">Table 12. TMA Functions</span><a clas=
s=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compi=
lers/cuda-fortran-prog-guide/index.html#id14" title=3D"Permalink to this ta=
ble">=EF=83=81</a></caption>
<colgroup>
<col style=3D"width: 60%">
<col style=3D"width: 40%">
</colgroup>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>Function</p></th>
<th class=3D"head"><p>Operation</p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">token</span> <span class=3D"pre">=3D</span> <span class=
=3D"pre">barrier_arrive(barrier)</span></code></p></td>
<td><p>All threads arrive on the barrier
which returns an integer(8) token</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">token</span> <span class=3D"pre">=3D</span> <span class=
=3D"pre">barrier_arrive(barrier,</span> <span class=3D"pre">count)</span></=
code></p></td>
<td><p>Alternate form in which the user
provides the transaction count</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">istat</span> <span class=3D"pre">=3D</span> <span class=
=3D"pre">barrier_try_wait(barrier,</span> <span class=3D"pre">token)</span>=
</code></p></td>
<td><p>Call to wait in the runtime function
for data to arrive</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">istat</span> <span class=3D"pre">=3D</span> <span class=
=3D"pre">barrier_try_wait_sleep(barrier,</span> <span class=3D"pre">token,<=
/span> <span class=3D"pre">ns)</span></code></p></td>
<td><p>Call to wait with a specified time
in nanoseconds, user provides wait
loop</p></td>
</tr>
</tbody>
</table></div>
</section>
<section id=3D"atomic-functions">
<h3><span class=3D"section-number">3.6.8. </span>Atomic Functions<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#atomic-functions" title=3D"Permalink=
 to this headline">=EF=83=81</a></h3>
<p>The atomic functions read and write the value of their first operand, wh=
ich must be a variable or array element in shared memory (with the shared a=
ttribute) or in device global memory (with the device attribute). Atomic fu=
nctions are only supported by devices with compute capability 1.1 and highe=
r. Compute capability 1.2 or higher is required if the first argument has t=
he shared attribute. Certain real(4) and real(8) atomic functions may requi=
re compute capability 2.0 and higher.</p>
<p>The atomic functions return correct values even if multiple threads in t=
he same or different thread blocks try to read and update the same location=
 without any synchronization.</p>
<p><strong>Arithmetic and Bitwise Atomic Functions</strong></p>
<p>These atomic functions read and return the value of the first argument. =
They also combine that value with the value of the second argument, dependi=
ng on the function, and store the combined value back to the first argument=
 location. For atomicadd, atomicsub, atomicmax, atomicmin, and atomicexch, =
the data types may be integer(4), integer(8), real(4), or real(8). For atom=
icand, atomicor, and atomicxor, only integer(4) arguments are supported.</p=
>
<div class=3D"admonition note">
<p class=3D"admonition-title">Note</p>
<p>The return value for each of these functions is the first argument, <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">mem</span></co=
de>.</p>
</div>
<p>These functions are:</p>
<div class=3D"wy-table-responsive"><table class=3D"table-no-stripes docutil=
s align-default" id=3D"id15">
<caption><span class=3D"caption-text">Table 13. Arithmetic and Bitwise Atom=
ic Functions</span><a class=3D"headerlink" href=3D"https://docs.nvidia.com/=
hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#id15" tit=
le=3D"Permalink to this table">=EF=83=81</a></caption>
<colgroup>
<col style=3D"width: 53%">
<col style=3D"width: 47%">
</colgroup>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>Function</p></th>
<th class=3D"head"><p>Additional Atomic Update</p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">atomicadd(</span> <span class=3D"pre">mem,</span> <span=
 class=3D"pre">value</span> <span class=3D"pre">)</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">mem=
</span> <span class=3D"pre">=3D</span> <span class=3D"pre">mem</span> <span=
 class=3D"pre">+</span> <span class=3D"pre">value</span></code></p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">atomicsub(</span> <span class=3D"pre">mem,</span> <span =
class=3D"pre">value</span> <span class=3D"pre">)</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">mem=
</span> <span class=3D"pre">=3D</span> <span class=3D"pre">mem</span> <span=
 class=3D"pre">=E2=88=92</span> <span class=3D"pre">value</span></code></p>=
</td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">atomicmax(</span> <span class=3D"pre">mem,</span> <span=
 class=3D"pre">value</span> <span class=3D"pre">)</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">mem=
</span> <span class=3D"pre">=3D</span> <span class=3D"pre">max(mem,value)</=
span></code></p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">atomicmin(</span> <span class=3D"pre">mem,</span> <span =
class=3D"pre">value</span> <span class=3D"pre">)</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">mem=
</span> <span class=3D"pre">=3D</span> <span class=3D"pre">min(mem,value)</=
span></code></p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">atomicand(</span> <span class=3D"pre">mem,</span> <span=
 class=3D"pre">value</span> <span class=3D"pre">)</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">mem=
</span> <span class=3D"pre">=3D</span> <span class=3D"pre">iand(mem,value)<=
/span></code></p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">atomicor(</span> <span class=3D"pre">mem,</span> <span c=
lass=3D"pre">value</span> <span class=3D"pre">)</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">mem=
</span> <span class=3D"pre">=3D</span> <span class=3D"pre">ior(mem,value)</=
span></code></p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">atomicxor(</span> <span class=3D"pre">mem,</span> <span=
 class=3D"pre">value</span> <span class=3D"pre">)</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">mem=
</span> <span class=3D"pre">=3D</span> <span class=3D"pre">ieor(mem,value)<=
/span></code></p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">atomicexch(</span> <span class=3D"pre">mem,</span> <span=
 class=3D"pre">value</span> <span class=3D"pre">)</span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">mem=
</span> <span class=3D"pre">=3D</span> <span class=3D"pre">value</span></co=
de></p></td>
</tr>
</tbody>
</table></div>
<p><strong>Counting Atomic Functions</strong></p>
<p>These atomic functions read and return the value of the first argument. =
They also compare the first argument with the second argument, and stores a=
 new value back to the first argument location, depending on the result of =
the comparison. These functions are intended to implement circular counters=
, counting up to or down from a maximum value specified in the second argum=
ent. Both arguments must be of type integer(kind=3D4).</p>
<div class=3D"admonition note">
<p class=3D"admonition-title">Note</p>
<p>The return value for each of these functions is the first argument, <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">mem</span></co=
de>.</p>
</div>
<p>These functions are:</p>
<div class=3D"wy-table-responsive"><table class=3D"table-no-stripes docutil=
s align-default" id=3D"id16">
<caption><span class=3D"caption-text">Table 14. Counting Atomic Functions</=
span><a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archiv=
e/25.3/compilers/cuda-fortran-prog-guide/index.html#id16" title=3D"Permalin=
k to this table">=EF=83=81</a></caption>
<colgroup>
<col style=3D"width: 53%">
<col style=3D"width: 47%">
</colgroup>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>Function</p></th>
<th class=3D"head"><p>Additional Atomic Update</p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">atomicinc(</span> <span class=3D"pre">mem,</span> <span=
 class=3D"pre">imax</span> <span class=3D"pre">)</span></code></p></td>
<td><div class=3D"highlight-text notranslate"><div class=3D"highlight"><pre=
 id=3D"codecell94"><span></span>if (mem&lt;imax) then
   mem =3D mem+1
else
   mem =3D 0
endif
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell94">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">atomicdec(</span> <span class=3D"pre">mem,</span> <span =
class=3D"pre">imax</span> <span class=3D"pre">)</span></code></p></td>
<td><div class=3D"highlight-text notranslate"><div class=3D"highlight"><pre=
 id=3D"codecell95"><span></span>if (mem&lt;imax .and. mem&gt;0) then
   mem =3D mem-1
else
   mem =3D imax
endif
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell95">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</td>
</tr>
</tbody>
</table></div>
<p><strong>Compare and Swap Atomic Function</strong></p>
<p>This atomic function reads and returns the value of the first argument. =
It also compares the first argument with the second argument, and atomicall=
y stores a new value back to the first argument location if the first and s=
econd argument are equal. All three arguments must be of the same type, eit=
her integer(kind=3D4), integer(kind=3D8), real(kind=3D4), or real(kind=3D8)=
.</p>
<div class=3D"admonition note">
<p class=3D"admonition-title">Note</p>
<p>The return value for this function is the first argument, <code class=3D=
"docutils literal notranslate"><span class=3D"pre">mem</span></code>.</p>
</div>
<p>The function is:</p>
<div class=3D"wy-table-responsive"><table class=3D"table-no-stripes docutil=
s align-default" id=3D"id17">
<caption><span class=3D"caption-text">Table 15. Compare and Swap Atomic Fun=
ction</span><a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk=
/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#id17" title=3D"P=
ermalink to this table">=EF=83=81</a></caption>
<colgroup>
<col style=3D"width: 47%">
<col style=3D"width: 53%">
</colgroup>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>Function</p></th>
<th class=3D"head"><p>Additional Atomic Update</p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">atomiccas(mem,comp,val)</span></code></p></td>
<td><div class=3D"highlight-text notranslate"><div class=3D"highlight"><pre=
 id=3D"codecell96"><span></span>if (mem =3D=3D comp) then
mem =3D val
endif
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell96">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</td>
</tr>
</tbody>
</table></div>
</section>
<section id=3D"fortran-i-o">
<h3><span class=3D"section-number">3.6.9. </span>Fortran I/O<a class=3D"hea=
derlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cud=
a-fortran-prog-guide/index.html#fortran-i-o" title=3D"Permalink to this hea=
dline">=EF=83=81</a></h3>
<p>The NVIDIA Fortran compiler includes limited support for <code class=3D"=
docutils literal notranslate"><span class=3D"pre">PRINT</span></code> state=
ments in GPU device code. The Fortran GPU runtime library, which is shared =
between CUDA Fortran and OpenACC for NVIDIA GPU targets, buffers up the out=
put and prints an entire line in one operation. Integer, character, logical=
, real and complex data types are supported.</p>
<p>The underlying CUDA <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">printf</span></code> implementation limits the number of print=
 statements in a kernel launch to 4096. Users should take this limit into a=
ccount when making use of this feature.</p>
</section>
<section id=3D"print-example">
<h3><span class=3D"section-number">3.6.10. </span>PRINT Example<a class=3D"=
headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/=
cuda-fortran-prog-guide/index.html#print-example" title=3D"Permalink to thi=
s headline">=EF=83=81</a></h3>
<p>By adding the compiler option <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">-cuda=3Dcharstring</span></code>, some limited suppo=
rt for character strings, character substrings, character variables, and st=
ring assignment is also now available in CUDA Fortran device code. Here is =
a short example:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell97"><span></span><span class=3D"n">attributes</span><span cla=
ss=3D"p">(</span><span class=3D"n">global</span><span class=3D"p">)</span><=
span class=3D"w"> </span><span class=3D"k">subroutine </span><span class=3D=
"n">printtest</span><span class=3D"p">()</span><span class=3D"w"></span>
<span class=3D"kt">character</span><span class=3D"o">*</span><span class=3D=
"mi">12</span><span class=3D"w"> </span><span class=3D"n">c</span><span cla=
ss=3D"w"></span>
<span class=3D"n">i</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">threadIdx</span><span clas=
s=3D"p">%</span><span class=3D"n">x</span><span class=3D"w"></span>
<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">i</span><span class=3D"o">/</span><span class=3D"mi">=
2</span><span class=3D"o">*</span><span class=3D"mf">2.</span><span class=
=3D"n">eq</span><span class=3D"p">.</span><span class=3D"n">i</span><span c=
lass=3D"p">)</span><span class=3D"w"> </span><span class=3D"k">then</span>
<span class=3D"k">  </span><span class=3D"n">c</span><span class=3D"w"> </s=
pan><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"s2=
">"Even Thread:"</span><span class=3D"w"></span>
<span class=3D"k">else</span>
<span class=3D"k">  </span><span class=3D"n">c</span><span class=3D"w"> </s=
pan><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"s2=
">" Odd Thread:"</span><span class=3D"w"></span>
<span class=3D"k">endif</span>
<span class=3D"k">print</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"p">,</span><span class=3D"n">c</span><span class=3D"p=
">,</span><span class=3D"n">c</span><span class=3D"p">(</span><span class=
=3D"mi">6</span><span class=3D"p">:</span><span class=3D"mi">11</span><span=
 class=3D"p">),</span><span class=3D"n">i</span><span class=3D"w"></span>
<span class=3D"k">end subroutine</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell97">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"shuffle-functions">
<h3><span class=3D"section-number">3.6.11. </span>Shuffle Functions<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#shuffle-functions" title=3D"Permalin=
k to this headline">=EF=83=81</a></h3>
<p>CUDA Fortran device code can access compute capability 3.x shuffle funct=
ions. These functions enable access to variables between threads within a w=
arp, referred to as <em>lanes</em>. In CUDA Fortran, lanes use Fortran=E2=
=80=99s 1-based numbering scheme.</p>
<p><strong>__shfl()</strong></p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">__shfl(=
)</span></code> returns the value of <code class=3D"docutils literal notran=
slate"><span class=3D"pre">var</span></code> held by the thread whose ID is=
 given by <code class=3D"docutils literal notranslate"><span class=3D"pre">=
srcLane</span></code>. If the <code class=3D"docutils literal notranslate">=
<span class=3D"pre">srcLane</span></code> is outside the range of <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">1:width</span></cod=
e>, then the thread=E2=80=99s own value of <code class=3D"docutils literal =
notranslate"><span class=3D"pre">var</span></code> is returned. The <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">width</span></cod=
e> argument is optional in all shuffle functions and has a default value of=
 32, the current warp size.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre id=
=3D"codecell98"><span></span><span class=3D"n">integer</span><span class=3D=
"p">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span clas=
s=3D"w"> </span><span class=3D"n">function</span><span class=3D"w"> </span>=
<span class=3D"n">__shfl</span><span class=3D"p">(</span><span class=3D"n">=
var</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">srcLane</span><span class=3D"p">,</span><span class=3D"w"> </span><s=
pan class=3D"n">width</span><span class=3D"p">)</span><span class=3D"w"></s=
pan>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"n">var</span><span class=3D"p">,</span><span =
class=3D"w"> </span><span class=3D"n">srcLane</span><span class=3D"w"></spa=
n>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span clas=
s=3D"w"> </span><span class=3D"n">optional</span><span class=3D"w"> </span>=
<span class=3D"o">::</span><span class=3D"w"> </span><span class=3D"n">widt=
h</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell98">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre id=
=3D"codecell99"><span></span><span class=3D"n">integer</span><span class=3D=
"p">(</span><span class=3D"mi">8</span><span class=3D"p">)</span><span clas=
s=3D"w"> </span><span class=3D"n">function</span><span class=3D"w"> </span>=
<span class=3D"n">__shfl</span><span class=3D"p">(</span><span class=3D"n">=
var</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">srcLane</span><span class=3D"p">,</span><span class=3D"w"> </span><s=
pan class=3D"n">width</span><span class=3D"p">)</span><span class=3D"w"></s=
pan>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">8</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"o">::</span><span class=3D"w"> </span><span c=
lass=3D"n">var</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"o">::</span><span class=3D"w"> </span><span c=
lass=3D"n">srcLane</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span clas=
s=3D"w"> </span><span class=3D"n">optional</span><span class=3D"w"> </span>=
<span class=3D"o">::</span><span class=3D"w"> </span><span class=3D"n">widt=
h</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell99">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre id=
=3D"codecell100"><span></span><span class=3D"n">real</span><span class=3D"p=
">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"n">function</span><span class=3D"w"> </span><=
span class=3D"n">__shfl</span><span class=3D"p">(</span><span class=3D"n">v=
ar</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D=
"n">srcLane</span><span class=3D"p">,</span><span class=3D"w"> </span><span=
 class=3D"n">width</span><span class=3D"p">)</span><span class=3D"w"></span=
>
<span class=3D"w">   </span><span class=3D"n">real</span><span class=3D"p">=
(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span class=3D=
"w"> </span><span class=3D"o">::</span><span class=3D"w"> </span><span clas=
s=3D"n">var</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"o">::</span><span class=3D"w"> </span><span c=
lass=3D"n">srcLane</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span clas=
s=3D"w"> </span><span class=3D"n">optional</span><span class=3D"w"> </span>=
<span class=3D"o">::</span><span class=3D"w"> </span><span class=3D"n">widt=
h</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell100">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre id=
=3D"codecell101"><span></span><span class=3D"n">real</span><span class=3D"p=
">(</span><span class=3D"mi">8</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"n">function</span><span class=3D"w"> </span><=
span class=3D"n">__shfl</span><span class=3D"p">(</span><span class=3D"n">v=
ar</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D=
"n">srcLane</span><span class=3D"p">,</span><span class=3D"w"> </span><span=
 class=3D"n">width</span><span class=3D"p">)</span><span class=3D"w"></span=
>
<span class=3D"w">   </span><span class=3D"n">real</span><span class=3D"p">=
(</span><span class=3D"mi">8</span><span class=3D"p">)</span><span class=3D=
"w"> </span><span class=3D"o">::</span><span class=3D"w"> </span><span clas=
s=3D"n">var</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"o">::</span><span class=3D"w"> </span><span c=
lass=3D"n">srcLane</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span clas=
s=3D"w"> </span><span class=3D"n">optional</span><span class=3D"w"> </span>=
<span class=3D"o">::</span><span class=3D"w"> </span><span class=3D"n">widt=
h</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell101">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><strong>__shfl_up()</strong></p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">__shfl_=
up()</span></code> calculates a source lane ID by subtracting delta from th=
e caller=E2=80=99s thread ID. The value of <code class=3D"docutils literal =
notranslate"><span class=3D"pre">var</span></code> held by the resulting th=
read ID is returned; in effect, <code class=3D"docutils literal notranslate=
"><span class=3D"pre">var</span></code> is shifted up the warp by <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">delta</span></code>=
 lanes.</p>
<p>The source lane index will not wrap around the value of <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">width</span></code>, so th=
e lower <code class=3D"docutils literal notranslate"><span class=3D"pre">de=
lta</span></code> lanes are unchanged.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre id=
=3D"codecell102"><span></span><span class=3D"n">integer</span><span class=
=3D"p">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span c=
lass=3D"w"> </span><span class=3D"n">function</span><span class=3D"w"> </sp=
an><span class=3D"n">__shfl_up</span><span class=3D"p">(</span><span class=
=3D"n">var</span><span class=3D"p">,</span><span class=3D"w"> </span><span =
class=3D"n">delta</span><span class=3D"p">,</span><span class=3D"w"> </span=
><span class=3D"n">width</span><span class=3D"p">)</span><span class=3D"w">=
</span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"n">var</span><span class=3D"p">,</span><span =
class=3D"w"> </span><span class=3D"n">delta</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span clas=
s=3D"w"> </span><span class=3D"n">optional</span><span class=3D"w"> </span>=
<span class=3D"o">::</span><span class=3D"w"> </span><span class=3D"n">widt=
h</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell102">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre id=
=3D"codecell103"><span></span><span class=3D"n">integer</span><span class=
=3D"p">(</span><span class=3D"mi">8</span><span class=3D"p">)</span><span c=
lass=3D"w"> </span><span class=3D"n">function</span><span class=3D"w"> </sp=
an><span class=3D"n">__shfl_up</span><span class=3D"p">(</span><span class=
=3D"n">var</span><span class=3D"p">,</span><span class=3D"w"> </span><span =
class=3D"n">delta</span><span class=3D"p">,</span><span class=3D"w"> </span=
><span class=3D"n">width</span><span class=3D"p">)</span><span class=3D"w">=
</span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">8</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"o">::</span><span class=3D"w"> </span><span c=
lass=3D"n">var</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"o">::</span><span class=3D"w"> </span><span c=
lass=3D"n">delta</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span clas=
s=3D"w"> </span><span class=3D"n">optional</span><span class=3D"w"> </span>=
<span class=3D"o">::</span><span class=3D"w"> </span><span class=3D"n">widt=
h</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell103">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre id=
=3D"codecell104"><span></span><span class=3D"n">real</span><span class=3D"p=
">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"n">function</span><span class=3D"w"> </span><=
span class=3D"n">__shfl_up</span><span class=3D"p">(</span><span class=3D"n=
">var</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">delta</span><span class=3D"p">,</span><span class=3D"w"> </span><spa=
n class=3D"n">width</span><span class=3D"p">)</span><span class=3D"w"></spa=
n>
<span class=3D"w">   </span><span class=3D"n">real</span><span class=3D"p">=
(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span class=3D=
"w"> </span><span class=3D"o">::</span><span class=3D"w"> </span><span clas=
s=3D"n">var</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"o">::</span><span class=3D"w"> </span><span c=
lass=3D"n">delta</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span clas=
s=3D"w"> </span><span class=3D"n">optional</span><span class=3D"w"> </span>=
<span class=3D"o">::</span><span class=3D"w"> </span><span class=3D"n">widt=
h</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell104">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre id=
=3D"codecell105"><span></span><span class=3D"n">real</span><span class=3D"p=
">(</span><span class=3D"mi">8</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"n">function</span><span class=3D"w"> </span><=
span class=3D"n">__shfl_up</span><span class=3D"p">(</span><span class=3D"n=
">var</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">delta</span><span class=3D"p">,</span><span class=3D"w"> </span><spa=
n class=3D"n">width</span><span class=3D"p">)</span><span class=3D"w"></spa=
n>
<span class=3D"w">   </span><span class=3D"n">real</span><span class=3D"p">=
(</span><span class=3D"mi">8</span><span class=3D"p">)</span><span class=3D=
"w"> </span><span class=3D"o">::</span><span class=3D"w"> </span><span clas=
s=3D"n">var</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"o">::</span><span class=3D"w"> </span><span c=
lass=3D"n">delta</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span clas=
s=3D"w"> </span><span class=3D"n">optional</span><span class=3D"w"> </span>=
<span class=3D"o">::</span><span class=3D"w"> </span><span class=3D"n">widt=
h</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell105">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><strong>__shfl_down()</strong></p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">__shfl_=
down()</span></code> calculates a source lane ID by adding <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">delta</span></code> to the=
 caller=E2=80=99s thread ID. The value of <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">var</span></code> held by the resulting thr=
ead ID is returned: this has the effect of shifting <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">var</span></code> down the warp b=
y <code class=3D"docutils literal notranslate"><span class=3D"pre">delta</s=
pan></code> lanes. The ID number of the source lane will not wrap around th=
e value of width, so the upper <code class=3D"docutils literal notranslate"=
><span class=3D"pre">delta</span></code> lanes remain unchanged.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre id=
=3D"codecell106"><span></span><span class=3D"n">integer</span><span class=
=3D"p">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span c=
lass=3D"w"> </span><span class=3D"n">function</span><span class=3D"w"> </sp=
an><span class=3D"n">__shfl_down</span><span class=3D"p">(</span><span clas=
s=3D"n">var</span><span class=3D"p">,</span><span class=3D"w"> </span><span=
 class=3D"n">delta</span><span class=3D"p">,</span><span class=3D"w"> </spa=
n><span class=3D"n">width</span><span class=3D"p">)</span><span class=3D"w"=
></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"n">var</span><span class=3D"p">,</span><span =
class=3D"w"> </span><span class=3D"n">delta</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span clas=
s=3D"w"> </span><span class=3D"n">optional</span><span class=3D"w"> </span>=
<span class=3D"o">::</span><span class=3D"w"> </span><span class=3D"n">widt=
h</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell106">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre id=
=3D"codecell107"><span></span><span class=3D"n">integer</span><span class=
=3D"p">(</span><span class=3D"mi">8</span><span class=3D"p">)</span><span c=
lass=3D"w"> </span><span class=3D"n">function</span><span class=3D"w"> </sp=
an><span class=3D"n">__shfl_down</span><span class=3D"p">(</span><span clas=
s=3D"n">var</span><span class=3D"p">,</span><span class=3D"w"> </span><span=
 class=3D"n">delta</span><span class=3D"p">,</span><span class=3D"w"> </spa=
n><span class=3D"n">width</span><span class=3D"p">)</span><span class=3D"w"=
></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">8</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"o">::</span><span class=3D"w"> </span><span c=
lass=3D"n">var</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"o">::</span><span class=3D"w"> </span><span c=
lass=3D"n">delta</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span clas=
s=3D"w"> </span><span class=3D"n">optional</span><span class=3D"w"> </span>=
<span class=3D"o">::</span><span class=3D"w"> </span><span class=3D"n">widt=
h</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell107">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre id=
=3D"codecell108"><span></span><span class=3D"n">real</span><span class=3D"p=
">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"n">function</span><span class=3D"w"> </span><=
span class=3D"n">__shfl_down</span><span class=3D"p">(</span><span class=3D=
"n">var</span><span class=3D"p">,</span><span class=3D"w"> </span><span cla=
ss=3D"n">delta</span><span class=3D"p">,</span><span class=3D"w"> </span><s=
pan class=3D"n">width</span><span class=3D"p">)</span><span class=3D"w"></s=
pan>
<span class=3D"w">   </span><span class=3D"n">real</span><span class=3D"p">=
(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span class=3D=
"w"> </span><span class=3D"o">::</span><span class=3D"w"> </span><span clas=
s=3D"n">var</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"o">::</span><span class=3D"w"> </span><span c=
lass=3D"n">delta</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span clas=
s=3D"w"> </span><span class=3D"n">optional</span><span class=3D"w"> </span>=
<span class=3D"o">::</span><span class=3D"w"> </span><span class=3D"n">widt=
h</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell108">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre id=
=3D"codecell109"><span></span><span class=3D"n">real</span><span class=3D"p=
">(</span><span class=3D"mi">8</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"n">function</span><span class=3D"w"> </span><=
span class=3D"n">__shfl_down</span><span class=3D"p">(</span><span class=3D=
"n">var</span><span class=3D"p">,</span><span class=3D"w"> </span><span cla=
ss=3D"n">delta</span><span class=3D"p">,</span><span class=3D"w"> </span><s=
pan class=3D"n">width</span><span class=3D"p">)</span><span class=3D"w"></s=
pan>
<span class=3D"w">   </span><span class=3D"n">real</span><span class=3D"p">=
(</span><span class=3D"mi">8</span><span class=3D"p">)</span><span class=3D=
"w"> </span><span class=3D"o">::</span><span class=3D"w"> </span><span clas=
s=3D"n">var</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"o">::</span><span class=3D"w"> </span><span c=
lass=3D"n">delta</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span clas=
s=3D"w"> </span><span class=3D"n">optional</span><span class=3D"w"> </span>=
<span class=3D"o">::</span><span class=3D"w"> </span><span class=3D"n">widt=
h</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell109">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><strong>__shfl_xor()</strong></p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">__shfl_=
xor()</span></code> uses ID-1 to calculate the source lane ID by performing=
 a bitwise XOR of the caller=E2=80=99s lane ID with the <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">laneMask</span></code>. The v=
alue of <code class=3D"docutils literal notranslate"><span class=3D"pre">va=
r</span></code> held by the resulting lane ID is returned. If the resulting=
 lane ID falls outside the range permitted by <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">width</span></code>, the thread=E2=80=
=99s own value of <code class=3D"docutils literal notranslate"><span class=
=3D"pre">var</span></code> is returned. This mode implements a butterfly ad=
dressing pattern such as is used in tree reduction and broadcast.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre id=
=3D"codecell110"><span></span><span class=3D"n">integer</span><span class=
=3D"p">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span c=
lass=3D"w"> </span><span class=3D"n">function</span><span class=3D"w"> </sp=
an><span class=3D"n">__shfl_xor</span><span class=3D"p">(</span><span class=
=3D"n">var</span><span class=3D"p">,</span><span class=3D"w"> </span><span =
class=3D"n">laneMask</span><span class=3D"p">,</span><span class=3D"w"> </s=
pan><span class=3D"n">width</span><span class=3D"p">)</span><span class=3D"=
w"></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"n">var</span><span class=3D"p">,</span><span =
class=3D"w"> </span><span class=3D"n">laneMask</span><span class=3D"w"></sp=
an>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span clas=
s=3D"w"> </span><span class=3D"n">optional</span><span class=3D"w"> </span>=
<span class=3D"o">::</span><span class=3D"w"> </span><span class=3D"n">widt=
h</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell110">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre id=
=3D"codecell111"><span></span><span class=3D"n">integer</span><span class=
=3D"p">(</span><span class=3D"mi">8</span><span class=3D"p">)</span><span c=
lass=3D"w"> </span><span class=3D"n">function</span><span class=3D"w"> </sp=
an><span class=3D"n">__shfl_xor</span><span class=3D"p">(</span><span class=
=3D"n">var</span><span class=3D"p">,</span><span class=3D"w"> </span><span =
class=3D"n">laneMask</span><span class=3D"p">,</span><span class=3D"w"> </s=
pan><span class=3D"n">width</span><span class=3D"p">)</span><span class=3D"=
w"></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">8</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"o">::</span><span class=3D"w"> </span><span c=
lass=3D"n">var</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"o">::</span><span class=3D"w"> </span><span c=
lass=3D"n">laneMask</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span clas=
s=3D"w"> </span><span class=3D"n">optional</span><span class=3D"w"> </span>=
<span class=3D"o">::</span><span class=3D"w"> </span><span class=3D"n">widt=
h</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell111">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre id=
=3D"codecell112"><span></span><span class=3D"n">real</span><span class=3D"p=
">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"n">function</span><span class=3D"w"> </span><=
span class=3D"n">__shfl_xor</span><span class=3D"p">(</span><span class=3D"=
n">var</span><span class=3D"p">,</span><span class=3D"w"> </span><span clas=
s=3D"n">laneMask</span><span class=3D"p">,</span><span class=3D"w"> </span>=
<span class=3D"n">width</span><span class=3D"p">)</span><span class=3D"w"><=
/span>
<span class=3D"w">   </span><span class=3D"n">real</span><span class=3D"p">=
(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span class=3D=
"w"> </span><span class=3D"o">::</span><span class=3D"w"> </span><span clas=
s=3D"n">var</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"o">::</span><span class=3D"w"> </span><span c=
lass=3D"n">laneMask</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span clas=
s=3D"w"> </span><span class=3D"n">optional</span><span class=3D"w"> </span>=
<span class=3D"o">::</span><span class=3D"w"> </span><span class=3D"n">widt=
h</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell112">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre id=
=3D"codecell113"><span></span><span class=3D"n">real</span><span class=3D"p=
">(</span><span class=3D"mi">8</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"n">function</span><span class=3D"w"> </span><=
span class=3D"n">__shfl_xor</span><span class=3D"p">(</span><span class=3D"=
n">var</span><span class=3D"p">,</span><span class=3D"w"> </span><span clas=
s=3D"n">laneMask</span><span class=3D"p">,</span><span class=3D"w"> </span>=
<span class=3D"n">width</span><span class=3D"p">)</span><span class=3D"w"><=
/span>
<span class=3D"w">   </span><span class=3D"n">real</span><span class=3D"p">=
(</span><span class=3D"mi">8</span><span class=3D"p">)</span><span class=3D=
"w"> </span><span class=3D"o">::</span><span class=3D"w"> </span><span clas=
s=3D"n">var</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"o">::</span><span class=3D"w"> </span><span c=
lass=3D"n">laneMask</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">integer</span><span class=3D"=
p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span clas=
s=3D"w"> </span><span class=3D"n">optional</span><span class=3D"w"> </span>=
<span class=3D"o">::</span><span class=3D"w"> </span><span class=3D"n">widt=
h</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell113">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Here is an example using <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">__shfl_xor()</span></code> to compute the sum of each thr=
ead=E2=80=99s variable contribution within a warp:</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre id=
=3D"codecell114"><span></span><span class=3D"n">j</span><span class=3D"w"> =
</span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D=
"p">.</span><span class=3D"w"> </span><span class=3D"p">.</span><span class=
=3D"w"> </span><span class=3D"p">.</span><span class=3D"w"></span>
<span class=3D"n">k</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">__shfl_xor</span><span cla=
ss=3D"p">(</span><span class=3D"n">j</span><span class=3D"p">,</span><span =
class=3D"mi">1</span><span class=3D"p">);</span><span class=3D"w">  </span>=
<span class=3D"n">j</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">j</span><span class=3D"w">=
 </span><span class=3D"o">+</span><span class=3D"w"> </span><span class=3D"=
n">k</span><span class=3D"w"></span>
<span class=3D"n">k</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">__shfl_xor</span><span cla=
ss=3D"p">(</span><span class=3D"n">j</span><span class=3D"p">,</span><span =
class=3D"mi">2</span><span class=3D"p">);</span><span class=3D"w">  </span>=
<span class=3D"n">j</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">j</span><span class=3D"w">=
 </span><span class=3D"o">+</span><span class=3D"w"> </span><span class=3D"=
n">k</span><span class=3D"w"></span>
<span class=3D"n">k</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">__shfl_xor</span><span cla=
ss=3D"p">(</span><span class=3D"n">j</span><span class=3D"p">,</span><span =
class=3D"mi">4</span><span class=3D"p">);</span><span class=3D"w">  </span>=
<span class=3D"n">j</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">j</span><span class=3D"w">=
 </span><span class=3D"o">+</span><span class=3D"w"> </span><span class=3D"=
n">k</span><span class=3D"w"></span>
<span class=3D"n">k</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">__shfl_xor</span><span cla=
ss=3D"p">(</span><span class=3D"n">j</span><span class=3D"p">,</span><span =
class=3D"mi">8</span><span class=3D"p">);</span><span class=3D"w">  </span>=
<span class=3D"n">j</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">j</span><span class=3D"w">=
 </span><span class=3D"o">+</span><span class=3D"w"> </span><span class=3D"=
n">k</span><span class=3D"w"></span>
<span class=3D"n">k</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">__shfl_xor</span><span cla=
ss=3D"p">(</span><span class=3D"n">j</span><span class=3D"p">,</span><span =
class=3D"mi">16</span><span class=3D"p">);</span><span class=3D"w"> </span>=
<span class=3D"n">j</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">j</span><span class=3D"w">=
 </span><span class=3D"o">+</span><span class=3D"w"> </span><span class=3D"=
n">k</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell114">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"id2">
<h3><span class=3D"section-number">3.6.12. </span>Restrictions<a class=3D"h=
eaderlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/c=
uda-fortran-prog-guide/index.html#id2" title=3D"Permalink to this headline"=
>=EF=83=81</a></h3>
<p>This section lists restrictions on statements and features that can appe=
ar in device subprograms.</p>
<ul class=3D"simple">
<li><p>Recursive subroutines and functions are not allowed.</p></li>
<li><p>PAUSE statements are not allowed.</p></li>
<li><p>Most Input/Output statements are not allowed at all: READ, FORMAT, N=
AMELIST, OPEN, CLOSE, BACKSPACE, REWIND, ENDFILE, INQUIRE.</p></li>
<li><p>List-directed PRINT and WRITE statements to the default unit may be =
used when compiling for compute capability 2.0 and higher; all other uses o=
f PRINT and WRITE are disallowed.</p></li>
<li><p>Alternate return specifications are not allowed.</p></li>
<li><p>ENTRY statements are not allowed.</p></li>
<li><p>Floating point exception handling is not supported.</p></li>
<li><p>Fortran intrinsic functions not listed in Section 3.6.3 are not supp=
orted.</p></li>
<li><p>Cray pointers are not supported.</p></li>
</ul>
</section>
</section>
<section id=3D"host-code">
<h2><span class=3D"section-number">3.7. </span>Host code<a class=3D"headerl=
ink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fo=
rtran-prog-guide/index.html#host-code" title=3D"Permalink to this headline"=
>=EF=83=81</a></h2>
<p>Host subprograms may use intrinsic functions, such as the <code class=3D=
"docutils literal notranslate"><span class=3D"pre">sizeof</span></code> int=
rinsic function, to find the size in bytes of Fortran data structures.</p>
<section id=3D"sizeof-intrinsic">
<h3><span class=3D"section-number">3.7.1. </span>SIZEOF Intrinsic<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#sizeof-intrinsic" title=3D"Permalink=
 to this headline">=EF=83=81</a></h3>
<p>A call to <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">sizeof(A)</span></code>, where <code class=3D"docutils literal notransla=
te"><span class=3D"pre">A</span></code> is a variable or expression, return=
s the number of bytes required to hold the value of <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">A</span></code>.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell115"><span></span><span class=3D"kt">integer</span><span clas=
s=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><=
span class=3D"mi">4</span><span class=3D"p">)</span><span class=3D"w"> </sp=
an><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">=
i</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"=
n">j</span><span class=3D"w"></span>
<span class=3D"n">j</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">sizeof</span><span class=
=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">)</span><span cl=
ass=3D"w">    </span><span class=3D"c">! this assigns the value 4 to j</spa=
n>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell115">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
</section>
<section id=3D"fortran-device-modules">
<h2><span class=3D"section-number">3.8. </span>Fortran Device Modules<a cla=
ss=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/comp=
ilers/cuda-fortran-prog-guide/index.html#fortran-device-modules" title=3D"P=
ermalink to this headline">=EF=83=81</a></h2>
<p>NVIDIA provides a device module by default which allows access and inter=
faces to many of the CUDA device built-in routines.</p>
<p>To access this module explicitly, do one of the following:</p>
<ul>
<li><p>Add this line to your Fortran program:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell116"><span></span><span class=3D"k">use </span><span class=3D=
"n">cudadevice</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell116">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</li>
<li><p>Add this line to your C program:</p>
<div class=3D"highlight-c notranslate"><div class=3D"highlight"><pre id=3D"=
codecell117"><span></span><span class=3D"cp">#include</span><span class=3D"=
w"> </span><span class=3D"cpf">&lt;cudadevice.h&gt;</span><span class=3D"cp=
"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell117">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</li>
</ul>
<p>You can use these routines in CUDA Fortran global and device subprograms=
, in CUF kernels, and in NVIDIA Accelerator compute regions in Fortran as w=
ell as in C. Further, the NVIDIA HPC compilers come with implementations of=
 these routines for host code, though these implementations are not specifi=
cally optimized for the host. In uses other than CUDA Fortran global and de=
vice subprograms, you must explicitly use the module in the host subprogram=
 unit.</p>
<p><a class=3D"reference internal" href=3D"https://docs.nvidia.com/hpc-sdk/=
archive/25.3/compilers/cuda-fortran-prog-guide/index.html#cfref-fort-device=
-modules-cuda-builtin"><span class=3D"std std-ref">CUDA Built-in Routines</=
span></a> lists the CUDA built-in routines that are available:</p>
<div class=3D"wy-table-responsive"><table class=3D"table-no-stripes docutil=
s align-default" id=3D"cfref-fort-device-modules-cuda-builtin">
<caption><span class=3D"caption-text">Table 16. CUDA Built-in Routines</spa=
n><a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/2=
5.3/compilers/cuda-fortran-prog-guide/index.html#cfref-fort-device-modules-=
cuda-builtin" title=3D"Permalink to this table">=EF=83=81</a></caption>
<colgroup>
<col style=3D"width: 27%">
<col style=3D"width: 23%">
<col style=3D"width: 23%">
<col style=3D"width: 27%">
</colgroup>
<tbody>
<tr class=3D"row-odd"><td><p>__brev</p></td>
<td><p>__brevll</p></td>
<td><p>clock</p></td>
<td><p>clock64</p></td>
</tr>
<tr class=3D"row-even"><td><p>__clz</p></td>
<td><p>__clzll</p></td>
<td><p>__cosf</p></td>
<td><p>cospi</p></td>
</tr>
<tr class=3D"row-odd"><td><p>cospif</p></td>
<td><p>__dadd_rd</p></td>
<td><p>__dadd_rn</p></td>
<td><p>__dadd_ru</p></td>
</tr>
<tr class=3D"row-even"><td><p>__dadd_rz</p></td>
<td><p>__ddiv_rd</p></td>
<td><p>__ddiv_rn</p></td>
<td><p>__ddiv_ru</p></td>
</tr>
<tr class=3D"row-odd"><td><p>__ddiv_rz</p></td>
<td><p>__dmul_rd</p></td>
<td><p>__dmul_rn</p></td>
<td><p>__dmul_ru</p></td>
</tr>
<tr class=3D"row-even"><td><p>__dmul_rz</p></td>
<td><p>__double2float_rd</p></td>
<td><p>__double2float_rn</p></td>
<td><p>__double2float_ru</p></td>
</tr>
<tr class=3D"row-odd"><td><p>__double2float_rz</p></td>
<td><p>__double2hiint</p></td>
<td><p>__double2int_rd</p></td>
<td><p>__double2int_rn</p></td>
</tr>
<tr class=3D"row-even"><td><p>__double2int_ru</p></td>
<td><p>__double2int_rz</p></td>
<td><p>__double2loint</p></td>
<td><p>__double2ll_rd</p></td>
</tr>
<tr class=3D"row-odd"><td><p>__double2ll_rn</p></td>
<td><p>__double2ll_ru</p></td>
<td><p>__double2ll_rz</p></td>
<td><p>__double2uint_rd</p></td>
</tr>
<tr class=3D"row-even"><td><p>__double2uint_rn</p></td>
<td><p>__double2uint_ru</p></td>
<td><p>__double2uint_rz</p></td>
<td><p>__double2ull_rd</p></td>
</tr>
<tr class=3D"row-odd"><td><p>__double2ull_rn</p></td>
<td><p>__double2ull_ru</p></td>
<td><p>__double2ull_rz</p></td>
<td><p>__double_as_longlong</p></td>
</tr>
<tr class=3D"row-even"><td><p>__drcp_rd</p></td>
<td><p>__drcp_rn</p></td>
<td><p>__drcp_ru</p></td>
<td><p>__drcp_rz</p></td>
</tr>
<tr class=3D"row-odd"><td><p>__dsqrt_rd</p></td>
<td><p>__dsqrt_rn</p></td>
<td><p>__dsqrt_ru</p></td>
<td><p>__dsqrt_rz</p></td>
</tr>
<tr class=3D"row-even"><td><p>__exp10f</p></td>
<td><p>__expf</p></td>
<td><p>__fadd_rd</p></td>
<td><p>__fadd_rn</p></td>
</tr>
<tr class=3D"row-odd"><td><p>__fadd_ru</p></td>
<td><p>__fadd_rz</p></td>
<td><p>__fdiv_rd</p></td>
<td><p>__fdiv_rn</p></td>
</tr>
<tr class=3D"row-even"><td><p>__fdiv_ru</p></td>
<td><p>__fdiv_rz</p></td>
<td><p>fdivide</p></td>
<td><p>fdividef</p></td>
</tr>
<tr class=3D"row-odd"><td><p>__fdividef</p></td>
<td><p>__ffs</p></td>
<td><p>__ffsll</p></td>
<td><p>__float2half_rn</p></td>
</tr>
<tr class=3D"row-even"><td><p>__float2int_rd</p></td>
<td><p>__float2int_rn</p></td>
<td><p>__float2int_ru</p></td>
<td><p>__float2int_rz</p></td>
</tr>
<tr class=3D"row-odd"><td><p>__float2ll_rd</p></td>
<td><p>__float2ll_rn</p></td>
<td><p>__float2ll_ru</p></td>
<td><p>__float2ll_rz</p></td>
</tr>
<tr class=3D"row-even"><td><p>__float_as_int</p></td>
<td><p>__fma_rd</p></td>
<td><p>__fma_rn</p></td>
<td><p>__fma_ru</p></td>
</tr>
<tr class=3D"row-odd"><td><p>__fma_rz</p></td>
<td><p>__fmaf_rd</p></td>
<td><p>__fmaf_rn</p></td>
<td><p>__fmaf_ru</p></td>
</tr>
<tr class=3D"row-even"><td><p>__fmaf_rz</p></td>
<td><p>__fmul_rd</p></td>
<td><p>__fmul_rn</p></td>
<td><p>__fmul_ru</p></td>
</tr>
<tr class=3D"row-odd"><td><p>__fmul_rz</p></td>
<td><p>__frcp_rd</p></td>
<td><p>__frcp_rn</p></td>
<td><p>__frcp_ru</p></td>
</tr>
<tr class=3D"row-even"><td><p>__frcp_rz</p></td>
<td><p>__fsqrt_rd</p></td>
<td><p>__fsqrt_rn</p></td>
<td><p>__fsqrt_ru</p></td>
</tr>
<tr class=3D"row-odd"><td><p>__fsqrt_rz</p></td>
<td><p>__half2float</p></td>
<td><p>__hiloint2double</p></td>
<td><p>__int2double_rn</p></td>
</tr>
<tr class=3D"row-even"><td><p>__int2float_rd</p></td>
<td><p>__int2float_rn</p></td>
<td><p>__int2float_ru</p></td>
<td><p>__int2float_rz</p></td>
</tr>
<tr class=3D"row-odd"><td><p>__int_as_float</p></td>
<td><p>__ll2double_rd</p></td>
<td><p>__ll2double_rn</p></td>
<td><p>__ll2double_ru</p></td>
</tr>
<tr class=3D"row-even"><td><p>__ll2double_rz</p></td>
<td><p>__ll2float_rd</p></td>
<td><p>__ll2float_rn</p></td>
<td><p>__ll2float_ru</p></td>
</tr>
<tr class=3D"row-odd"><td><p>__ll2float_rz</p></td>
<td><p>__log10f</p></td>
<td><p>__log2f</p></td>
<td><p>__logf</p></td>
</tr>
<tr class=3D"row-even"><td><p>__longlong_as_double</p></td>
<td><p>__mul24</p></td>
<td><p>__mulhi</p></td>
<td><p>__popc</p></td>
</tr>
<tr class=3D"row-odd"><td><p>__popcll</p></td>
<td><p>__powf</p></td>
<td><p>__sad</p></td>
<td><p>__saturatef</p></td>
</tr>
<tr class=3D"row-even"><td><p>sincos</p></td>
<td><p>sincosf</p></td>
<td><p>sincospi</p></td>
<td><p>sincospif</p></td>
</tr>
<tr class=3D"row-odd"><td><p>__sinf</p></td>
<td><p>sinpi</p></td>
<td><p>sinpif</p></td>
<td><p>__tanf</p></td>
</tr>
<tr class=3D"row-even"><td><p>__uint2double_rn</p></td>
<td><p>__uint2float_rd</p></td>
<td><p>__uint2float_rn</p></td>
<td><p>__uint2float_ru</p></td>
</tr>
<tr class=3D"row-odd"><td><p>__uint2float_rz</p></td>
<td><p>__ull2double_rd</p></td>
<td><p>__ull2double_rn</p></td>
<td><p>__ull2double_ru</p></td>
</tr>
<tr class=3D"row-even"><td><p>__ull2double_rz</p></td>
<td><p>__ull2float_rd</p></td>
<td><p>__ull2float_rn</p></td>
<td><p>__ull2float_ru</p></td>
</tr>
<tr class=3D"row-odd"><td><p>__ull2float_rz</p></td>
<td><p>__umul24</p></td>
<td><p>__umulhi</p></td>
<td><p>__usad</p></td>
</tr>
</tbody>
</table></div>
<section id=3D"libm-device-module">
<h3><span class=3D"section-number">3.8.1. </span>LIBM Device Module<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#libm-device-module" title=3D"Permali=
nk to this headline">=EF=83=81</a></h3>
<p>NVIDIA also provides a device module which provides interfaces to standa=
rd libm functions which are not in the Fortran intrinsic library.</p>
<p>To access this module, add this line to your Fortran subprogram:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell118"><span></span><span class=3D"k">use </span><span class=3D=
"n">libm</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell118">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>These interfaces are defined in the libm device module:</p>
<div class=3D"wy-table-responsive"><table class=3D"table-no-stripes docutil=
s align-default" id=3D"id18">
<caption><span class=3D"caption-text">Table 17. CUDA Device libm Routines</=
span><a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archiv=
e/25.3/compilers/cuda-fortran-prog-guide/index.html#id18" title=3D"Permalin=
k to this table">=EF=83=81</a></caption>
<colgroup>
<col style=3D"width: 16%">
<col style=3D"width: 31%">
<col style=3D"width: 2%">
<col style=3D"width: 18%">
<col style=3D"width: 33%">
</colgroup>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>Name</p></th>
<th class=3D"head"><p>Argument Datatypes</p></th>
<th class=3D"head"></th>
<th class=3D"head"><p>Name</p></th>
<th class=3D"head"><p>Argument Datatypes</p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p>cbrt,cbrtf</p></td>
<td><p>real(8),real(4) returns real</p></td>
<td></td>
<td><p>llround,llroundf</p></td>
<td><p>real(8),real(4) returns integer</p></td>
</tr>
<tr class=3D"row-odd"><td><p>ceil,ceilf</p></td>
<td><p>real(8),real(4) returns real</p></td>
<td></td>
<td><p>lrint,lrintf</p></td>
<td><p>real(8),real(4) returns integer</p></td>
</tr>
<tr class=3D"row-even"><td><p>copysign,copysignf</p></td>
<td><p>2*real(8),real(4) returns real</p></td>
<td></td>
<td><p>lround,lroundf</p></td>
<td><p>real(8),real(4) returns integer</p></td>
</tr>
<tr class=3D"row-odd"><td><p>expm1,expm1f</p></td>
<td><p>real(8),real(4) returns real</p></td>
<td></td>
<td><p>logb,logbf</p></td>
<td><p>real(8),real(4) returns real</p></td>
</tr>
<tr class=3D"row-even"><td><p>exp10,exp10f</p></td>
<td><p>real(8),real(4) returns real</p></td>
<td></td>
<td><p>log1p,log1pf</p></td>
<td><p>real(8),real(4) returns real</p></td>
</tr>
<tr class=3D"row-odd"><td><p>exp2,exp2f</p></td>
<td><p>real(8),real(4) returns real</p></td>
<td></td>
<td><p>log2,log2f</p></td>
<td><p>real(8),real(4) returns real</p></td>
</tr>
<tr class=3D"row-even"><td><p>fabs,fabsf</p></td>
<td><p>real(8),real(4) returns real</p></td>
<td></td>
<td><p>modf,modff</p></td>
<td><p>2*real(8),real(4) returns real</p></td>
</tr>
<tr class=3D"row-odd"><td><p>floor,floorf</p></td>
<td><p>real(8),real(4) returns real</p></td>
<td></td>
<td><p>nearbyint,nearbyintf</p></td>
<td><p>real(8),real(4) returns real</p></td>
</tr>
<tr class=3D"row-even"><td><p>fma,fmaf</p></td>
<td><p>3*real(8),real(4) returns real</p></td>
<td></td>
<td><p>nextafter,nextafterf</p></td>
<td><p>2*real(8),real(4) returns real</p></td>
</tr>
<tr class=3D"row-odd"><td><p>fmax,fmaxf</p></td>
<td><p>2*real(8),real(4) returns real</p></td>
<td></td>
<td><p>remainder,remainderf</p></td>
<td><p>2*real(8),real(4) returns real</p></td>
</tr>
<tr class=3D"row-even"><td><p>fmin,fminf</p></td>
<td><p>2*real(8),real(4) returns real</p></td>
<td></td>
<td><p>remquo,remquof</p></td>
<td><p>2*real(8),real(4) integer returns real</p></td>
</tr>
<tr class=3D"row-odd"><td><p>frexp,frexpf</p></td>
<td><p>real(8),real(4) integer returns real</p></td>
<td></td>
<td><p>rint,rintf</p></td>
<td><p>real(8),real(4) returns real</p></td>
</tr>
<tr class=3D"row-even"><td><p>ilogb,ilogbf</p></td>
<td><p>real(8),real(4) returns real</p></td>
<td></td>
<td><p>scalbn,scalbnf</p></td>
<td><p>real(8),real(4) integer returns real</p></td>
</tr>
<tr class=3D"row-odd"><td><p>ldexp,ldexpf</p></td>
<td><p>real(8),real(4) integer returns real</p></td>
<td></td>
<td><p>scalbln,scalblnf</p></td>
<td><p>real(8),real(4) integer returns real</p></td>
</tr>
<tr class=3D"row-even"><td><p>llrint,llrintf</p></td>
<td><p>real(8),real(4) returns integer</p></td>
<td></td>
<td><p>trunc,truncf</p></td>
<td><p>real(8),real(4) returns real</p></td>
</tr>
</tbody>
</table></div>
<p>Here is a simple example of using the LIBM device module:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell119"><span></span><span class=3D"n">attributes</span><span cl=
ass=3D"p">(</span><span class=3D"n">global</span><span class=3D"p">)</span>=
<span class=3D"w"> </span><span class=3D"k">subroutine </span><span class=
=3D"n">testlibm</span><span class=3D"p">(</span><span class=3D"w"> </span><=
span class=3D"n">a</span><span class=3D"p">,</span><span class=3D"w"> </spa=
n><span class=3D"n">b</span><span class=3D"w"> </span><span class=3D"p">)</=
span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">use </span><span class=3D"n">l=
ibm</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"n">device</span><span clas=
s=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span=
 class=3D"n">a</span><span class=3D"p">(</span><span class=3D"o">*</span><s=
pan class=3D"p">),</span><span class=3D"w"> </span><span class=3D"n">b</spa=
n><span class=3D"p">(</span><span class=3D"o">*</span><span class=3D"p">)</=
span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">i</span><span class=3D"w"> </s=
pan><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n"=
>threadIdx</span><span class=3D"p">%</span><span class=3D"n">x</span><span =
class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">b</span><span class=3D"p">(</s=
pan><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"w"> =
</span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D=
"n">cbrt</span><span class=3D"p">(</span><span class=3D"n">a</span><span cl=
ass=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">))</span><spa=
n class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">end subroutine</span><span cla=
ss=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell119">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"cooperative-groups-device-module">
<h3><span class=3D"section-number">3.8.2. </span>Cooperative Groups Device =
Module<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archi=
ve/25.3/compilers/cuda-fortran-prog-guide/index.html#cooperative-groups-dev=
ice-module" title=3D"Permalink to this headline">=EF=83=81</a></h3>
<p>On NVIDIA GPUs which support CUDA Compute Capability 7.0 and above, NVID=
IA provides a device module which provides interfaces to cooperative group =
functionality which is provided by NVIDIA starting in CUDA 9.0. In our 23.3=
 release, the cooperative group module also supports thread block cluster p=
rogramming for Hopper (cc90) and newer architectures.</p>
<p>To access this module, add this line to your Fortran subprogram:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell120"><span></span><span class=3D"k">use </span><span class=3D=
"n">cooperative_groups</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell120">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Here is a simple example of using the cooperative_groups device module w=
hich enables a cooperative grid kernel:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell121"><span></span><span class=3D"n">attributes</span><span cl=
ass=3D"p">(</span><span class=3D"n">grid_global</span><span class=3D"p">)</=
span><span class=3D"w"> </span><span class=3D"k">subroutine </span><span cl=
ass=3D"n">g1</span><span class=3D"p">(</span><span class=3D"n">a</span><spa=
n class=3D"p">,</span><span class=3D"n">b</span><span class=3D"p">,</span><=
span class=3D"n">n</span><span class=3D"p">,</span><span class=3D"n">some_o=
ffset</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">use </span><span class=3D"n">c=
ooperative_groups</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"n">device</span><span clas=
s=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span=
 class=3D"n">a</span><span class=3D"p">(</span><span class=3D"n">n</span><s=
pan class=3D"p">),</span><span class=3D"w"> </span><span class=3D"n">b</spa=
n><span class=3D"p">(</span><span class=3D"n">n</span><span class=3D"p">)</=
span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">integer</span><span class=3D"=
p">,</span><span class=3D"w"> </span><span class=3D"k">value</span><span cl=
ass=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><sp=
an class=3D"n">n</span><span class=3D"p">,</span><span class=3D"w"> </span>=
<span class=3D"n">some_offset</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">type</span><span class=3D"p">(=
</span><span class=3D"n">grid_group</span><span class=3D"p">)</span><span c=
lass=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><s=
pan class=3D"n">gg</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">gg</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n=
">this_grid</span><span class=3D"p">()</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">do </span><span class=3D"n">i<=
/span><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"=
w"> </span><span class=3D"n">gg</span><span class=3D"p">%</span><span class=
=3D"n">rank</span><span class=3D"p">,</span><span class=3D"w"> </span><span=
 class=3D"n">n</span><span class=3D"p">,</span><span class=3D"w"> </span><s=
pan class=3D"n">gg</span><span class=3D"p">%</span><span class=3D"n">size</=
span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">a</span><span class=3D"p">(<=
/span><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"nb">min</span><span class=3D"p">(</span><span class=3D"nb">max</span><s=
pan class=3D"p">(</span><span class=3D"n">a</span><span class=3D"p">(</span=
><span class=3D"n">i</span><span class=3D"p">),</span><span class=3D"mf">0.=
0</span><span class=3D"p">),</span><span class=3D"mi">10</span><span class=
=3D"mf">0.0</span><span class=3D"p">)</span><span class=3D"w"> </span><span=
 class=3D"o">+</span><span class=3D"w"> </span><span class=3D"mf">0.5</span=
><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">end do</span>
<span class=3D"k">  call </span><span class=3D"n">syncthreads</span><span c=
lass=3D"p">(</span><span class=3D"n">gg</span><span class=3D"p">)</span><sp=
an class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">do </span><span class=3D"n">i<=
/span><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"=
w"> </span><span class=3D"n">gg</span><span class=3D"p">%</span><span class=
=3D"n">rank</span><span class=3D"p">,</span><span class=3D"w"> </span><span=
 class=3D"n">n</span><span class=3D"p">,</span><span class=3D"w"> </span><s=
pan class=3D"n">gg</span><span class=3D"p">%</span><span class=3D"n">size</=
span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">j</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
n">i</span><span class=3D"w"> </span><span class=3D"o">+</span><span class=
=3D"w"> </span><span class=3D"n">some_offset</span><span class=3D"w"></span=
>
<span class=3D"w">    </span><span class=3D"k">if</span><span class=3D"w"> =
</span><span class=3D"p">(</span><span class=3D"n">j</span><span class=3D"p=
">.</span><span class=3D"n">gt</span><span class=3D"p">.</span><span class=
=3D"n">n</span><span class=3D"p">)</span><span class=3D"w"> </span><span cl=
ass=3D"n">j</span><span class=3D"w"> </span><span class=3D"o">=3D</span><sp=
an class=3D"w"> </span><span class=3D"n">j</span><span class=3D"w"> </span>=
<span class=3D"o">-</span><span class=3D"w"> </span><span class=3D"n">n</sp=
an><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">b</span><span class=3D"p">(<=
/span><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">a</span><span class=3D"p">(</span><span class=3D"n">i</span><span cl=
ass=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">+</span><span=
 class=3D"w"> </span><span class=3D"n">a</span><span class=3D"p">(</span><s=
pan class=3D"n">j</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">end do</span>
<span class=3D"k">return</span>
<span class=3D"k">end subroutine</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell121">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>There is currently limited functionality for cooperative groups of size =
less than or equal to a thread block. More functionality will be added in a=
n upcoming release. Currently, the following types are defined within the m=
odule: <code class=3D"docutils literal notranslate"><span class=3D"pre">gri=
d_group</span></code>, <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">thread_group</span></code>, <code class=3D"docutils literal no=
translate"><span class=3D"pre">coalesced_group</span></code>, and <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">cluster_group</span=
></code>. Each type has two public members, the size and rank. The syncthre=
ads subroutine is overloaded in the cooperative_groups module to take the t=
ype as an argument, to appropriately synchronize the threads in that group.=
 Minimal code sequences supported are:</p>
<p>Cooperative group equal to a thread block:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell122"><span></span><span class=3D"p">.</span><span class=3D"w"=
> </span><span class=3D"p">.</span><span class=3D"w"> </span><span class=3D=
"p">.</span><span class=3D"w"></span>
<span class=3D"w"> </span><span class=3D"k">use </span><span class=3D"n">co=
operative_groups</span><span class=3D"w"></span>
<span class=3D"w"> </span><span class=3D"k">type</span><span class=3D"p">(<=
/span><span class=3D"n">thread_group</span><span class=3D"p">)</span><span =
class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><=
span class=3D"n">tg</span><span class=3D"w"></span>
<span class=3D"w"> </span><span class=3D"n">tg</span><span class=3D"w"> </s=
pan><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n"=
>this_thread_block</span><span class=3D"p">()</span><span class=3D"w"></spa=
n>
<span class=3D"w"> </span><span class=3D"k">call </span><span class=3D"n">s=
yncthreads</span><span class=3D"p">(</span><span class=3D"n">tg</span><span=
 class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell122">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Cooperative group equal to a warp:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell123"><span></span><span class=3D"p">.</span><span class=3D"w"=
> </span><span class=3D"p">.</span><span class=3D"w"> </span><span class=3D=
"p">.</span><span class=3D"w"></span>
<span class=3D"w"> </span><span class=3D"k">use </span><span class=3D"n">co=
operative_groups</span><span class=3D"w"></span>
<span class=3D"w"> </span><span class=3D"k">type</span><span class=3D"p">(<=
/span><span class=3D"n">coalesced_group</span><span class=3D"p">)</span><sp=
an class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </spa=
n><span class=3D"n">wg</span><span class=3D"w"></span>
<span class=3D"w"> </span><span class=3D"n">wg</span><span class=3D"w"> </s=
pan><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n"=
>this_warp</span><span class=3D"p">()</span><span class=3D"w"></span>
<span class=3D"w"> </span><span class=3D"k">call </span><span class=3D"n">s=
yncthreads</span><span class=3D"p">(</span><span class=3D"n">wg</span><span=
 class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell123">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Cooperative group equal to a thread block cluster:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell124"><span></span><span class=3D"p">.</span><span class=3D"w"=
> </span><span class=3D"p">.</span><span class=3D"w"> </span><span class=3D=
"p">.</span><span class=3D"w"></span>
<span class=3D"w"> </span><span class=3D"k">use </span><span class=3D"n">co=
operative_groups</span><span class=3D"w"></span>
<span class=3D"w"> </span><span class=3D"k">type</span><span class=3D"p">(<=
/span><span class=3D"n">cluster_group</span><span class=3D"p">)</span><span=
 class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span>=
<span class=3D"n">clg</span><span class=3D"w"></span>
<span class=3D"w"> </span><span class=3D"n">clg</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n=
">this_cluster</span><span class=3D"p">()</span><span class=3D"w"></span>
<span class=3D"w"> </span><span class=3D"k">call </span><span class=3D"n">s=
yncthreads</span><span class=3D"p">(</span><span class=3D"n">clg</span><spa=
n class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell124">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>The major benefit of a thread block cluster is to take advantage of dist=
ributed shared memory, which enables keeping a larger portion of data close=
 to the processing elements. We recommend using cray pointer syntax in acce=
ssing neighboring shared memory to keep register pressure as low as possibl=
e. Here is a short example:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell125"><span></span><span class=3D"n">attributes</span><span cl=
ass=3D"p">(</span><span class=3D"n">global</span><span class=3D"p">)</span>=
<span class=3D"w"> </span><span class=3D"n">cluster_dims</span><span class=
=3D"p">(</span><span class=3D"mi">2</span><span class=3D"p">,</span><span c=
lass=3D"mi">1</span><span class=3D"p">,</span><span class=3D"mi">1</span><s=
pan class=3D"p">)</span><span class=3D"w"> </span><span class=3D"k">subrout=
ine </span><span class=3D"n">t1</span><span class=3D"p">(</span><span class=
=3D"n">rnks</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">use </span><span class=3D"n">c=
ooperative_groups</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">integer</span><span class=3D"=
p">,</span><span class=3D"w"> </span><span class=3D"n">device</span><span c=
lass=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><s=
pan class=3D"n">rnks</span><span class=3D"p">(</span><span class=3D"mi">32<=
/span><span class=3D"p">,</span><span class=3D"o">*</span><span class=3D"p"=
>)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">type</span><span class=3D"p">(=
</span><span class=3D"n">cluster_group</span><span class=3D"p">)</span><spa=
n class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span=
><span class=3D"n">clg</span><span class=3D"w">  </span><span class=3D"c">!=
 Defined in cooperative_groups</span>
<span class=3D"w">  </span><span class=3D"kt">integer</span><span class=3D"=
p">,</span><span class=3D"w"> </span><span class=3D"n">shared</span><span c=
lass=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><s=
pan class=3D"n">smem</span><span class=3D"p">(</span><span class=3D"o">*</s=
pan><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">integer</span><span class=3D"=
p">,</span><span class=3D"w"> </span><span class=3D"n">shared</span><span c=
lass=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><s=
pan class=3D"n">dmem</span><span class=3D"p">(</span><span class=3D"o">*</s=
pan><span class=3D"p">);</span><span class=3D"w"> </span><span class=3D"k">=
pointer</span><span class=3D"p">(</span><span class=3D"n">pmem</span><span =
class=3D"p">,</span><span class=3D"n">dmem</span><span class=3D"p">)</span>=
<span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">i</span><span class=3D"w"> </s=
pan><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n"=
>threadIdx</span><span class=3D"p">%</span><span class=3D"n">x</span><span =
class=3D"p">;</span><span class=3D"w"> </span><span class=3D"n">j</span><sp=
an class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </spa=
n><span class=3D"n">blockIdx</span><span class=3D"p">%</span><span class=3D=
"n">x</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">clg</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
n">this_cluster</span><span class=3D"p">()</span><span class=3D"w">        =
</span><span class=3D"c">! Defined in cooperative_groups</span>
<span class=3D"w">  </span><span class=3D"n">nrank</span><span class=3D"w">=
 </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">clg</span><span class=3D"p">%</span><span class=3D"n">rank</span><sp=
an class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">rnks</span><span class=3D"p">(=
</span><span class=3D"n">i</span><span class=3D"p">,</span><span class=3D"n=
">j</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">clg</span><spa=
n class=3D"p">%</span><span class=3D"n">rank</span><span class=3D"w">      =
  </span><span class=3D"c">! Initialize rnks to 1 or 2</span>
<span class=3D"w">  </span><span class=3D"k">call </span><span class=3D"n">=
syncthreads</span><span class=3D"p">(</span><span class=3D"n">clg</span><sp=
an class=3D"p">)</span><span class=3D"w">       </span><span class=3D"c">! =
Sync both blocks</span>
<span class=3D"w">  </span><span class=3D"k">if</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"n">nrank</span><span class=3D=
"p">.</span><span class=3D"n">eq</span><span class=3D"p">.</span><span clas=
s=3D"mi">1</span><span class=3D"p">)</span><span class=3D"w"> </span><span =
class=3D"k">then</span><span class=3D"w"> </span><span class=3D"c">! Get a =
pointer to the other</span>
<span class=3D"w">    </span><span class=3D"n">pmem</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cluster_map_shared_rank</span><span class=3D"p">(</span><span class=
=3D"n">smem</span><span class=3D"p">,</span><span class=3D"w"> </span><span=
 class=3D"mi">2</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">else</span>
<span class=3D"k">    </span><span class=3D"n">pmem</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cluster_map_shared_rank</span><span class=3D"p">(</span><span class=
=3D"n">smem</span><span class=3D"p">,</span><span class=3D"w"> </span><span=
 class=3D"mi">1</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">end if</span>
<span class=3D"k">  </span><span class=3D"n">dmem</span><span class=3D"p">(=
</span><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"w=
"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"mi">100</span><span class=3D"o">*</span><span class=3D"n">nrank</span><=
span class=3D"w"> </span><span class=3D"o">+</span><span class=3D"w"> </spa=
n><span class=3D"n">i</span><span class=3D"w"> </span><span class=3D"c">! W=
rite to the other blocks shared memory</span>
<span class=3D"w">  </span><span class=3D"k">call </span><span class=3D"n">=
syncthreads</span><span class=3D"p">(</span><span class=3D"n">clg</span><sp=
an class=3D"p">)</span><span class=3D"w">   </span><span class=3D"c">! Sync=
 both blocks</span>
<span class=3D"w">  </span><span class=3D"n">rnks</span><span class=3D"p">(=
</span><span class=3D"n">i</span><span class=3D"p">,</span><span class=3D"n=
">j</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">rnks</span><sp=
an class=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">,</span>=
<span class=3D"n">j</span><span class=3D"p">)</span><span class=3D"w"> </sp=
an><span class=3D"o">+</span><span class=3D"w"> </span><span class=3D"n">sm=
em</span><span class=3D"p">(</span><span class=3D"n">i</span><span class=3D=
"p">)</span><span class=3D"w"> </span><span class=3D"c">! Read what the oth=
er block wrote</span>
<span class=3D"k">end subroutine</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell125">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>The cooperative groups module also defines new <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">shfl_sync()</span></code> functions=
. These functions are similar to the <code class=3D"docutils literal notran=
slate"><span class=3D"pre">shfl()</span></code> functions discussed in an e=
arlier section of this document, but take an extra <code class=3D"docutils =
literal notranslate"><span class=3D"pre">mask</span></code> first argument.=
 The 32-bit mask argument specifies which threads in the warp take part in =
the shuffle operation, and can be passed as an integer(4) with value z=E2=
=80=99ffffffff=E2=80=99 for most use cases. Note that, if you use the legac=
y <code class=3D"docutils literal notranslate"><span class=3D"pre">shfl()</=
span></code> functions with CUDA 9.0 or higher, we implicitly use <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">shlf_sync()</span><=
/code> with a mask of z=E2=80=99ffffffff=E2=80=99. This may not be correct =
if you have thread divergence within the warp. In that case, do use the new=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">shfl_sync=
()</span></code> functions and provide the proper mask, which can be genera=
ted using the <code class=3D"docutils literal notranslate"><span class=3D"p=
re">ballot()</span></code> device function.</p>
<span class=3D"target" id=3D"cfref-fort-mods-dev-mod-wmma"></span></section=
>
<section id=3D"wmma-warp-matrix-multiply-add-module">
<h3><span class=3D"section-number">3.8.3. </span>WMMA (Warp Matrix Multiply=
 Add) Module<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk=
/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#wmma-warp-matrix=
-multiply-add-module" title=3D"Permalink to this headline">=EF=83=81</a></h=
3>
<p>On NVIDIA GPUs that support CUDA Compute Capability 7.0 and above, NVIDI=
A includes a device module that provides interfaces to matrix operations th=
at leverage Tensor Cores to accelerate matrix problems. This enables scient=
ific programmers using Fortran to take advantage of real(2) matrix operatio=
ns.</p>
<p>To access the module, add this line to your Fortran subprogram:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell126"><span></span><span class=3D"k">use </span><span class=3D=
"n">wmma</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell126">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Among the API routines provided in the <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">wmma</span></code> module are matrix multip=
ly operations of form <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">C</span> <span class=3D"pre">=3D</span> <span class=3D"pre">Mat=
mul(A,</span> <span class=3D"pre">B)</span></code>, where:</p>
<ul class=3D"simple">
<li><p>A is a 2 dimensional real(2) array dimensioned A(m,k)</p></li>
<li><p>B is a 2 dimensional real(2) array dimensioned B(k,n)</p></li>
<li><p>C is a 2 dimensional real(2) or real(4) array dimensioned C(m,n)</p>=
</li>
</ul>
<p>Using the Fortran kind attribute, it is possible to declare and use data=
 in half precision format. Details on representation and requirements for u=
se can be found in <a class=3D"reference internal" href=3D"https://docs.nvi=
dia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#c=
fpg-datatypes-dev-real2"><span class=3D"std std-ref">Half-precision Floatin=
g Point</span></a> section.</p>
<p>Here is a simple example using the <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">wmma</span></code> device module to do matrix m=
ultiplication using a single warp of threads. There are two 16=C3=9716 <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">real(2)</span>=
</code> matrices being multiplied and accumulated into a 16=C3=9716 <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">real(4)</span></c=
ode> matrix:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell127"><span></span><span class=3D"cp">#include "cuf_macros.CUF=
"</span>
<span class=3D"w">    </span><span class=3D"k">module </span><span class=3D=
"n">m</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">parameter</span>=
<span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </=
span><span class=3D"n">wmma_m</span><span class=3D"w"> </span><span class=
=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"mi">16</span><spa=
n class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">parameter</span>=
<span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </=
span><span class=3D"n">wmma_n</span><span class=3D"w"> </span><span class=
=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"mi">16</span><spa=
n class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">parameter</span>=
<span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </=
span><span class=3D"n">wmma_k</span><span class=3D"w"> </span><span class=
=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"mi">16</span><spa=
n class=3D"w"></span>

<span class=3D"w">    </span><span class=3D"k">contains</span><span class=
=3D"w"></span>
<span class=3D"w">    </span><span class=3D"c">! kernel for 16 x16 matrices=
 (a, b, and c) using wmma</span>
<span class=3D"w">    </span><span class=3D"c">! Should be launched with on=
e block of 32 threads</span>
<span class=3D"w">    </span><span class=3D"n">attributes</span><span class=
=3D"p">(</span><span class=3D"n">global</span><span class=3D"p">)</span><sp=
an class=3D"w"> </span><span class=3D"k">subroutine </span><span class=3D"n=
">wmma_single</span><span class=3D"p">(</span><span class=3D"n">a</span><sp=
an class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">b</span>=
<span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">c</sp=
an><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">use </span><span class=3D"n"=
>wmma</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">implicit none</span>
<span class=3D"k">    </span><span class=3D"kt">real</span><span class=3D"p=
">(</span><span class=3D"mi">2</span><span class=3D"p">),</span><span class=
=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</span><sp=
an class=3D"n">in</span><span class=3D"p">)</span><span class=3D"w"> </span=
><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">a<=
/span><span class=3D"p">(</span><span class=3D"n">wmma_m</span><span class=
=3D"p">,</span><span class=3D"o">*</span><span class=3D"p">)</span><span cl=
ass=3D"w"> </span><span class=3D"p">,</span><span class=3D"w"> </span><span=
 class=3D"n">b</span><span class=3D"p">(</span><span class=3D"n">wmma_k</sp=
an><span class=3D"p">,</span><span class=3D"o">*</span><span class=3D"p">)<=
/span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">real</span><span class=3D"p=
">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">c</span><span class=3D"p">(</span><span class=3D"n">wmma_m</spa=
n><span class=3D"p">,</span><span class=3D"o">*</span><span class=3D"p">)</=
span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">WMMASubMatrix</span><span cl=
ass=3D"p">(</span><span class=3D"n">WMMAMatrixA</span><span class=3D"p">,</=
span><span class=3D"w"> </span><span class=3D"mi">16</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"mi">16</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"mi">16</span><span =
class=3D"p">,</span><span class=3D"w"> </span><span class=3D"kt">Real</span=
><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">WMMA=
ColMajor</span><span class=3D"p">)</span><span class=3D"w"> </span><span cl=
ass=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">sa</span><s=
pan class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">WMMASubMatrix</span><span cl=
ass=3D"p">(</span><span class=3D"n">WMMAMatrixB</span><span class=3D"p">,</=
span><span class=3D"w"> </span><span class=3D"mi">16</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"mi">16</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"mi">16</span><span =
class=3D"p">,</span><span class=3D"w"> </span><span class=3D"kt">Real</span=
><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">WMMA=
ColMajor</span><span class=3D"p">)</span><span class=3D"w"> </span><span cl=
ass=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">sb</span><s=
pan class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">WMMASubMatrix</span><span cl=
ass=3D"p">(</span><span class=3D"n">WMMAMatrixC</span><span class=3D"p">,</=
span><span class=3D"w"> </span><span class=3D"mi">16</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"mi">16</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"mi">16</span><span =
class=3D"p">,</span><span class=3D"w"> </span><span class=3D"kt">Real</span=
><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">WMMA=
Kind4</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">sc</span><span=
 class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">lda</span><span class=3D"p">,</span><span class=3D"w"> </span><=
span class=3D"n">ldb</span><span class=3D"p">,</span><span class=3D"w"> </s=
pan><span class=3D"n">ldc</span><span class=3D"w"></span>

<span class=3D"w">    </span><span class=3D"n">lda</span><span class=3D"w">=
 </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">wmma_m</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">ldb</span><span class=3D"w">=
 </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">wmma_k</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">ldc</span><span class=3D"w">=
 </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">wmma_m</span><span class=3D"w"></span>

<span class=3D"w">    </span><span class=3D"n">sc</span><span class=3D"w"> =
</span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D=
"mf">0.0_4</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">call </span><span class=3D"n=
">wmmaLoadMatrix</span><span class=3D"p">(</span><span class=3D"n">sa</span=
><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">a</s=
pan><span class=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"mi">1</span><span class=3D=
"p">),</span><span class=3D"w"> </span><span class=3D"n">lda</span><span cl=
ass=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">call </span><span class=3D"n=
">wmmaLoadMatrix</span><span class=3D"p">(</span><span class=3D"n">sb</span=
><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">b</s=
pan><span class=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"mi">1</span><span class=3D=
"p">),</span><span class=3D"w"> </span><span class=3D"n">ldb</span><span cl=
ass=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">call </span><span class=3D"n=
">wmmaMatMul</span><span class=3D"p">(</span><span class=3D"n">sc</span><sp=
an class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">sa</span=
><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">sb</=
span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">=
sc</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">call </span><span class=3D"n=
">wmmaStoreMatrix</span><span class=3D"p">(</span><span class=3D"n">c</span=
><span class=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p">,</=
span><span class=3D"w"> </span><span class=3D"mi">1</span><span class=3D"p"=
>),</span><span class=3D"w"> </span><span class=3D"n">sc</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">ldc</span><span =
class=3D"p">)</span><span class=3D"w"></span>

<span class=3D"w">    </span><span class=3D"k">end subroutine </span><span =
class=3D"n">wmma_single</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">end module </span><span clas=
s=3D"n">m</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell127">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>The call site looks as follows to invoke with a single warp of threads:<=
/p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell128"><span></span><span class=3D"k">call </span><span class=
=3D"n">wmma_single</span><span class=3D"o">&lt;&lt;&lt;</span><span class=
=3D"mi">1</span><span class=3D"p">,</span><span class=3D"mi">32</span><span=
 class=3D"o">&gt;&gt;&gt;</span><span class=3D"p">(</span><span class=3D"n"=
>ah_d</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">bh_d</span><span class=3D"p">,</span><span class=3D"w"> </span><span=
 class=3D"n">c_d</span><span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell128">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>For this simple example, the matrices passed in as arguments to the kern=
el are the same size as the WMMA submatrices. Thus, to perform the matrix m=
ultiplication we simply initialize the C WMMA submatrix to 0.0, load the A =
and B matrices from global memory to WMMA submatrices, perform the matrix m=
ultiplication on the submatrices, and store the result from the WMMA submat=
rix to global memory.</p>
<p>You may have noticed that the thread index <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">threadIdx</span></code> does not appear=
 at all in this code. This underlies the important concept to take away fro=
m this example: the threads in a warp work collectively to accomplish these=
 tasks. So when dealing with the WMMA submatrices, we are doing warp-level =
programming rather than thread-level programming. This kernel is launched w=
ith a single warp of 32 threads, yet each of our WMMA submatrices has 16=C3=
=9716 or 256 elements. When the initialization statement:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell129"><span></span><span class=3D"n">sc</span><span class=3D"w=
"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"mf">0.0_4</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell129">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>is executed, each thread sets 8 elements in the 16=C3=9716 submatrix to =
zero. The mapping of threads to submatrix elements is opaque for this and o=
ther operations involving WMMA submatrices - from a programming standpoint =
we only address what happens collectively by a warp of threads on WMMA subm=
atrices.</p>
<p>The statements that load the A and B from global memory to WMMA submatri=
ces:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell130"><span></span><span class=3D"k">call </span><span class=
=3D"n">wmmaLoadMatrix</span><span class=3D"p">(</span><span class=3D"n">sa<=
/span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n"=
>a</span><span class=3D"p">(</span><span class=3D"mi">1</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"mi">1</span><span c=
lass=3D"p">),</span><span class=3D"w"> </span><span class=3D"n">lda</span><=
span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">call </span><span class=3D"n=
">wmmaLoadMatrix</span><span class=3D"p">(</span><span class=3D"n">sb</span=
><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">b</s=
pan><span class=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"mi">1</span><span class=3D=
"p">),</span><span class=3D"w"> </span><span class=3D"n">ldb</span><span cl=
ass=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell130">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>also work collectively. In these calls, the WMMA submatrices are specifi=
ed as the first argument, and the second arguments contain the addresses of=
 the upper left element of the tiles in global (or shared) memory to be loa=
ded to the WMMA submatrices. The leading dimension of the the matrices in g=
lobal (or shared) memory is the third argument. Note that the arguments pas=
sed to <code class=3D"docutils literal notranslate"><span class=3D"pre">wmm=
aLoadMatrix()</span></code> are the same for all threads in the warp. Becau=
se the mapping of elements to threads in a warp is opaque, each thread just=
 passes the address of the first element in the 16=C3=9716 matrix along wit=
h the leading dimension as the third parameter, and the load operation is d=
istributed amongst the threads in the warp.</p>
<p>The matrix multiplication on the WMMA submatrices is performed by the st=
atement:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell131"><span></span><span class=3D"k">call </span><span class=
=3D"n">wmmaMatMul</span><span class=3D"p">(</span><span class=3D"n">sc</spa=
n><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">sa<=
/span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n"=
>sb</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">sc</span><span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell131">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>which is again performed collectively by a warp of threads. Here used th=
e same accumulator submatrix for the first and last arguments in the <code =
class=3D"docutils literal notranslate"><span class=3D"pre">wmmaMatMul()</sp=
an></code> call, which is why its initialization to zero is required.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">wmm=
aStoreMatrix()</span></code> call:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell132"><span></span><span class=3D"k">call </span><span class=
=3D"n">wmmaStoreMatrix</span><span class=3D"p">(</span><span class=3D"n">c<=
/span><span class=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"mi">1</span><span class=
=3D"p">),</span><span class=3D"w"> </span><span class=3D"n">sc</span><span =
class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">ldc</span><=
span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell132">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>is analogous to the prior <code class=3D"docutils literal notranslate"><=
span class=3D"pre">wmmaLoadMatrix</span></code> calls, but here the first a=
rgument is the address of the upper left element of the tile in global (or =
shared) memory and the second argument is the WMMA submatrix whose values a=
re stored. When both <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">wmmaLoadMatrix()</span></code> and <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">wmmaStoreMatrix()</span></code> are cal=
led with accumulator (<code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">WMMAMatrixC</span></code>) arguments, there is an optional four=
th argument that specifies the storage order. In CUDA Fortran, the default =
is the <code class=3D"docutils literal notranslate"><span class=3D"pre">WMM=
AColMajor</span></code> or column-major storage order.</p>
<p>One final note on arguments to the <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">wmmaLoadMatrix()</span></code> and <code class=
=3D"docutils literal notranslate"><span class=3D"pre">wmmaStoreMatrix()</sp=
an></code> routines. There is a requirement that the leading dimension of t=
he matrices, specified by the third argument of these routines, must be a m=
ultiple of 16 bytes (e.g. 8 <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">real(2)</span></code> words or 4 <code class=3D"docutils =
literal notranslate"><span class=3D"pre">real(4)</span></code> words).</p>
<p>More details about data declaration and wmma operations are available at=
 <a class=3D"reference external" href=3D"https://devblogs.nvidia.com/tensor=
-core-programming-using-cuda-fortran/">Tensor Core Programming Using CUDA F=
ortran https://devblogs.nvidia.com/tensor-core-programming-using-cuda-fortr=
an/</a></p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">wmm=
a</span></code> module also provides access to the following half precision=
 mathematical intrinsics and requires <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">use</span> <span class=3D"pre">wmma</span></cod=
e> in order to access them: <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">abs</span></code>, <code class=3D"docutils literal notran=
slate"><span class=3D"pre">sin</span></code>, <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">cos</span></code>, <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">tan</span></code>, <code class=
=3D"docutils literal notranslate"><span class=3D"pre">acos</span></code>, <=
code class=3D"docutils literal notranslate"><span class=3D"pre">asin</span>=
</code>, <code class=3D"docutils literal notranslate"><span class=3D"pre">a=
tan</span></code>, <code class=3D"docutils literal notranslate"><span class=
=3D"pre">atan2</span></code>, <code class=3D"docutils literal notranslate">=
<span class=3D"pre">sinh</span></code>, <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">cosh</span></code>, <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">tanh</span></code>, <code class=3D"=
docutils literal notranslate"><span class=3D"pre">log</span></code>, <code =
class=3D"docutils literal notranslate"><span class=3D"pre">log10</span></co=
de>, <code class=3D"docutils literal notranslate"><span class=3D"pre">exp</=
span></code>, and <code class=3D"docutils literal notranslate"><span class=
=3D"pre">sqrt</span></code>. It is expected that in a future release, these=
 intrinsics will be available without having to mention <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">use</span> <span class=3D"pre=
">wmma</span></code>.</p>
</section>
</section>
<section id=3D"fortran-host-modules">
<h2><span class=3D"section-number">3.9. </span>Fortran Host Modules<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#fortran-host-modules" title=3D"Perma=
link to this headline">=EF=83=81</a></h2>
<p>The primary Fortran module which NVIDIA provides for CUDA Fortran is nam=
ed <code class=3D"docutils literal notranslate"><span class=3D"pre">cudafor=
</span></code>. This module contains all of the supported interfaces to the=
 CUDA Runtime API listed in the next chapter. In addition, it contains inte=
rfaces to some Fortran array intrinsics which are described in sections bel=
ow.</p>
<p>Beginning in the 25.3 release, the structure of the <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">cudafor</span></code> module h=
as been changed slightly.  The module now includes, or =E2=80=9Cuses=E2=80=
=9D 3 submodules: <code class=3D"docutils literal notranslate"><span class=
=3D"pre">cuda_runtime_api</span></code>, <code class=3D"docutils literal no=
translate"><span class=3D"pre">gpu_reductions</span></code>, and <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">sort</span></code>. =
 The <code class=3D"docutils literal notranslate"><span class=3D"pre">cudaf=
or</span></code> functionality has not changed.  But for new users, or user=
s who have needed to work-around name conflicts in the module, it may be be=
tter to <code class=3D"docutils literal notranslate"><span class=3D"pre">us=
e</span> <span class=3D"pre">cuda_runtime_api</span></code> to expose inter=
faces to the CUDA runtime calls described in Chapter 4 of this guide.</p>
<p>There are a number of other Fortran modules which interface to CUDA Libr=
aries. Those are described thoroughly in the <a class=3D"reference internal=
" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortr=
an-prog-guide/index.html#cf-related-publications"><span class=3D"std std-re=
f">NVIDIA Fortran CUDA Interfaces</span></a> document. These include librar=
ies for computation, like <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">CUBLAS,</span> <span class=3D"pre">CUFFT</span></code>, and=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">CUSPARSE<=
/span></code>, for communication, <code class=3D"docutils literal notransla=
te"><span class=3D"pre">NCCL,</span> <span class=3D"pre">NVSHMEM</span></co=
de>, and for profiling, <code class=3D"docutils literal notranslate"><span =
class=3D"pre">NVTX</span></code>.</p>
<p>One other host module, which we will describe in this chapter, is <code =
class=3D"docutils literal notranslate"><span class=3D"pre">CUTENSOR</span><=
/code>. It has been extended in a module named <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">cutensorex</span></code> and contains =
overloaded interfaces to many more Fortran array intrinsics, some of which =
call into the NVIDIA CUTENSOR library, and some which do not, but they use =
the same deferred evaluation techniques. These implementations operate on d=
evice (or managed) data, and are called from the host.</p>
<section id=3D"overloaded-fortran-reduction-intrinsics-in-gpu-reductions-an=
d-cudafor">
<h3><span class=3D"section-number">3.9.1. </span>Overloaded Fortran Reducti=
on Intrinsics in GPU_REDUCTIONS and CUDAFOR<a class=3D"headerlink" href=3D"=
https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-gu=
ide/index.html#overloaded-fortran-reduction-intrinsics-in-gpu-reductions-an=
d-cudafor" title=3D"Permalink to this headline">=EF=83=81</a></h3>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">SUM=
</span></code>, <code class=3D"docutils literal notranslate"><span class=3D=
"pre">MAXVAL</span></code>, <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">MINVAL</span></code>, <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">MAXLOC</span></code>, and <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">MINLOC</span></code> Fortran =
intrinsics are overloaded to accept device or managed arrays when the cudaf=
or or gpu_reductions module is used, from host code. If the mask optional a=
rgument is used, the mask argument must be either a device logical array, o=
r an expression containing managed operands and constants, i.e. the mask mu=
st be computable on the host but readable on the device. As in standard For=
tran, the mask shape and size, if present, must conform to the data array.<=
/p>
<p>Here is a complete example which performs the sum and maxval reductions =
on the GPU:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell133"><span></span><span class=3D"k">program </span><span clas=
s=3D"n">multidimred</span><span class=3D"w"></span>
<span class=3D"k">use </span><span class=3D"n">cudafor</span><span class=3D=
"w"></span>
<span class=3D"kt">real</span><span class=3D"p">(</span><span class=3D"mi">=
8</span><span class=3D"p">),</span><span class=3D"w"> </span><span class=3D=
"n">managed</span><span class=3D"w"> </span><span class=3D"kd">::</span><sp=
an class=3D"w"> </span><span class=3D"n">a</span><span class=3D"p">(</span>=
<span class=3D"mi">5</span><span class=3D"p">,</span><span class=3D"mi">5</=
span><span class=3D"p">,</span><span class=3D"mi">5</span><span class=3D"p"=
>,</span><span class=3D"mi">5</span><span class=3D"p">,</span><span class=
=3D"mi">5</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"kt">real</span><span class=3D"p">(</span><span class=3D"mi">=
8</span><span class=3D"p">),</span><span class=3D"w"> </span><span class=3D=
"n">managed</span><span class=3D"w"> </span><span class=3D"kd">::</span><sp=
an class=3D"w"> </span><span class=3D"n">b</span><span class=3D"p">(</span>=
<span class=3D"mi">5</span><span class=3D"p">,</span><span class=3D"mi">5</=
span><span class=3D"p">,</span><span class=3D"mi">5</span><span class=3D"p"=
>,</span><span class=3D"mi">5</span><span class=3D"p">)</span><span class=
=3D"w"></span>
<span class=3D"kt">real</span><span class=3D"p">(</span><span class=3D"mi">=
8</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"=
kd">::</span><span class=3D"w"> </span><span class=3D"n">c</span><span clas=
s=3D"w"></span>
<span class=3D"k">call </span><span class=3D"nb">random_number</span><span =
class=3D"p">(</span><span class=3D"n">a</span><span class=3D"p">)</span><sp=
an class=3D"w"></span>
<span class=3D"k">do </span><span class=3D"nb">idim</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"mi">1</span><span class=3D"p">,</span><span class=3D"w"> </span><span c=
lass=3D"mi">5</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">b</span><span class=3D"w"> </s=
pan><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"nb=
">sum</span><span class=3D"p">(</span><span class=3D"n">a</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"nb">dim</span><span=
 class=3D"o">=3D</span><span class=3D"nb">idim</span><span class=3D"p">)</s=
pan><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">c</span><span class=3D"w"> </s=
pan><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"nb=
">max</span><span class=3D"p">(</span><span class=3D"nb">maxval</span><span=
 class=3D"p">(</span><span class=3D"n">b</span><span class=3D"p">),</span><=
span class=3D"w"> </span><span class=3D"n">c</span><span class=3D"p">)</spa=
n><span class=3D"w"></span>
<span class=3D"k">end do</span>
<span class=3D"k">print</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"p">,</span><span class=3D"s2">"Max along any dimensio=
n"</span><span class=3D"p">,</span><span class=3D"n">c</span><span class=3D=
"w"></span>
<span class=3D"k">end program</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell133">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Array slices are also supported. This may run less efficiently on the GP=
U, but is very powerful nonetheless, and useful for debugging:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell134"><span></span><span class=3D"kt">real</span><span class=
=3D"p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span =
class=3D"w"> </span><span class=3D"n">managed</span><span class=3D"w"> </sp=
an><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">=
a</span><span class=3D"p">(</span><span class=3D"n">n</span><span class=3D"=
p">,</span><span class=3D"n">m</span><span class=3D"p">)</span><span class=
=3D"w"></span>
<span class=3D"n">reslt</span><span class=3D"p">(</span><span class=3D"n">i=
x</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"=
o">=3D</span><span class=3D"w"> </span><span class=3D"nb">sum</span><span c=
lass=3D"p">(</span><span class=3D"n">a</span><span class=3D"p">(</span><spa=
n class=3D"mi">2</span><span class=3D"p">:</span><span class=3D"n">n</span>=
<span class=3D"o">-</span><span class=3D"mi">1</span><span class=3D"p">,:))=
</span><span class=3D"w"></span>
<span class=3D"n">reslt</span><span class=3D"p">(</span><span class=3D"n">i=
x</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"=
o">=3D</span><span class=3D"w"> </span><span class=3D"nb">sum</span><span c=
lass=3D"p">(</span><span class=3D"n">a</span><span class=3D"p">(:,</span><s=
pan class=3D"mi">3</span><span class=3D"p">:</span><span class=3D"n">m</spa=
n><span class=3D"o">-</span><span class=3D"mi">2</span><span class=3D"p">))=
</span><span class=3D"w"></span>
<span class=3D"n">reslt</span><span class=3D"p">(</span><span class=3D"n">i=
x</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"=
o">=3D</span><span class=3D"w"> </span><span class=3D"nb">sum</span><span c=
lass=3D"p">(</span><span class=3D"n">a</span><span class=3D"p">(</span><spa=
n class=3D"n">n2</span><span class=3D"p">:</span><span class=3D"n">n</span>=
<span class=3D"p">,</span><span class=3D"n">m2</span><span class=3D"p">:</s=
pan><span class=3D"n">m</span><span class=3D"p">))</span><span class=3D"w">=
</span>
<span class=3D"n">reslt</span><span class=3D"p">(</span><span class=3D"n">i=
x</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"=
o">=3D</span><span class=3D"w"> </span><span class=3D"nb">sum</span><span c=
lass=3D"p">(</span><span class=3D"n">a</span><span class=3D"p">(</span><spa=
n class=3D"mi">1</span><span class=3D"p">:</span><span class=3D"n">n3</span=
><span class=3D"p">,</span><span class=3D"mi">1</span><span class=3D"p">:</=
span><span class=3D"n">m3</span><span class=3D"p">))</span><span class=3D"w=
"></span>
<span class=3D"n">reslt</span><span class=3D"p">(</span><span class=3D"n">i=
x</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"=
o">=3D</span><span class=3D"w"> </span><span class=3D"nb">sum</span><span c=
lass=3D"p">(</span><span class=3D"n">a</span><span class=3D"p">(</span><spa=
n class=3D"n">n2</span><span class=3D"p">:</span><span class=3D"n">n3</span=
><span class=3D"p">,</span><span class=3D"n">m2</span><span class=3D"p">:</=
span><span class=3D"n">m3</span><span class=3D"p">))</span><span class=3D"w=
"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell134">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>By default, intrinsic reductions that are supported on the device will b=
e executed on the device for (large enough) managed arrays. There may be oc=
casions where one would like to perform reductions on managed data on the h=
ost. This can be accomplished using the rename feature of the =E2=80=9Cuse=
=E2=80=9D statement, for example:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell135"><span></span><span class=3D"k">program </span><span clas=
s=3D"n">reductionRename</span><span class=3D"w"></span>
<span class=3D"k">use </span><span class=3D"n">cudafor</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"n">gpusum</span><span =
class=3D"w"> </span><span class=3D"o">=3D&gt;</span><span class=3D"w"> </sp=
an><span class=3D"nb">sum</span>
<span class=3D"k">implicit none</span>
<span class=3D"kt">integer</span><span class=3D"p">,</span><span class=3D"w=
"> </span><span class=3D"n">managed</span><span class=3D"w"> </span><span c=
lass=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">m</span><s=
pan class=3D"p">(</span><span class=3D"mi">3000</span><span class=3D"p">)</=
span><span class=3D"w"></span>
<span class=3D"kt">integer</span><span class=3D"w"> </span><span class=3D"k=
d">::</span><span class=3D"w"> </span><span class=3D"n">istat</span><span c=
lass=3D"w"></span>
<span class=3D"n">m</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"mi">1</span><span class=3D"w"=
></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaDeviceSynchronize=
</span><span class=3D"p">()</span><span class=3D"w"></span>
<span class=3D"k">write</span><span class=3D"p">(</span><span class=3D"o">*=
</span><span class=3D"p">,</span><span class=3D"o">*</span><span class=3D"p=
">)</span><span class=3D"w"> </span><span class=3D"nb">sum</span><span clas=
s=3D"p">(</span><span class=3D"n">m</span><span class=3D"p">)</span><span c=
lass=3D"w">    </span><span class=3D"c">! executes on host</span>
<span class=3D"k">write</span><span class=3D"p">(</span><span class=3D"o">*=
</span><span class=3D"p">,</span><span class=3D"o">*</span><span class=3D"p=
">)</span><span class=3D"w"> </span><span class=3D"n">gpusum</span><span cl=
ass=3D"p">(</span><span class=3D"n">m</span><span class=3D"p">)</span><span=
 class=3D"w"> </span><span class=3D"c">! executes on device</span>
<span class=3D"k">end program</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell135">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Beginning in the NVHPC 23.1 release, all five functions, <code class=3D"=
docutils literal notranslate"><span class=3D"pre">SUM</span></code>, <code =
class=3D"docutils literal notranslate"><span class=3D"pre">MAXVAL</span></c=
ode>, <code class=3D"docutils literal notranslate"><span class=3D"pre">MINV=
AL</span></code>, <code class=3D"docutils literal notranslate"><span class=
=3D"pre">MAXLOC</span></code>, and <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">MINLOC</span></code> can now accept an optional st=
ream argument. If a unique per-thread default stream was set via a call to =
<code class=3D"docutils literal notranslate"><span class=3D"pre">cudaforSet=
DefaultStream</span></code>, the reduction operation will pick that up and =
run on that stream. Given the new, simpler functionality, support for <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">cudaforReductio=
nSetStream()</span></code> and <code class=3D"docutils literal notranslate"=
><span class=3D"pre">cudaforReductionGetStream()</span></code> has been dro=
pped starting in 23.1 as well. For instance:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell136"><span></span><span class=3D"kt">integer</span><span clas=
s=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><=
span class=3D"n">cuda_stream_kind</span><span class=3D"p">)</span><span cla=
ss=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><spa=
n class=3D"n">istrm</span><span class=3D"w"></span>
<span class=3D"w">        </span><span class=3D"n">x</span><span class=3D"w=
"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"nb">sum</span><span class=3D"p">(</span><span class=3D"n">a</span><span=
 class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">stream</sp=
an><span class=3D"o">=3D</span><span class=3D"n">istrm</span><span class=3D=
"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell136">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>is now the simplest way to run a sum reduction on a specific stream.</p>
<p>The following sections describe each function, with current support and =
limitations, in more detail.</p>
<section id=3D"fortran-sum-intrinsic-function">
<h4><span class=3D"section-number">3.9.1.1. </span>Fortran SUM Intrinsic Fu=
nction<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archi=
ve/25.3/compilers/cuda-fortran-prog-guide/index.html#fortran-sum-intrinsic-=
function" title=3D"Permalink to this headline">=EF=83=81</a></h4>
<p>The overloaded interface for <code class=3D"docutils literal notranslate=
"><span class=3D"pre">SUM</span></code> is in the <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">cudafor</span></code> module. It ca=
n return either a scalar, which is most common, or an array, if the optiona=
l <code class=3D"docutils literal notranslate"><span class=3D"pre">dim</spa=
n></code> argument is used. The real(4), real(8), integer(4), and integer(8=
) data types are supported. Complex types may be added in a future release.=
 The input array can be between one and seven dimensions. The two forms are=
:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell137"><span></span><span class=3D"k">function </span><span cla=
ss=3D"nb">sum</span><span class=3D"w"> </span><span class=3D"p">(</span><sp=
an class=3D"w"> </span><span class=3D"k">array</span><span class=3D"p">,</s=
pan><span class=3D"w"> </span><span class=3D"n">mask</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"n">stream</span><span cl=
ass=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"> </span><span=
 class=3D"k">result</span><span class=3D"p">(</span><span class=3D"n">res</=
span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"n">device</span><span cla=
ss=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><spa=
n class=3D"k">array</span><span class=3D"p">(...)</span><span class=3D"w"> =
 </span><span class=3D"c">! type is real or integer, kind =3D 4 or 8</span>
<span class=3D"w">    </span><span class=3D"kt">logical</span><span class=
=3D"p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span =
class=3D"w"> </span><span class=3D"n">device</span><span class=3D"p">,</spa=
n><span class=3D"w"> </span><span class=3D"k">optional</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><span =
class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span><s=
pan class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </sp=
an><span class=3D"n">mask</span><span class=3D"p">(...)</span><span class=
=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><s=
pan class=3D"n">cuda_stream_kind</span><span class=3D"p">),</span><span cla=
ss=3D"w"> </span><span class=3D"k">optional</span><span class=3D"p">,</span=
><span class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p"=
>(</span><span class=3D"n">in</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">stream</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"k">intent</span><span cla=
ss=3D"p">(</span><span class=3D"n">out</span><span class=3D"p">)</span><spa=
n class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span=
><span class=3D"n">res</span><span class=3D"w"> </span><span class=3D"c">! =
same type as array</span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell137">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell138"><span></span><span class=3D"k">function </span><span cla=
ss=3D"nb">sum</span><span class=3D"w"> </span><span class=3D"p">(</span><sp=
an class=3D"w"> </span><span class=3D"k">array</span><span class=3D"p">,</s=
pan><span class=3D"w"> </span><span class=3D"nb">dim</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"n">mask</span><span clas=
s=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">stream</span><s=
pan class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"> </span=
><span class=3D"k">result</span><span class=3D"p">(</span><span class=3D"n"=
>res</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"n">device</span><span cla=
ss=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><spa=
n class=3D"k">array</span><span class=3D"p">(...)</span><span class=3D"w"> =
 </span><span class=3D"c">! type is real or integer, kind =3D 4 or 8</span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span =
class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</spa=
n><span class=3D"n">in</span><span class=3D"p">)</span><span class=3D"w"> <=
/span><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"=
nb">dim</span>
<span class=3D"nb">    </span><span class=3D"kt">logical</span><span class=
=3D"p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span =
class=3D"w"> </span><span class=3D"n">device</span><span class=3D"p">,</spa=
n><span class=3D"w"> </span><span class=3D"k">optional</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><span =
class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span><s=
pan class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </sp=
an><span class=3D"n">mask</span><span class=3D"p">(...)</span><span class=
=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><s=
pan class=3D"n">cuda_stream_kind</span><span class=3D"p">),</span><span cla=
ss=3D"w"> </span><span class=3D"k">optional</span><span class=3D"p">,</span=
><span class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p"=
>(</span><span class=3D"n">in</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">stream</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"k">allocatable</span><spa=
n class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">managed</=
span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">=
intent</span><span class=3D"p">(</span><span class=3D"n">out</span><span cl=
ass=3D"p">)</span><span class=3D"w"> </span><span class=3D"kd">::</span><sp=
an class=3D"w"> </span><span class=3D"n">res</span><span class=3D"p">(...)<=
/span><span class=3D"w"> </span><span class=3D"c">! same type as array</spa=
n>
<span class=3D"w">                                               </span><sp=
an class=3D"c">! rank is one less than array</span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell138">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"fortran-maxval-intrinsic-function">
<h4><span class=3D"section-number">3.9.1.2. </span>Fortran MAXVAL Intrinsic=
 Function<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/ar=
chive/25.3/compilers/cuda-fortran-prog-guide/index.html#fortran-maxval-intr=
insic-function" title=3D"Permalink to this headline">=EF=83=81</a></h4>
<p>The overloaded interface for <code class=3D"docutils literal notranslate=
"><span class=3D"pre">MAXVAL</span></code>, which returns the maximum value=
 of an element in the array, is in the <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">cudafor</span></code> module. It can return ei=
ther a scalar, which is most common, or an array, if the optional <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">dim</span></code> a=
rgument is used. The real(4), real(8), integer(4), and integer(8) data type=
s are supported. The input array can be between one and seven dimensions. T=
he two forms are:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell139"><span></span><span class=3D"k">function </span><span cla=
ss=3D"nb">maxval</span><span class=3D"w"> </span><span class=3D"p">(</span>=
<span class=3D"w"> </span><span class=3D"k">array</span><span class=3D"p">,=
</span><span class=3D"w"> </span><span class=3D"n">mask</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">stream</span><sp=
an class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"> </span>=
<span class=3D"k">result</span><span class=3D"p">(</span><span class=3D"n">=
res</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"n">device</span><span cla=
ss=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><spa=
n class=3D"k">array</span><span class=3D"p">(...)</span><span class=3D"w"> =
 </span><span class=3D"c">! type is real or integer, kind =3D 4 or 8</span>
<span class=3D"w">    </span><span class=3D"kt">logical</span><span class=
=3D"p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span =
class=3D"w"> </span><span class=3D"n">device</span><span class=3D"p">,</spa=
n><span class=3D"w"> </span><span class=3D"k">optional</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><span =
class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span><s=
pan class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </sp=
an><span class=3D"n">mask</span><span class=3D"p">(...)</span><span class=
=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><s=
pan class=3D"n">cuda_stream_kind</span><span class=3D"p">),</span><span cla=
ss=3D"w"> </span><span class=3D"k">optional</span><span class=3D"p">,</span=
><span class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p"=
>(</span><span class=3D"n">in</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">stream</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"k">intent</span><span cla=
ss=3D"p">(</span><span class=3D"n">out</span><span class=3D"p">)</span><spa=
n class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span=
><span class=3D"n">res</span><span class=3D"w"> </span><span class=3D"c">! =
same type as array</span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell139">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell140"><span></span><span class=3D"k">function </span><span cla=
ss=3D"nb">maxval</span><span class=3D"w"> </span><span class=3D"p">(</span>=
<span class=3D"w"> </span><span class=3D"k">array</span><span class=3D"p">,=
</span><span class=3D"w"> </span><span class=3D"nb">dim</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">mask</span><span=
 class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">stream</sp=
an><span class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"> <=
/span><span class=3D"k">result</span><span class=3D"p">(</span><span class=
=3D"n">res</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"n">device</span><span cla=
ss=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><spa=
n class=3D"k">array</span><span class=3D"p">(...)</span><span class=3D"w"> =
 </span><span class=3D"c">! type is real or integer, kind =3D 4 or 8</span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span =
class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</spa=
n><span class=3D"n">in</span><span class=3D"p">)</span><span class=3D"w"> <=
/span><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"=
nb">dim</span>
<span class=3D"nb">    </span><span class=3D"kt">logical</span><span class=
=3D"p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span =
class=3D"w"> </span><span class=3D"n">device</span><span class=3D"p">,</spa=
n><span class=3D"w"> </span><span class=3D"k">optional</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><span =
class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span><s=
pan class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </sp=
an><span class=3D"n">mask</span><span class=3D"p">(...)</span><span class=
=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><s=
pan class=3D"n">cuda_stream_kind</span><span class=3D"p">),</span><span cla=
ss=3D"w"> </span><span class=3D"k">optional</span><span class=3D"p">,</span=
><span class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p"=
>(</span><span class=3D"n">in</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">stream</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"k">allocatable</span><spa=
n class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">managed</=
span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">=
intent</span><span class=3D"p">(</span><span class=3D"n">out</span><span cl=
ass=3D"p">)</span><span class=3D"w"> </span><span class=3D"kd">::</span><sp=
an class=3D"w"> </span><span class=3D"n">res</span><span class=3D"p">(...)<=
/span><span class=3D"w"> </span><span class=3D"c">! same type as array</spa=
n>
<span class=3D"w">                                               </span><sp=
an class=3D"c">! rank is one less than array</span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell140">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"fortran-minval-intrinsic-function">
<h4><span class=3D"section-number">3.9.1.3. </span>Fortran MINVAL Intrinsic=
 Function<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/ar=
chive/25.3/compilers/cuda-fortran-prog-guide/index.html#fortran-minval-intr=
insic-function" title=3D"Permalink to this headline">=EF=83=81</a></h4>
<p>The overloaded interface for <code class=3D"docutils literal notranslate=
"><span class=3D"pre">MINVAL</span></code>, which returns the minimum value=
 of an element in the array, is in the <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">cudafor</span></code> module. It can return ei=
ther a scalar, which is most common, or an array, if the optional <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">dim</span></code> a=
rgument is used. The real(4), real(8), integer(4), and integer(8) data type=
s are supported. The input array can be between one and seven dimensions. T=
he two forms are:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell141"><span></span><span class=3D"k">function </span><span cla=
ss=3D"nb">minval</span><span class=3D"w"> </span><span class=3D"p">(</span>=
<span class=3D"w"> </span><span class=3D"k">array</span><span class=3D"p">,=
</span><span class=3D"w"> </span><span class=3D"n">mask</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">stream</span><sp=
an class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"> </span>=
<span class=3D"k">result</span><span class=3D"p">(</span><span class=3D"n">=
res</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"n">device</span><span cla=
ss=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><spa=
n class=3D"k">array</span><span class=3D"p">(...)</span><span class=3D"w"> =
 </span><span class=3D"c">! type is real or integer, kind =3D 4 or 8</span>
<span class=3D"w">    </span><span class=3D"kt">logical</span><span class=
=3D"p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span =
class=3D"w"> </span><span class=3D"n">device</span><span class=3D"p">,</spa=
n><span class=3D"w"> </span><span class=3D"k">optional</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><span =
class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span><s=
pan class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </sp=
an><span class=3D"n">mask</span><span class=3D"p">(...)</span><span class=
=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><s=
pan class=3D"n">cuda_stream_kind</span><span class=3D"p">),</span><span cla=
ss=3D"w"> </span><span class=3D"k">optional</span><span class=3D"p">,</span=
><span class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p"=
>(</span><span class=3D"n">in</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">stream</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"k">intent</span><span cla=
ss=3D"p">(</span><span class=3D"n">out</span><span class=3D"p">)</span><spa=
n class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span=
><span class=3D"n">res</span><span class=3D"w"> </span><span class=3D"c">! =
same type as array</span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell141">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell142"><span></span><span class=3D"k">function </span><span cla=
ss=3D"nb">minval</span><span class=3D"w"> </span><span class=3D"p">(</span>=
<span class=3D"w"> </span><span class=3D"k">array</span><span class=3D"p">,=
</span><span class=3D"w"> </span><span class=3D"nb">dim</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">mask</span><span=
 class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">stream</sp=
an><span class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"> <=
/span><span class=3D"k">result</span><span class=3D"p">(</span><span class=
=3D"n">res</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"n">device</span><span cla=
ss=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><spa=
n class=3D"k">array</span><span class=3D"p">(...)</span><span class=3D"w"> =
 </span><span class=3D"c">! type is real or integer, kind =3D 4 or 8</span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span =
class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</spa=
n><span class=3D"n">in</span><span class=3D"p">)</span><span class=3D"w"> <=
/span><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"=
nb">dim</span>
<span class=3D"nb">    </span><span class=3D"kt">logical</span><span class=
=3D"p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span =
class=3D"w"> </span><span class=3D"n">device</span><span class=3D"p">,</spa=
n><span class=3D"w"> </span><span class=3D"k">optional</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><span =
class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span><s=
pan class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </sp=
an><span class=3D"n">mask</span><span class=3D"p">(...)</span><span class=
=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><s=
pan class=3D"n">cuda_stream_kind</span><span class=3D"p">),</span><span cla=
ss=3D"w"> </span><span class=3D"k">optional</span><span class=3D"p">,</span=
><span class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p"=
>(</span><span class=3D"n">in</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">stream</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"k">allocatable</span><spa=
n class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">managed</=
span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">=
intent</span><span class=3D"p">(</span><span class=3D"n">out</span><span cl=
ass=3D"p">)</span><span class=3D"w"> </span><span class=3D"kd">::</span><sp=
an class=3D"w"> </span><span class=3D"n">res</span><span class=3D"p">(...)<=
/span><span class=3D"w"> </span><span class=3D"c">! same type as array</spa=
n>
<span class=3D"w">                                               </span><sp=
an class=3D"c">! rank is one less than array</span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell142">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"fortran-maxloc-intrinsic-function">
<h4><span class=3D"section-number">3.9.1.4. </span>Fortran MAXLOC Intrinsic=
 Function<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/ar=
chive/25.3/compilers/cuda-fortran-prog-guide/index.html#fortran-maxloc-intr=
insic-function" title=3D"Permalink to this headline">=EF=83=81</a></h4>
<p>The overloaded interface for <code class=3D"docutils literal notranslate=
"><span class=3D"pre">MAXLOC</span></code>, which returns an array of indic=
es, starting at 1, identifying the maximum value of an element in the array=
 which appears first, is in the <code class=3D"docutils literal notranslate=
"><span class=3D"pre">cudafor</span></code> module. The size of the functio=
n result is equal to the rank of the input array, and is an integer host ar=
ray. The real(4), real(8), integer(4), and integer(8) data types are suppor=
ted. The input array can be between one and seven dimensions. The dim argum=
ent is only supported for 1-D arrays, in which case the result is a scalar =
rather than an array of size=3D1. There are also optional kind, back, and s=
tream arguments, the first two of those being standard Fortran, and the lat=
ter being a CUDA Fortran extension.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell143"><span></span><span class=3D"k">function </span><span cla=
ss=3D"nb">maxloc</span><span class=3D"w"> </span><span class=3D"p">(</span>=
<span class=3D"w"> </span><span class=3D"k">array</span><span class=3D"p">,=
</span><span class=3D"w"> </span><span class=3D"n">mask</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"nb">kind</span><spa=
n class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">back</spa=
n><span class=3D"w"> </span><span class=3D"n">stream</span><span class=3D"w=
"> </span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"k">result</span><span class=3D"p">(</span><span class=3D"n">res</span><=
span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"n">device</span><span cla=
ss=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><spa=
n class=3D"k">array</span><span class=3D"p">(...)</span><span class=3D"w"> =
 </span><span class=3D"c">! type is real or integer, kind =3D 4 or 8</span>
<span class=3D"w">    </span><span class=3D"kt">logical</span><span class=
=3D"p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span =
class=3D"w"> </span><span class=3D"n">device</span><span class=3D"p">,</spa=
n><span class=3D"w"> </span><span class=3D"k">optional</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><span =
class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span><s=
pan class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </sp=
an><span class=3D"n">mask</span><span class=3D"p">(...)</span><span class=
=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">optional</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent=
</span><span class=3D"p">(</span><span class=3D"n">in</span><span class=3D"=
p">)</span><span class=3D"w"> </span><span class=3D"kd">::</span><span clas=
s=3D"w"> </span><span class=3D"nb">kind</span>
<span class=3D"nb">    </span><span class=3D"kt">logical</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">optional</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent=
</span><span class=3D"p">(</span><span class=3D"n">in</span><span class=3D"=
p">)</span><span class=3D"w"> </span><span class=3D"kd">::</span><span clas=
s=3D"w"> </span><span class=3D"n">back</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><s=
pan class=3D"n">cuda_stream_kind</span><span class=3D"p">),</span><span cla=
ss=3D"w"> </span><span class=3D"k">optional</span><span class=3D"p">,</span=
><span class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p"=
>(</span><span class=3D"n">in</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">stream</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">out</span><span class=3D"p">)</spa=
n><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> =
</span><span class=3D"n">res</span><span class=3D"p">(</span><span class=3D=
"o">*</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"c">! Size of res is equal to rank of array</span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell143">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"fortran-minloc-intrinsic-function">
<h4><span class=3D"section-number">3.9.1.5. </span>Fortran MINLOC Intrinsic=
 Function<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/ar=
chive/25.3/compilers/cuda-fortran-prog-guide/index.html#fortran-minloc-intr=
insic-function" title=3D"Permalink to this headline">=EF=83=81</a></h4>
<p>The overloaded interface for <code class=3D"docutils literal notranslate=
"><span class=3D"pre">MINLOC</span></code>, which returns an array of indic=
es, starting at 1, identifying the minimum value of an element in the array=
 which appears first, is in the <code class=3D"docutils literal notranslate=
"><span class=3D"pre">cudafor</span></code> module. The size of the functio=
n result is equal to the rank of the input array, and is an integer host ar=
ray. The real(4), real(8), integer(4), and integer(8) data types are suppor=
ted. The input array can be between one and seven dimensions. The dim argum=
ent is only supported for 1-D arrays, in which case the result is a scalar =
rather than an array of size=3D1. There are also optional kind, back, and s=
tream arguments, the first two of those being standard Fortran, and the lat=
ter being a CUDA Fortran extension.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell144"><span></span><span class=3D"k">function </span><span cla=
ss=3D"nb">minloc</span><span class=3D"w"> </span><span class=3D"p">(</span>=
<span class=3D"w"> </span><span class=3D"k">array</span><span class=3D"p">,=
</span><span class=3D"w"> </span><span class=3D"n">mask</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"nb">kind</span><spa=
n class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">back</spa=
n><span class=3D"w"> </span><span class=3D"n">stream</span><span class=3D"w=
"> </span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"k">result</span><span class=3D"p">(</span><span class=3D"n">res</span><=
span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"n">device</span><span cla=
ss=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><spa=
n class=3D"k">array</span><span class=3D"p">(...)</span><span class=3D"w"> =
 </span><span class=3D"c">! type is real or integer, kind =3D 4 or 8</span>
<span class=3D"w">    </span><span class=3D"kt">logical</span><span class=
=3D"p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span =
class=3D"w"> </span><span class=3D"n">device</span><span class=3D"p">,</spa=
n><span class=3D"w"> </span><span class=3D"k">optional</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><span =
class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span><s=
pan class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </sp=
an><span class=3D"n">mask</span><span class=3D"p">(...)</span><span class=
=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">optional</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent=
</span><span class=3D"p">(</span><span class=3D"n">in</span><span class=3D"=
p">)</span><span class=3D"w"> </span><span class=3D"kd">::</span><span clas=
s=3D"w"> </span><span class=3D"nb">kind</span>
<span class=3D"nb">    </span><span class=3D"kt">logical</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">optional</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent=
</span><span class=3D"p">(</span><span class=3D"n">in</span><span class=3D"=
p">)</span><span class=3D"w"> </span><span class=3D"kd">::</span><span clas=
s=3D"w"> </span><span class=3D"n">back</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><s=
pan class=3D"n">cuda_stream_kind</span><span class=3D"p">),</span><span cla=
ss=3D"w"> </span><span class=3D"k">optional</span><span class=3D"p">,</span=
><span class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p"=
>(</span><span class=3D"n">in</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">stream</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">out</span><span class=3D"p">)</spa=
n><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> =
</span><span class=3D"n">res</span><span class=3D"p">(</span><span class=3D=
"o">*</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"c">! Size of res is equal to rank of array</span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell144">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
</section>
<section id=3D"fortran-sorting-subroutines-module">
<h3><span class=3D"section-number">3.9.2. </span>Fortran Sorting Subroutine=
s Module<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/arc=
hive/25.3/compilers/cuda-fortran-prog-guide/index.html#fortran-sorting-subr=
outines-module" title=3D"Permalink to this headline">=EF=83=81</a></h3>
<p>Typically, for best performance, we recommend generating sort routines u=
sing CUDA Thrust, the nvcc compiler, and calling those functions from Fortr=
an. Starting with the 23.5 release, we also include basic sort subroutines =
as part of the CUDA Fortran libraries, which are readily available and may =
provide =E2=80=9Cgood enough=E2=80=9D performance.</p>
<p>The interfaces to the library functions can be accessed by adding <code =
class=3D"docutils literal notranslate"><span class=3D"pre">use</span> <span=
 class=3D"pre">sort</span></code> to your code, and the overloaded sorting =
subroutine is named <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">fsort()</span></code>. The library provides a radix sort implemen=
tation for integer(4), integer(8), real(4), and real(8) arrays. The subrout=
ines can accept either host, managed, or device arrays. The subroutines can=
 also accept an index array, to return the sort permutations. Other optiona=
l arguments are listed below.</p>
<p>Here is a simple example which sorts an array of reals on the GPU:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell145"><span></span><span class=3D"k">program </span><span clas=
s=3D"n">sortit</span><span class=3D"w"></span>
<span class=3D"k">use </span><span class=3D"n">sort</span><span class=3D"w"=
></span>
<span class=3D"kt">real</span><span class=3D"p">(</span><span class=3D"mi">=
4</span><span class=3D"p">),</span><span class=3D"w"> </span><span class=3D=
"n">managed</span><span class=3D"w"> </span><span class=3D"kd">::</span><sp=
an class=3D"w"> </span><span class=3D"n">a</span><span class=3D"p">(</span>=
<span class=3D"mi">1000</span><span class=3D"p">)</span><span class=3D"w"><=
/span>
<span class=3D"k">call </span><span class=3D"nb">random_number</span><span =
class=3D"p">(</span><span class=3D"n">a</span><span class=3D"p">)</span><sp=
an class=3D"w"></span>
<span class=3D"k">call </span><span class=3D"n">fsort</span><span class=3D"=
p">(</span><span class=3D"n">a</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"mi">1000</span><span class=3D"p">)</span><spa=
n class=3D"w"></span>
<span class=3D"k">print</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"p">,</span><span class=3D"k">all</span><span class=3D=
"p">(</span><span class=3D"n">a</span><span class=3D"p">(</span><span class=
=3D"mi">1</span><span class=3D"p">:</span><span class=3D"mi">999</span><spa=
n class=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">.</span><=
span class=3D"n">le</span><span class=3D"p">.</span><span class=3D"w"> </sp=
an><span class=3D"n">a</span><span class=3D"p">(</span><span class=3D"mi">2=
</span><span class=3D"p">:</span><span class=3D"mi">1000</span><span class=
=3D"p">))</span><span class=3D"w"></span>
<span class=3D"k">end program</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell145">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>The host and device functionality is divided into four types of calls, a=
nd the arguments for each are:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell146"><span></span><span class=3D"c">! Host arrays, no indices=
</span>
<span class=3D"k">subroutine </span><span class=3D"n">fsort</span><span cla=
ss=3D"p">(</span><span class=3D"k">array</span><span class=3D"p">,</span><s=
pan class=3D"w"> </span><span class=3D"n">n</span><span class=3D"p">,</span=
><span class=3D"w"> </span><span class=3D"n">stream</span><span class=3D"p"=
>)</span><span class=3D"w"></span>
<span class=3D"k">type</span><span class=3D"p">(</span><span class=3D"nb">k=
ind</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"kd">::</span><span class=3D"w"> </span><span class=3D"k">array</span><s=
pan class=3D"p">(</span><span class=3D"o">*</span><span class=3D"p">)</span=
><span class=3D"w">  </span><span class=3D"c">! Type is integer or real, ki=
nd is 4 or 8</span>
<span class=3D"kt">integer</span><span class=3D"p">(</span><span class=3D"n=
b">kind</span><span class=3D"p">)</span><span class=3D"w"> </span><span cla=
ss=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">n</span><spa=
n class=3D"w">      </span><span class=3D"c">! kind is 4 or 8</span>
<span class=3D"kt">integer</span><span class=3D"p">(</span><span class=3D"n=
b">kind</span><span class=3D"o">=3D</span><span class=3D"n">cuda_stream_kin=
d</span><span class=3D"p">),</span><span class=3D"w"> </span><span class=3D=
"k">optional</span><span class=3D"w"> </span><span class=3D"kd">::</span><s=
pan class=3D"w"> </span><span class=3D"n">stream</span><span class=3D"w"></=
span>
<span class=3D"k">end subroutine</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell146">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell147"><span></span><span class=3D"c">! Host arrays, with indic=
es</span>
<span class=3D"k">subroutine </span><span class=3D"n">fsort</span><span cla=
ss=3D"p">(</span><span class=3D"k">array</span><span class=3D"p">,</span><s=
pan class=3D"w"> </span><span class=3D"n">indices</span><span class=3D"p">,=
</span><span class=3D"w"> </span><span class=3D"n">n</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"n">init_index</span><spa=
n class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">stream</s=
pan><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"k">type</span><span class=3D"p">(</span><span class=3D"nb">k=
ind</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"kd">::</span><span class=3D"w"> </span><span class=3D"k">array</span><s=
pan class=3D"p">(</span><span class=3D"o">*</span><span class=3D"p">)</span=
><span class=3D"w">  </span><span class=3D"c">! Type is integer or real, ki=
nd is 4 or 8</span>
<span class=3D"kt">integer</span><span class=3D"p">(</span><span class=3D"m=
i">4</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">indices</span>=
<span class=3D"p">(</span><span class=3D"o">*</span><span class=3D"p">)</sp=
an><span class=3D"w"></span>
<span class=3D"kt">integer</span><span class=3D"p">(</span><span class=3D"n=
b">kind</span><span class=3D"p">)</span><span class=3D"w"> </span><span cla=
ss=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">n</span><spa=
n class=3D"w">      </span><span class=3D"c">! kind is 4 or 8</span>
<span class=3D"kt">logical</span><span class=3D"p">(</span><span class=3D"m=
i">4</span><span class=3D"p">),</span><span class=3D"w"> </span><span class=
=3D"k">optional</span><span class=3D"w"> </span><span class=3D"kd">::</span=
><span class=3D"w"> </span><span class=3D"n">init_index</span><span class=
=3D"w">  </span><span class=3D"c">! Flag to initialize the indices to 1..n<=
/span>
<span class=3D"kt">integer</span><span class=3D"p">(</span><span class=3D"n=
b">kind</span><span class=3D"o">=3D</span><span class=3D"n">cuda_stream_kin=
d</span><span class=3D"p">),</span><span class=3D"w"> </span><span class=3D=
"k">optional</span><span class=3D"w"> </span><span class=3D"kd">::</span><s=
pan class=3D"w"> </span><span class=3D"n">stream</span><span class=3D"w"></=
span>
<span class=3D"k">end subroutine</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell147">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell148"><span></span><span class=3D"c">! Managed or device array=
s, no indices</span>
<span class=3D"k">subroutine </span><span class=3D"n">fsort</span><span cla=
ss=3D"p">(</span><span class=3D"k">array</span><span class=3D"p">,</span><s=
pan class=3D"w"> </span><span class=3D"n">n</span><span class=3D"p">,</span=
><span class=3D"w"> </span><span class=3D"n">workspace</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"n">worksize</span><spa=
n class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">stream</s=
pan><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"k">type</span><span class=3D"p">(</span><span class=3D"nb">k=
ind</span><span class=3D"p">),</span><span class=3D"w"> </span><span class=
=3D"n">device</span><span class=3D"w"> </span><span class=3D"kd">::</span><=
span class=3D"w"> </span><span class=3D"k">array</span><span class=3D"p">(<=
/span><span class=3D"o">*</span><span class=3D"p">)</span><span class=3D"w"=
>  </span><span class=3D"c">! Type is integer or real, kind is 4 or 8</span=
>
<span class=3D"kt">integer</span><span class=3D"p">(</span><span class=3D"n=
b">kind</span><span class=3D"p">)</span><span class=3D"w"> </span><span cla=
ss=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">n</span><spa=
n class=3D"w">      </span><span class=3D"c">! kind is 4 or 8</span>
<span class=3D"k">type</span><span class=3D"p">(</span><span class=3D"nb">k=
ind</span><span class=3D"p">),</span><span class=3D"w"> </span><span class=
=3D"n">device</span><span class=3D"p">,</span><span class=3D"w"> </span><sp=
an class=3D"k">optional</span><span class=3D"w"> </span><span class=3D"kd">=
::</span><span class=3D"w"> </span><span class=3D"n">workspace</span><span =
class=3D"p">(</span><span class=3D"o">*</span><span class=3D"p">)</span><sp=
an class=3D"w">  </span><span class=3D"c">! Same type as array</span>
<span class=3D"kt">integer</span><span class=3D"p">(</span><span class=3D"m=
i">8</span><span class=3D"p">),</span><span class=3D"w"> </span><span class=
=3D"k">optional</span><span class=3D"w"> </span><span class=3D"kd">::</span=
><span class=3D"w"> </span><span class=3D"n">worksize</span><span class=3D"=
w">              </span><span class=3D"c">! Size of workspace in elements</=
span>
<span class=3D"kt">integer</span><span class=3D"p">(</span><span class=3D"n=
b">kind</span><span class=3D"o">=3D</span><span class=3D"n">cuda_stream_kin=
d</span><span class=3D"p">),</span><span class=3D"w"> </span><span class=3D=
"k">optional</span><span class=3D"w"> </span><span class=3D"kd">::</span><s=
pan class=3D"w"> </span><span class=3D"n">stream</span><span class=3D"w"></=
span>
<span class=3D"k">end subroutine</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell148">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell149"><span></span><span class=3D"c">! Managed or device array=
s, with indices</span>
<span class=3D"k">subroutine </span><span class=3D"n">fsort</span><span cla=
ss=3D"p">(</span><span class=3D"k">array</span><span class=3D"p">,</span><s=
pan class=3D"w"> </span><span class=3D"n">indices</span><span class=3D"p">,=
</span><span class=3D"w"> </span><span class=3D"n">n</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"n">init_index</span><spa=
n class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">workspace=
</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n=
">worksize</span><span class=3D"p">,</span><span class=3D"w"> </span><span =
class=3D"n">stream</span><span class=3D"p">)</span><span class=3D"w"></span=
>
<span class=3D"k">type</span><span class=3D"p">(</span><span class=3D"nb">k=
ind</span><span class=3D"p">),</span><span class=3D"w"> </span><span class=
=3D"n">device</span><span class=3D"w"> </span><span class=3D"kd">::</span><=
span class=3D"w"> </span><span class=3D"k">array</span><span class=3D"p">(<=
/span><span class=3D"o">*</span><span class=3D"p">)</span><span class=3D"w"=
>  </span><span class=3D"c">! Type is integer or real, kind is 4 or 8</span=
>
<span class=3D"kt">integer</span><span class=3D"p">(</span><span class=3D"m=
i">4</span><span class=3D"p">),</span><span class=3D"w"> </span><span class=
=3D"n">device</span><span class=3D"w"> </span><span class=3D"kd">::</span><=
span class=3D"w"> </span><span class=3D"n">indices</span><span class=3D"p">=
(</span><span class=3D"o">*</span><span class=3D"p">)</span><span class=3D"=
w"></span>
<span class=3D"kt">integer</span><span class=3D"p">(</span><span class=3D"n=
b">kind</span><span class=3D"p">)</span><span class=3D"w"> </span><span cla=
ss=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">n</span><spa=
n class=3D"w">      </span><span class=3D"c">! kind is 4 or 8</span>
<span class=3D"kt">logical</span><span class=3D"p">(</span><span class=3D"m=
i">4</span><span class=3D"p">),</span><span class=3D"w"> </span><span class=
=3D"k">optional</span><span class=3D"w"> </span><span class=3D"kd">::</span=
><span class=3D"w"> </span><span class=3D"n">init_index</span><span class=
=3D"w">  </span><span class=3D"c">! Flag to initialize the indices to 1..n<=
/span>
<span class=3D"k">type</span><span class=3D"p">(</span><span class=3D"nb">k=
ind</span><span class=3D"p">),</span><span class=3D"w"> </span><span class=
=3D"n">device</span><span class=3D"p">,</span><span class=3D"w"> </span><sp=
an class=3D"k">optional</span><span class=3D"w"> </span><span class=3D"kd">=
::</span><span class=3D"w"> </span><span class=3D"n">workspace</span><span =
class=3D"p">(</span><span class=3D"o">*</span><span class=3D"p">)</span><sp=
an class=3D"w">  </span><span class=3D"c">! Same type as array</span>
<span class=3D"kt">integer</span><span class=3D"p">(</span><span class=3D"m=
i">8</span><span class=3D"p">),</span><span class=3D"w"> </span><span class=
=3D"k">optional</span><span class=3D"w"> </span><span class=3D"kd">::</span=
><span class=3D"w"> </span><span class=3D"n">worksize</span><span class=3D"=
w">              </span><span class=3D"c">! Size of workspace in elements</=
span>
<span class=3D"kt">integer</span><span class=3D"p">(</span><span class=3D"n=
b">kind</span><span class=3D"o">=3D</span><span class=3D"n">cuda_stream_kin=
d</span><span class=3D"p">),</span><span class=3D"w"> </span><span class=3D=
"k">optional</span><span class=3D"w"> </span><span class=3D"kd">::</span><s=
pan class=3D"w"> </span><span class=3D"n">stream</span><span class=3D"w"></=
span>
<span class=3D"k">end subroutine</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell149">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Without a provided workspace argument, the subroutines will allocate tem=
porary work space using either cudaMalloc(), or cudaMallocAsync(), dependin=
g on the CUDA version support and whether the stream is specified. The amou=
nt of workspace required to avoid temporary allocations for the subroutines=
 which take the worksize argument is roughly N elements, kind equal to 4 or=
 8, plus up to another 2 MBytes above that. For instance, sorting an intege=
r(4) array of size 10 million will use workspace of roughly 42 MBytes or 10=
.5 million elements.</p>
</section>
<section id=3D"overloaded-fortran-reduction-intrinsics-in-cutensorex">
<h3><span class=3D"section-number">3.9.3. </span>Overloaded Fortran Reducti=
on Intrinsics in CUTENSOREX<a class=3D"headerlink" href=3D"https://docs.nvi=
dia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#o=
verloaded-fortran-reduction-intrinsics-in-cutensorex" title=3D"Permalink to=
 this headline">=EF=83=81</a></h3>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">ALL=
</span></code>, <code class=3D"docutils literal notranslate"><span class=3D=
"pre">ANY</span></code>, and <code class=3D"docutils literal notranslate"><=
span class=3D"pre">COUNT</span></code> Fortran intrinsics are overloaded to=
 accept device or managed arrays when the cutensorex module is used, from h=
ost code. As these three functions operate only on a mask, a different tact=
 was chosen to make these functions more flexible, and recognize and effici=
ently evaluate commonly-used mask expressions.</p>
<p>Using the same deferred evaluation and assignment techniques that were u=
sed in cutensorex for matmul(), spread(), transpose(), and reshape(), begin=
ning in the 23.1 release we now support more F90 array intrinsic operations=
.</p>
<p>These three functions do not call into the cuTensor library, but build u=
pon and extend the software infrastructure developed previously for those w=
rappers.</p>
<p>First, here are the mask expressions which are recognized for deferred e=
valuation:</p>
<p>For A, B, x, dx, alpha, beta</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell150"><span></span><span class=3D"n">A</span><span class=3D"w"=
> </span><span class=3D"k">is </span><span class=3D"n">a</span><span class=
=3D"w"> </span><span class=3D"n">device</span><span class=3D"w"> </span><sp=
an class=3D"k">array </span><span class=3D"n">of</span><span class=3D"w"> <=
/span><span class=3D"kt">real</span><span class=3D"p">(</span><span class=
=3D"mi">4</span><span class=3D"p">),</span><span class=3D"w"> </span><span =
class=3D"kt">real</span><span class=3D"p">(</span><span class=3D"mi">8</spa=
n><span class=3D"p">),</span><span class=3D"w"> </span><span class=3D"kt">i=
nteger</span><span class=3D"p">(</span><span class=3D"mi">4</span><span cla=
ss=3D"p">),</span><span class=3D"w"> </span><span class=3D"nb">or </span><s=
pan class=3D"kt">integer</span><span class=3D"p">(</span><span class=3D"mi"=
>8</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">B</span><span class=3D"w"> </span><span class=3D"k">is </=
span><span class=3D"n">a</span><span class=3D"w"> </span><span class=3D"n">=
device</span><span class=3D"w"> </span><span class=3D"k">array </span><span=
 class=3D"n">with</span><span class=3D"w"> </span><span class=3D"n">the</sp=
an><span class=3D"w"> </span><span class=3D"n">same</span><span class=3D"w"=
> </span><span class=3D"k">type </span><span class=3D"n">as</span><span cla=
ss=3D"w"> </span><span class=3D"n">A</span><span class=3D"p">.</span><span =
class=3D"w"></span>
<span class=3D"n">A</span><span class=3D"w"> </span><span class=3D"nb">and =
</span><span class=3D"n">B</span><span class=3D"w"> </span><span class=3D"n=
">are</span><span class=3D"w"> </span><span class=3D"mi">1</span><span clas=
s=3D"o">-</span><span class=3D"mi">3</span><span class=3D"w"> </span><span =
class=3D"n">dimensional</span><span class=3D"p">,</span><span class=3D"w"> =
</span><span class=3D"p">(</span><span class=3D"n">conforming</span><span c=
lass=3D"w"> </span><span class=3D"n">arrays</span><span class=3D"p">)</span=
><span class=3D"w"></span>
<span class=3D"n">x</span><span class=3D"w"> </span><span class=3D"k">is </=
span><span class=3D"n">a</span><span class=3D"w"> </span><span class=3D"n">=
scalar</span><span class=3D"w"> </span><span class=3D"n">with</span><span c=
lass=3D"w"> </span><span class=3D"n">the</span><span class=3D"w"> </span><s=
pan class=3D"n">same</span><span class=3D"w"> </span><span class=3D"k">type=
 </span><span class=3D"n">as</span><span class=3D"w"> </span><span class=3D=
"n">A</span><span class=3D"w"></span>
<span class=3D"n">dx</span><span class=3D"w"> </span><span class=3D"k">is <=
/span><span class=3D"n">a</span><span class=3D"w"> </span><span class=3D"n"=
>device</span><span class=3D"w"> </span><span class=3D"n">scalar</span><spa=
n class=3D"w"> </span><span class=3D"n">with</span><span class=3D"w"> </spa=
n><span class=3D"n">the</span><span class=3D"w"> </span><span class=3D"n">s=
ame</span><span class=3D"w"> </span><span class=3D"k">type </span><span cla=
ss=3D"n">as</span><span class=3D"w"> </span><span class=3D"n">A</span><span=
 class=3D"w"></span>
<span class=3D"n">alpha</span><span class=3D"w"> </span><span class=3D"nb">=
and </span><span class=3D"n">beta</span><span class=3D"w"> </span><span cla=
ss=3D"n">are</span><span class=3D"w"> </span><span class=3D"n">host</span><=
span class=3D"w"> </span><span class=3D"n">scalars</span><span class=3D"w">=
 </span><span class=3D"n">with</span><span class=3D"w"> </span><span class=
=3D"n">the</span><span class=3D"w"> </span><span class=3D"n">same</span><sp=
an class=3D"w"> </span><span class=3D"k">type </span><span class=3D"n">as</=
span><span class=3D"w"> </span><span class=3D"n">A</span><span class=3D"w">=
</span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell150">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>In one kernel launch, we support these mask expressions:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell151"><span></span><span class=3D"n">A</span><span class=3D"w"=
> </span><span class=3D"p">.</span><span class=3D"n">relop</span><span clas=
s=3D"p">.</span><span class=3D"w"> </span><span class=3D"n">B</span><span c=
lass=3D"w"></span>
<span class=3D"n">A</span><span class=3D"w"> </span><span class=3D"p">.</sp=
an><span class=3D"n">relop</span><span class=3D"p">.</span><span class=3D"w=
"> </span><span class=3D"n">x</span><span class=3D"w"></span>
<span class=3D"n">A</span><span class=3D"w"> </span><span class=3D"p">.</sp=
an><span class=3D"n">relop</span><span class=3D"p">.</span><span class=3D"w=
"> </span><span class=3D"n">dx</span><span class=3D"w"></span>
<span class=3D"nb">abs</span><span class=3D"p">(</span><span class=3D"n">A<=
/span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"p"=
>.</span><span class=3D"n">relop</span><span class=3D"p">.</span><span clas=
s=3D"w"> </span><span class=3D"n">B</span><span class=3D"w"></span>
<span class=3D"nb">abs</span><span class=3D"p">(</span><span class=3D"n">A<=
/span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"p"=
>.</span><span class=3D"n">relop</span><span class=3D"p">.</span><span clas=
s=3D"w"> </span><span class=3D"n">x</span><span class=3D"w"></span>
<span class=3D"nb">abs</span><span class=3D"p">(</span><span class=3D"n">A<=
/span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"p"=
>.</span><span class=3D"n">relop</span><span class=3D"p">.</span><span clas=
s=3D"w"> </span><span class=3D"n">dx</span><span class=3D"w"></span>
<span class=3D"p">(</span><span class=3D"n">A</span><span class=3D"w"> </sp=
an><span class=3D"o">+/-</span><span class=3D"w"> </span><span class=3D"n">=
B</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"=
p">.</span><span class=3D"n">relop</span><span class=3D"p">.</span><span cl=
ass=3D"w"> </span><span class=3D"n">x</span><span class=3D"w"></span>
<span class=3D"p">(</span><span class=3D"n">A</span><span class=3D"w"> </sp=
an><span class=3D"o">+/-</span><span class=3D"w"> </span><span class=3D"n">=
B</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"=
p">.</span><span class=3D"n">relop</span><span class=3D"p">.</span><span cl=
ass=3D"w"> </span><span class=3D"n">dx</span><span class=3D"w"></span>
<span class=3D"nb">abs</span><span class=3D"p">(</span><span class=3D"n">A<=
/span><span class=3D"w"> </span><span class=3D"o">+/-</span><span class=3D"=
w"> </span><span class=3D"n">B</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"p">.</span><span class=3D"n">relop</span><spa=
n class=3D"p">.</span><span class=3D"w"> </span><span class=3D"n">x</span><=
span class=3D"w"></span>
<span class=3D"nb">abs</span><span class=3D"p">(</span><span class=3D"n">A<=
/span><span class=3D"w"> </span><span class=3D"o">+/-</span><span class=3D"=
w"> </span><span class=3D"n">B</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"p">.</span><span class=3D"n">relop</span><spa=
n class=3D"p">.</span><span class=3D"w"> </span><span class=3D"n">dx</span>=
<span class=3D"w"></span>
<span class=3D"p">(</span><span class=3D"n">alpha</span><span class=3D"o">*=
</span><span class=3D"n">A</span><span class=3D"w"> </span><span class=3D"o=
">+</span><span class=3D"w"> </span><span class=3D"n">beta</span><span clas=
s=3D"o">*</span><span class=3D"n">B</span><span class=3D"p">)</span><span c=
lass=3D"w"> </span><span class=3D"p">.</span><span class=3D"n">relop</span>=
<span class=3D"p">.</span><span class=3D"w"> </span><span class=3D"n">x</sp=
an><span class=3D"w"></span>
<span class=3D"p">(</span><span class=3D"n">alpha</span><span class=3D"o">*=
</span><span class=3D"n">A</span><span class=3D"w"> </span><span class=3D"o=
">+</span><span class=3D"w"> </span><span class=3D"n">beta</span><span clas=
s=3D"o">*</span><span class=3D"n">B</span><span class=3D"p">)</span><span c=
lass=3D"w"> </span><span class=3D"p">.</span><span class=3D"n">relop</span>=
<span class=3D"p">.</span><span class=3D"w"> </span><span class=3D"n">dx</s=
pan><span class=3D"w"></span>
<span class=3D"nb">abs</span><span class=3D"p">(</span><span class=3D"n">al=
pha</span><span class=3D"o">*</span><span class=3D"n">A</span><span class=
=3D"w"> </span><span class=3D"o">+</span><span class=3D"w"> </span><span cl=
ass=3D"n">beta</span><span class=3D"o">*</span><span class=3D"n">B</span><s=
pan class=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">.</span=
><span class=3D"n">relop</span><span class=3D"p">.</span><span class=3D"w">=
 </span><span class=3D"n">x</span><span class=3D"w"></span>
<span class=3D"nb">abs</span><span class=3D"p">(</span><span class=3D"n">al=
pha</span><span class=3D"o">*</span><span class=3D"n">A</span><span class=
=3D"w"> </span><span class=3D"o">+</span><span class=3D"w"> </span><span cl=
ass=3D"n">beta</span><span class=3D"o">*</span><span class=3D"n">B</span><s=
pan class=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">.</span=
><span class=3D"n">relop</span><span class=3D"p">.</span><span class=3D"w">=
 </span><span class=3D"n">dx</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell151">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>For relop in EQ, NE, LE, LT, GE, GT</p>
<p>One exception, for convenience, is if the operation is =E2=80=9CA .relop=
. x=E2=80=9D, x can be kind=3D4 if A is kind=3D8</p>
<p>In most cases, the B array can also be the result of the spread() or tra=
nspose() intrinsic function, to make B conform to the shape of A. General r=
eshape() support for mask operands is not available at this time.</p>
<section id=3D"overloaded-logical-array-assignment-in-cutensorex">
<h4><span class=3D"section-number">3.9.3.1. </span>Overloaded Logical Array=
 Assignment in CUTENSOREX<a class=3D"headerlink" href=3D"https://docs.nvidi=
a.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#ove=
rloaded-logical-array-assignment-in-cutensorex" title=3D"Permalink to this =
headline">=EF=83=81</a></h4>
<p>The result of a logical expression from the section above can be assigne=
d to an array of type logical(4). For example:</p>
<p>A and B are conforming device arrays of type real(4), x is a real(4) sca=
lar, and L a device arrray of type logical(4):</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell152"><span></span><span class=3D"k">block</span><span class=
=3D"p">;</span><span class=3D"w"> </span><span class=3D"k">use </span><span=
 class=3D"n">cutensorex</span><span class=3D"w"></span>
<span class=3D"n">L</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">A</span><span class=3D"w">=
 </span><span class=3D"p">.</span><span class=3D"n">LT</span><span class=3D=
"p">.</span><span class=3D"w"> </span><span class=3D"n">B</span><span class=
=3D"w"></span>
<span class=3D"n">L</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"nb">ABS</span><span class=3D"=
p">(</span><span class=3D"n">A</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"p">.</span><span class=3D"n">GE</span><span c=
lass=3D"p">.</span><span class=3D"w"> </span><span class=3D"mf">1.0</span><=
span class=3D"w"></span>
<span class=3D"n">L</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"nb">ABS</span><span class=3D"=
p">(</span><span class=3D"n">A</span><span class=3D"w"> </span><span class=
=3D"o">-</span><span class=3D"w"> </span><span class=3D"n">B</span><span cl=
ass=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">.</span><span=
 class=3D"n">LE</span><span class=3D"p">.</span><span class=3D"w"> </span><=
span class=3D"n">x</span><span class=3D"w"></span>
<span class=3D"k">end block</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell152">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Of course, a logical array can be generated using any means: CUDA kernel=
s, CUF kernels, or computed/copied from the host. These are provided as a c=
onvenience, but note that if a mask is constant over many uses, it is proba=
bly faster to compute it once and pass it into these functions rather than =
to re-evalute it many times.</p>
</section>
<section id=3D"fortran-all-intrinsic-function">
<h4><span class=3D"section-number">3.9.3.2. </span>Fortran ALL Intrinsic Fu=
nction<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archi=
ve/25.3/compilers/cuda-fortran-prog-guide/index.html#fortran-all-intrinsic-=
function" title=3D"Permalink to this headline">=EF=83=81</a></h4>
<p>The interface for <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">ALL</span></code> is in the <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">cutensorex</span></code> module.</p>
<p>The Fortran array reduction <code class=3D"docutils literal notranslate"=
><span class=3D"pre">ALL</span></code> returns true if every element of the=
 mask is true, otherwise it returns false. The mask can be a logical array,=
 array slice, or any of the logical expressions described above. The option=
al dim argument to ALL() is not supported at this time.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell153"><span></span><span class=3D"kt">logical</span><span clas=
s=3D"p">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span =
class=3D"w"> </span><span class=3D"k">function all</span><span class=3D"w">=
 </span><span class=3D"p">(</span><span class=3D"w"> </span><span class=3D"=
n">mask</span><span class=3D"w"> </span><span class=3D"p">)</span><span cla=
ss=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">logical</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> <=
/span><span class=3D"n">mask</span><span class=3D"p">(...)</span><span clas=
s=3D"w">  </span><span class=3D"c">! mask is 1 - 3 dimensions</span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell153">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>For example, if A and B are conforming arrays with the device or managed=
 attribute, and X is a scalar of the same type:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell154"><span></span><span class=3D"k">IF</span><span class=3D"w=
"> </span><span class=3D"p">(</span><span class=3D"k">ALL</span><span class=
=3D"p">(</span><span class=3D"n">A</span><span class=3D"w"> </span><span cl=
ass=3D"p">.</span><span class=3D"n">EQ</span><span class=3D"p">.</span><spa=
n class=3D"w"> </span><span class=3D"n">B</span><span class=3D"p">))</span>=
<span class=3D"w"> </span><span class=3D"k">PRINT</span><span class=3D"w"> =
</span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D"s=
2">"PASSED"</span><span class=3D"w"></span>
<span class=3D"k">IF</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"k">ALL</span><span class=3D"p">(</span><span class=3D"nb=
">ABS</span><span class=3D"p">(</span><span class=3D"n">A</span><span class=
=3D"w"> </span><span class=3D"o">-</span><span class=3D"w"> </span><span cl=
ass=3D"n">B</span><span class=3D"p">)</span><span class=3D"w"> </span><span=
 class=3D"p">.</span><span class=3D"n">GT</span><span class=3D"p">.</span><=
span class=3D"w"> </span><span class=3D"n">X</span><span class=3D"p">))</sp=
an><span class=3D"w"> </span><span class=3D"k">CALL </span><span class=3D"n=
">REDO</span><span class=3D"p">()</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell154">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"fortran-any-intrinsic-function">
<h4><span class=3D"section-number">3.9.3.3. </span>Fortran ANY Intrinsic Fu=
nction<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archi=
ve/25.3/compilers/cuda-fortran-prog-guide/index.html#fortran-any-intrinsic-=
function" title=3D"Permalink to this headline">=EF=83=81</a></h4>
<p>The interface for <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">ANY</span></code> is in the <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">cutensorex</span></code> module.</p>
<p>The Fortran array reduction <code class=3D"docutils literal notranslate"=
><span class=3D"pre">ANY</span></code> returns true if any element of the m=
ask is true, and returns false if none are true. The mask can be a logical =
array, array slice, or any of the logical expressions described above. The =
optional dim argument to ANY() is not supported at this time.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell155"><span></span><span class=3D"kt">logical</span><span clas=
s=3D"p">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span =
class=3D"w"> </span><span class=3D"k">function </span><span class=3D"nb">an=
y</span><span class=3D"w"> </span><span class=3D"p">(</span><span class=3D"=
w"> </span><span class=3D"n">mask</span><span class=3D"w"> </span><span cla=
ss=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">logical</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> <=
/span><span class=3D"n">mask</span><span class=3D"p">(...)</span><span clas=
s=3D"w">  </span><span class=3D"c">! mask is 1 - 3 dimensions</span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell155">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>For example, if A and B are conforming arrays with the device or managed=
 attribute, and X is a scalar of the same type:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell156"><span></span><span class=3D"k">IF</span><span class=3D"w=
"> </span><span class=3D"p">(</span><span class=3D"nb">ANY</span><span clas=
s=3D"p">(</span><span class=3D"n">A</span><span class=3D"w"> </span><span c=
lass=3D"p">.</span><span class=3D"n">EQ</span><span class=3D"p">.</span><sp=
an class=3D"w"> </span><span class=3D"n">B</span><span class=3D"p">))</span=
><span class=3D"w"> </span><span class=3D"k">PRINT</span><span class=3D"w">=
 </span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D"=
s2">"FAILED"</span><span class=3D"w"></span>
<span class=3D"k">IF</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"nb">ANY</span><span class=3D"p">(</span><span class=3D"n=
b">ABS</span><span class=3D"p">(</span><span class=3D"n">A</span><span clas=
s=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">.</span><span c=
lass=3D"n">GT</span><span class=3D"p">.</span><span class=3D"w"> </span><sp=
an class=3D"n">X</span><span class=3D"p">))</span><span class=3D"w"> </span=
><span class=3D"k">CALL </span><span class=3D"n">REDO</span><span class=3D"=
p">()</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell156">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"fortran-count-intrinsic-function">
<h4><span class=3D"section-number">3.9.3.4. </span>Fortran COUNT Intrinsic =
Function<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/arc=
hive/25.3/compilers/cuda-fortran-prog-guide/index.html#fortran-count-intrin=
sic-function" title=3D"Permalink to this headline">=EF=83=81</a></h4>
<p>The interface for <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">COUNT</span></code> is in the <code class=3D"docutils literal no=
translate"><span class=3D"pre">cutensorex</span></code> module.</p>
<p>The Fortran array reduction <code class=3D"docutils literal notranslate"=
><span class=3D"pre">COUNT</span></code> returns the number of true element=
s of the mask. The mask can be a logical array, array slice, or any of the =
logical expressions described above. The optional dim argument to COUNT() i=
s not supported at this time.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell157"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"nb">count</span><span class=3D"w"> =
</span><span class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n=
">mask</span><span class=3D"w"> </span><span class=3D"p">)</span><span clas=
s=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">logical</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> <=
/span><span class=3D"n">mask</span><span class=3D"p">(...)</span><span clas=
s=3D"w">  </span><span class=3D"c">! mask is 1 - 3 dimensions</span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell157">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>For example, if A and B are conforming real(4) arrays with the device or=
 managed attribute, EPS is a real(4) scalar, and ICNT1 and ICNT2 are intege=
r scalars:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell158"><span></span><span class=3D"n">ICNT1</span><span class=
=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span =
class=3D"nb">COUNT</span><span class=3D"p">(</span><span class=3D"n">A</spa=
n><span class=3D"w"> </span><span class=3D"p">.</span><span class=3D"n">EQ<=
/span><span class=3D"p">.</span><span class=3D"w"> </span><span class=3D"n"=
>B</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">ICNT2</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"nb">COUNT</span><span cl=
ass=3D"p">(</span><span class=3D"nb">ABS</span><span class=3D"p">(</span><s=
pan class=3D"n">A</span><span class=3D"w"> </span><span class=3D"o">-</span=
><span class=3D"w"> </span><span class=3D"n">B</span><span class=3D"p">)</s=
pan><span class=3D"w"> </span><span class=3D"p">.</span><span class=3D"n">L=
E</span><span class=3D"p">.</span><span class=3D"w"> </span><span class=3D"=
n">EPS</span><span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell158">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
</section>
<section id=3D"overloaded-fortran-array-intrinsics-in-cutensorex">
<h3><span class=3D"section-number">3.9.4. </span>Overloaded Fortran Array I=
ntrinsics in CUTENSOREX<a class=3D"headerlink" href=3D"https://docs.nvidia.=
com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#overl=
oaded-fortran-array-intrinsics-in-cutensorex" title=3D"Permalink to this he=
adline">=EF=83=81</a></h3>
<p>This section lists the other overloaded functions available in the cuten=
sorex module. Similar to the last section, these Fortran intrinsics accept =
device or managed arrays when the cutensorex module is used, from host code=
.</p>
<p>The first five functions in this section also take a mask argument, and =
accept the same mask arrays or expressions described in the previous sectio=
n. The more complicated functions in this group use a scan algorithm descri=
bed in this paper: <em>Single-pass Parallel Prefix Scan with Decoupled Look=
-Back</em>, by Duane Merrill and Michael Garland.</p>
<p>The second set of functions call into either the cuTensor or cuRand libr=
ary, and are included here for completeness. They were previously documente=
d in the <a class=3D"reference internal" href=3D"https://docs.nvidia.com/hp=
c-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#cf-related-=
publications"><span class=3D"std std-ref">NVIDIA Fortran CUDA Interfaces</s=
pan></a> document.</p>
<section id=3D"fortran-merge-intrinsic-function">
<h4><span class=3D"section-number">3.9.4.1. </span>Fortran MERGE Intrinsic =
Function<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/arc=
hive/25.3/compilers/cuda-fortran-prog-guide/index.html#fortran-merge-intrin=
sic-function" title=3D"Permalink to this headline">=EF=83=81</a></h4>
<p>The interface for <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">MERGE</span></code> is in the <code class=3D"docutils literal no=
translate"><span class=3D"pre">cutensorex</span></code> module.</p>
<p>The Fortran merge() intrinsic is an elemental selection based on the mas=
k evaluation. It takes three arguments, an array of =E2=80=9Ctrue=E2=80=9D =
values, one or more =E2=80=9Cfalse=E2=80=9D values, and a mask. The merge()=
 intrinsic function can take a mask expression in the form specified above =
as an argument, or a logical(4) device array. In the current implementation=
, only the second argument (the false selection) can be a scalar. Only real=
(4), real(8), integer(4), and integer(8) arrays are supported, and only for=
 arrays of 1 - 3 dimensions. The tsource argument and mask argument must be=
 conforming arrays, and if fsource is an array, it must conform as well.</p=
>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell159"><span></span><span class=3D"k">function </span><span cla=
ss=3D"nb">merge</span><span class=3D"w"> </span><span class=3D"p">(</span><=
span class=3D"w"> </span><span class=3D"n">tsource</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"n">fsource</span><span cla=
ss=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">mask</span><sp=
an class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"> </span>=
<span class=3D"k">result</span><span class=3D"p">(</span><span class=3D"n">=
res</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"k">intent</span><span cla=
ss=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span><span=
 class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span>=
<span class=3D"n">tsource</span><span class=3D"p">(...)</span><span class=
=3D"w">  </span><span class=3D"c">! type is real or integer, kind =3D 4 or =
8</span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"k">intent</span><span cla=
ss=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span><span=
 class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span>=
<span class=3D"n">fsource</span><span class=3D"p">(...)</span><span class=
=3D"w">  </span><span class=3D"c">! type same as tsource, array or scalar</=
span>
<span class=3D"w">    </span><span class=3D"kt">logical</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> <=
/span><span class=3D"n">mask</span><span class=3D"p">(...)</span><span clas=
s=3D"w">  </span><span class=3D"c">! mask is 1 - 3 dimensions</span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"k">intent</span><span cla=
ss=3D"p">(</span><span class=3D"n">out</span><span class=3D"p">)</span><spa=
n class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span=
><span class=3D"n">res</span><span class=3D"p">(...)</span><span class=3D"w=
">     </span><span class=3D"c">! type, kind, rank same as tsource</span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell159">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>For example: For A, B, C, arrays of type integer(4), and K a scalar of t=
ype integer(4):</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell160"><span></span><span class=3D"n">C</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"nb">MERGE</span><span class=3D"p">(</span><span class=3D"n">A</span><sp=
an class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">B</span>=
<span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">A</sp=
an><span class=3D"w"> </span><span class=3D"p">.</span><span class=3D"n">GT=
</span><span class=3D"p">.</span><span class=3D"w"> </span><span class=3D"n=
">B</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">C</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"nb">MERGE</span><span class=
=3D"p">(</span><span class=3D"n">A</span><span class=3D"p">,</span><span cl=
ass=3D"w"> </span><span class=3D"mi">0</span><span class=3D"p">,</span><spa=
n class=3D"w"> </span><span class=3D"nb">ABS</span><span class=3D"p">(</spa=
n><span class=3D"n">A</span><span class=3D"p">)</span><span class=3D"w"> </=
span><span class=3D"p">.</span><span class=3D"n">LT</span><span class=3D"p"=
>.</span><span class=3D"w"> </span><span class=3D"n">K</span><span class=3D=
"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell160">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"fortran-pack-intrinsic-function">
<h4><span class=3D"section-number">3.9.4.2. </span>Fortran PACK Intrinsic F=
unction<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/arch=
ive/25.3/compilers/cuda-fortran-prog-guide/index.html#fortran-pack-intrinsi=
c-function" title=3D"Permalink to this headline">=EF=83=81</a></h4>
<p>The interface for <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">PACK</span></code> is in the <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">cutensorex</span></code> module.</p>
<p>The Fortran pack() intrinsic is useful for gathering selected data from =
a multiple-dimensional array into a rank-1 array. The pack intrinsic is uni=
que in that the size of the output array is not known until the function ha=
s been completely evaluated. This Fortran pack() intrinsic function is an e=
fficient parallel implementation and can take a mask expression specified a=
bove as the mask argument.</p>
<p>Currently, as part of our emphasis on performance, we do not re-allocate=
 the LHS destination to fit the result; it is the user=E2=80=99s responsibi=
lity to make sure the LHS destination array is large enough.</p>
<p>Only real(4), real(8), integer(4), and integer(8) arrays are supported, =
and only for arrays of 1 - 3 dimensions. This implementation does not suppo=
rt the vector optional argument to pack(). This implementation does add a n=
ew optional argument, =E2=80=9Ccount=E2=80=9D which can return the count of=
 passing mask results, basically the number of elements written into the LH=
S result:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell161"><span></span><span class=3D"k">function </span><span cla=
ss=3D"nb">pack</span><span class=3D"w"> </span><span class=3D"p">(</span><s=
pan class=3D"w"> </span><span class=3D"k">array</span><span class=3D"p">,</=
span><span class=3D"w"> </span><span class=3D"n">mask</span><span class=3D"=
p">,</span><span class=3D"w"> </span><span class=3D"nb">count</span><span c=
lass=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"> </span><spa=
n class=3D"k">result</span><span class=3D"p">(</span><span class=3D"n">res<=
/span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"k">intent</span><span cla=
ss=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span><span=
 class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span>=
<span class=3D"k">array</span><span class=3D"p">(...)</span><span class=3D"=
w">    </span><span class=3D"c">! type is real or integer, kind =3D 4 or 8<=
/span>
<span class=3D"w">    </span><span class=3D"kt">logical</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> <=
/span><span class=3D"n">mask</span><span class=3D"p">(...)</span><span clas=
s=3D"w">  </span><span class=3D"c">! mask is 1 - 3 dimensions</span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">optional</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent=
</span><span class=3D"p">(</span><span class=3D"n">in</span><span class=3D"=
p">)</span><span class=3D"w"> </span><span class=3D"kd">::</span><span clas=
s=3D"w"> </span><span class=3D"nb">count</span>
<span class=3D"nb">    </span><span class=3D"k">type</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><span cl=
ass=3D"p">(</span><span class=3D"n">out</span><span class=3D"p">)</span><sp=
an class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </spa=
n><span class=3D"n">res</span><span class=3D"p">(</span><span class=3D"o">*=
</span><span class=3D"p">)</span><span class=3D"w">       </span><span clas=
s=3D"c">! type is same as array, rank is 1-D</span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell161">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>For example: A and B are device arrays of type real(4), and x is a scala=
r of type real(4). C and D are device arrays of the same type, where C conf=
orms to both A and B, and D is a 1-dimensional array:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell162"><span></span><span class=3D"n">D</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"nb">PACK</span><span class=3D"p">(</span><span class=3D"n">C</span><spa=
n class=3D"p">,</span><span class=3D"w"> </span><span class=3D"nb">ABS</spa=
n><span class=3D"p">(</span><span class=3D"n">A</span><span class=3D"w"> </=
span><span class=3D"o">-</span><span class=3D"w"> </span><span class=3D"n">=
B</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"=
p">.</span><span class=3D"n">GT</span><span class=3D"p">.</span><span class=
=3D"w"> </span><span class=3D"n">x</span><span class=3D"p">)</span><span cl=
ass=3D"w"></span>
<span class=3D"n">D</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"nb">PACK</span><span class=3D=
"p">(</span><span class=3D"n">C</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">MASK</span><span class=3D"o">=3D</span><sp=
an class=3D"p">(</span><span class=3D"n">A</span><span class=3D"w"> </span>=
<span class=3D"p">.</span><span class=3D"n">EQ</span><span class=3D"p">.</s=
pan><span class=3D"w"> </span><span class=3D"n">B</span><span class=3D"p">)=
,</span><span class=3D"w"> </span><span class=3D"nb">COUNT</span><span clas=
s=3D"o">=3D</span><span class=3D"n">ICNT</span><span class=3D"p">)</span><s=
pan class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell162">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"fortran-packloc-function">
<h4><span class=3D"section-number">3.9.4.3. </span>Fortran PACKLOC Function=
<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.=
3/compilers/cuda-fortran-prog-guide/index.html#fortran-packloc-function" ti=
tle=3D"Permalink to this headline">=EF=83=81</a></h4>
<p>The interface for <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">PACKLOC</span></code> is in the <code class=3D"docutils literal =
notranslate"><span class=3D"pre">cutensorex</span></code> module.</p>
<p>The Fortran packloc() function is an extension of the PACK intrinsic, bu=
t does not take a source array. Instead, it produces a packed array of indi=
ces, or locations, where the mask evaluates to true. This Fortran packloc()=
 function uses the same efficient parallel implementation as PACK, and can =
take a mask expression specified above as the mask argument.</p>
<p>Currently, as part of our emphasis on performance, we do not re-allocate=
 the LHS destination to fit the result; it is the user=E2=80=99s responsibi=
lity to make sure the LHS destination array is large enough.</p>
<p>Only mask expressions involving 1D arrays are currently supported. This =
implementation does support the optional argument, =E2=80=9Ccount=E2=80=9D =
which can return the count of passing mask results, basically the number of=
 elements written into the LHS result:</p>
<p>Similar to maxloc and other location functions, the indices begin at 1, =
and are not affected by non-unary strides or lower bounds of the arrays pas=
sed to the function.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell163"><span></span><span class=3D"k">function </span><span cla=
ss=3D"n">packloc</span><span class=3D"w"> </span><span class=3D"p">(</span>=
<span class=3D"w"> </span><span class=3D"n">mask</span><span class=3D"p">,<=
/span><span class=3D"w"> </span><span class=3D"nb">count</span><span class=
=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"> </span><span cl=
ass=3D"k">result</span><span class=3D"p">(</span><span class=3D"n">res</spa=
n><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">logical</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> <=
/span><span class=3D"n">mask</span><span class=3D"p">(:)</span><span class=
=3D"w">   </span><span class=3D"c">! mask is a 1D logical array or supporte=
d expression</span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span =
class=3D"w"> </span><span class=3D"k">optional</span><span class=3D"p">,</s=
pan><span class=3D"w"> </span><span class=3D"k">intent</span><span class=3D=
"p">(</span><span class=3D"n">out</span><span class=3D"p">)</span><span cla=
ss=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><spa=
n class=3D"nb">count</span>
<span class=3D"nb">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span =
class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</spa=
n><span class=3D"n">out</span><span class=3D"p">)</span><span class=3D"w"> =
</span><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D=
"n">res</span><span class=3D"p">(</span><span class=3D"o">*</span><span cla=
ss=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell163">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>For example: A and B are device arrays of type real(4), and x is a scala=
r of type real(4). D is an integer(4) device array:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell164"><span></span><span class=3D"n">D</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">PACKLOC</span><span class=3D"p">(</span><span class=3D"nb">ABS</span=
><span class=3D"p">(</span><span class=3D"n">A</span><span class=3D"w"> </s=
pan><span class=3D"o">-</span><span class=3D"w"> </span><span class=3D"n">B=
</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"p=
">.</span><span class=3D"n">GT</span><span class=3D"p">.</span><span class=
=3D"w"> </span><span class=3D"n">x</span><span class=3D"p">,</span><span cl=
ass=3D"w"> </span><span class=3D"nb">COUNT</span><span class=3D"o">=3D</spa=
n><span class=3D"n">ICNT</span><span class=3D"p">)</span><span class=3D"w">=
</span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell164">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"fortran-unpack-intrinsic-function">
<h4><span class=3D"section-number">3.9.4.4. </span>Fortran UNPACK Intrinsic=
 Function<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/ar=
chive/25.3/compilers/cuda-fortran-prog-guide/index.html#fortran-unpack-intr=
insic-function" title=3D"Permalink to this headline">=EF=83=81</a></h4>
<p>The interface for <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">UNPACK</span></code> is in the <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">cutensorex</span></code> module.</p>
<p>The Fortran unpack() intrinsic function is the complement of pack(), and=
 can take a mask expression specified above as the mask argument. There are=
 some limitations in the current implementation for unpack() related to the=
 field argument. In this implementation, the field argument is optional, an=
d if it is left off, the LHS destination is treated as the field. If the fi=
eld argument is a scalar, unpack works according to the standard. If the fi=
eld argument is an array, the mask operation must be a logical array, not a=
 mask expression, and of course the mask and field must be conforming in si=
ze and shape.</p>
<p>Only real(4), real(8), integer(4), and integer(8) arrays are supported, =
and only for arrays of 1 - 3 dimensions. The output array and mask argument=
 must be conforming arrays.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell165"><span></span><span class=3D"k">function </span><span cla=
ss=3D"nb">unpack</span><span class=3D"w"> </span><span class=3D"p">(</span>=
<span class=3D"w"> </span><span class=3D"k">array</span><span class=3D"p">,=
</span><span class=3D"w"> </span><span class=3D"n">mask</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">field</span><spa=
n class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"> </span><=
span class=3D"k">result</span><span class=3D"p">(</span><span class=3D"n">r=
es</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"k">intent</span><span cla=
ss=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span><span=
 class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span>=
<span class=3D"k">array</span><span class=3D"p">(</span><span class=3D"o">*=
</span><span class=3D"p">)</span><span class=3D"w">      </span><span class=
=3D"c">! type is real or integer, kind =3D 4 or 8</span>
<span class=3D"w">    </span><span class=3D"kt">logical</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> <=
/span><span class=3D"n">mask</span><span class=3D"p">(...)</span><span clas=
s=3D"w">  </span><span class=3D"c">! mask is 1 - 3 dimensions</span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"k">optional</span><span c=
lass=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span=
><span class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</=
span><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w=
"> </span><span class=3D"n">field</span><span class=3D"p">(...)</span><span=
 class=3D"w">  </span><span class=3D"c">! array or scalar</span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"k">intent</span><span cla=
ss=3D"p">(</span><span class=3D"n">out</span><span class=3D"p">)</span><spa=
n class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span=
><span class=3D"n">res</span><span class=3D"p">(...)</span><span class=3D"w=
">     </span><span class=3D"c">! type same as array, rank same as mask</sp=
an>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell165">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>For example: For A and B device arrays of type real(4), x and y are scal=
ars of type real(4), C and D of the same type, where C conforms to both A a=
nd B, and D is a 1-dimensional array:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell166"><span></span><span class=3D"n">C</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"nb">UNPACK</span><span class=3D"p">(</span><span class=3D"n">D</span><s=
pan class=3D"p">,</span><span class=3D"w"> </span><span class=3D"nb">ABS</s=
pan><span class=3D"p">(</span><span class=3D"n">A</span><span class=3D"w"> =
</span><span class=3D"o">-</span><span class=3D"w"> </span><span class=3D"n=
">B</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"p">.</span><span class=3D"n">GT</span><span class=3D"p">.</span><span c=
lass=3D"w"> </span><span class=3D"n">x</span><span class=3D"p">)</span><spa=
n class=3D"w"></span>
<span class=3D"n">C</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"nb">UNPACK</span><span class=
=3D"p">(</span><span class=3D"n">D</span><span class=3D"p">,</span><span cl=
ass=3D"w"> </span><span class=3D"n">MASK</span><span class=3D"o">=3D</span>=
<span class=3D"p">(</span><span class=3D"nb">ABS</span><span class=3D"p">(<=
/span><span class=3D"n">A</span><span class=3D"w"> </span><span class=3D"o"=
>-</span><span class=3D"w"> </span><span class=3D"n">B</span><span class=3D=
"p">)</span><span class=3D"w"> </span><span class=3D"p">.</span><span class=
=3D"n">GT</span><span class=3D"p">.</span><span class=3D"w"> </span><span c=
lass=3D"n">x</span><span class=3D"p">),</span><span class=3D"w"> </span><sp=
an class=3D"n">FIELD</span><span class=3D"o">=3D</span><span class=3D"n">y<=
/span><span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell166">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"fortran-count-prefix-intrinsic-function">
<h4><span class=3D"section-number">3.9.4.5. </span>Fortran COUNT_PREFIX Int=
rinsic Function<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-=
sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#fortran-count=
-prefix-intrinsic-function" title=3D"Permalink to this headline">=EF=83=81<=
/a></h4>
<p>The interface for <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">COUNT_PREFIX</span></code> is in the <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">cutensorex</span></code> module.</p>
<p>The count_prefix function was defined in High Performance Fortran (HPF).=
 It computes a running count of the number of true mask values, in array st=
orage order. An optional logical argument, EXCLUSIVE, specifies that the cu=
rrent mask result does not contribute to the current output, only to succee=
ding counts. Another optional argument, the integer DIM, specifies to compu=
te the counts for a multi-dimensional array only across the specific dimens=
ion.</p>
<p>The complete function declaration and argument list is:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell167"><span></span><span class=3D"k">function </span><span cla=
ss=3D"n">count_prefix</span><span class=3D"w"> </span><span class=3D"p">(</=
span><span class=3D"w"> </span><span class=3D"n">mask</span><span class=3D"=
p">,</span><span class=3D"w"> </span><span class=3D"nb">dim</span><span cla=
ss=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">exclusive</spa=
n><span class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"> </=
span><span class=3D"k">result</span><span class=3D"p">(</span><span class=
=3D"n">res</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">logical</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> <=
/span><span class=3D"n">mask</span><span class=3D"p">(...)</span><span clas=
s=3D"w">  </span><span class=3D"c">! mask is 1 - 3 dimensions</span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">optional</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent=
</span><span class=3D"p">(</span><span class=3D"n">in</span><span class=3D"=
p">)</span><span class=3D"w"> </span><span class=3D"kd">::</span><span clas=
s=3D"w"> </span><span class=3D"nb">dim</span><span class=3D"w">  </span><sp=
an class=3D"c">! 1 - 3 depending on rank of mask</span>
<span class=3D"w">    </span><span class=3D"kt">logical</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">optional</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent=
</span><span class=3D"p">(</span><span class=3D"n">in</span><span class=3D"=
p">)</span><span class=3D"w"> </span><span class=3D"kd">::</span><span clas=
s=3D"w"> </span><span class=3D"n">exclusive</span><span class=3D"w"> </span=
><span class=3D"c">! Default is .false. (inclusive)</span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">out</span><span class=3D"p">)</spa=
n><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> =
</span><span class=3D"n">res</span><span class=3D"p">(...)</span><span clas=
s=3D"w">  </span><span class=3D"c">! same size and rank as mask</span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell167">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>For example: For A, B, and x of type real(4), C of type integer(4):</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell168"><span></span><span class=3D"n">C</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">COUNT_PREFIX</span><span class=3D"p">(</span><span class=3D"n">A</sp=
an><span class=3D"w"> </span><span class=3D"p">.</span><span class=3D"n">GT=
</span><span class=3D"p">.</span><span class=3D"w"> </span><span class=3D"m=
i">0</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">C</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">COUNT_PREFIX</span><span c=
lass=3D"p">(</span><span class=3D"n">A</span><span class=3D"w"> </span><spa=
n class=3D"p">.</span><span class=3D"n">EQ</span><span class=3D"p">.</span>=
<span class=3D"w"> </span><span class=3D"n">B</span><span class=3D"p">,</sp=
an><span class=3D"w"> </span><span class=3D"nb">DIM</span><span class=3D"o"=
>=3D</span><span class=3D"mi">1</span><span class=3D"p">)</span><span class=
=3D"w"></span>
<span class=3D"n">C</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">COUNT_PREFIX</span><span c=
lass=3D"p">(</span><span class=3D"n">MASK</span><span class=3D"o">=3D</span=
><span class=3D"nb">ABS</span><span class=3D"p">(</span><span class=3D"n">A=
</span><span class=3D"w"> </span><span class=3D"o">-</span><span class=3D"w=
"> </span><span class=3D"n">B</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"p">.</span><span class=3D"n">LE</span><span c=
lass=3D"p">.</span><span class=3D"w"> </span><span class=3D"n">x</span><spa=
n class=3D"p">,</span><span class=3D"w"> </span><span class=3D"nb">DIM</spa=
n><span class=3D"o">=3D</span><span class=3D"mi">2</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"n">EXCLUSIVE</span><span c=
lass=3D"o">=3D</span><span class=3D"p">.</span><span class=3D"n">true</span=
><span class=3D"p">.)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell168">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>HPF also specified a SEGMENT optional argument, but that functionality i=
s not in the current release.</p>
</section>
<section id=3D"fortran-sum-prefix-intrinsic-function">
<h4><span class=3D"section-number">3.9.4.6. </span>Fortran SUM_PREFIX Intri=
nsic Function<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sd=
k/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#fortran-sum-pre=
fix-intrinsic-function" title=3D"Permalink to this headline">=EF=83=81</a><=
/h4>
<p>The interface for <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">SUM_PREFIX</span></code> is in the <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">cutensorex</span></code> module.</p>
<p>The sum_prefix function was also defined in HPF. It computes a running s=
um of array element values, for which the corresponding mask is true, in ar=
ray storage order. An optional logical argument, EXCLUSIVE, specifies that =
the array value does not contribute to the current output, only to succeedi=
ng sums. Another optional argument, the integer DIM, specifies to compute t=
he counts for a multi-dimensional array only across the specific dimension.=
 For this function, the MASK is also optional; without it, every array elem=
ent contributes to the sums.</p>
<p>The complete function declaration and argument list is:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell169"><span></span><span class=3D"k">function </span><span cla=
ss=3D"n">sum_prefix</span><span class=3D"w"> </span><span class=3D"p">(</sp=
an><span class=3D"w"> </span><span class=3D"k">array</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"n">mask</span><span clas=
s=3D"p">,</span><span class=3D"w"> </span><span class=3D"nb">dim</span><spa=
n class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">exclusive=
</span><span class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w=
"> </span><span class=3D"k">result</span><span class=3D"p">(</span><span cl=
ass=3D"n">res</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"k">intent</span><span cla=
ss=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span><span=
 class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span>=
<span class=3D"k">array</span><span class=3D"p">(...)</span><span class=3D"=
w">    </span><span class=3D"c">! type is real or integer, kind =3D 4 or 8<=
/span>
<span class=3D"w">    </span><span class=3D"kt">logical</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">optional</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent=
</span><span class=3D"p">(</span><span class=3D"n">in</span><span class=3D"=
p">)</span><span class=3D"w"> </span><span class=3D"kd">::</span><span clas=
s=3D"w"> </span><span class=3D"n">mask</span><span class=3D"p">(...)</span>=
<span class=3D"w">  </span><span class=3D"c">! mask is 1 - 3 dimensions</sp=
an>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">optional</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent=
</span><span class=3D"p">(</span><span class=3D"n">in</span><span class=3D"=
p">)</span><span class=3D"w"> </span><span class=3D"kd">::</span><span clas=
s=3D"w"> </span><span class=3D"nb">dim</span><span class=3D"w">  </span><sp=
an class=3D"c">! 1 - 3 depending on rank of array</span>
<span class=3D"w">    </span><span class=3D"kt">logical</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">optional</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent=
</span><span class=3D"p">(</span><span class=3D"n">in</span><span class=3D"=
p">)</span><span class=3D"w"> </span><span class=3D"kd">::</span><span clas=
s=3D"w"> </span><span class=3D"n">exclusive</span><span class=3D"w"> </span=
><span class=3D"c">! Default is .false. (inclusive)</span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"k">intent</span><span cla=
ss=3D"p">(</span><span class=3D"n">out</span><span class=3D"p">)</span><spa=
n class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span=
><span class=3D"n">res</span><span class=3D"p">(...)</span><span class=3D"w=
">  </span><span class=3D"c">! same size and rank as array</span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell169">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>For example: For A, B, C, D, and x of type real(4):</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell170"><span></span><span class=3D"n">D</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">SUM_PREFIX</span><span class=3D"p">(</span><span class=3D"n">C</span=
><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">A</s=
pan><span class=3D"w"> </span><span class=3D"p">.</span><span class=3D"n">G=
T</span><span class=3D"p">.</span><span class=3D"w"> </span><span class=3D"=
mi">0</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">D</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">SUM_PREFIX</span><span cla=
ss=3D"p">(</span><span class=3D"n">C</span><span class=3D"p">,</span><span =
class=3D"w"> </span><span class=3D"n">MASK</span><span class=3D"o">=3D</spa=
n><span class=3D"p">(</span><span class=3D"n">A</span><span class=3D"w"> </=
span><span class=3D"p">.</span><span class=3D"n">NE</span><span class=3D"p"=
>.</span><span class=3D"w"> </span><span class=3D"n">B</span><span class=3D=
"p">),</span><span class=3D"w"> </span><span class=3D"nb">DIM</span><span c=
lass=3D"o">=3D</span><span class=3D"mi">2</span><span class=3D"p">)</span><=
span class=3D"w"></span>
<span class=3D"n">D</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">SUM_PREFIX</span><span cla=
ss=3D"p">(</span><span class=3D"n">C</span><span class=3D"p">,</span><span =
class=3D"w"> </span><span class=3D"n">MASK</span><span class=3D"o">=3D</spa=
n><span class=3D"nb">ABS</span><span class=3D"p">(</span><span class=3D"n">=
A</span><span class=3D"w"> </span><span class=3D"o">-</span><span class=3D"=
w"> </span><span class=3D"n">B</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"p">.</span><span class=3D"n">LE</span><span c=
lass=3D"p">.</span><span class=3D"w"> </span><span class=3D"n">x</span><spa=
n class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">EXCLUSIVE=
</span><span class=3D"o">=3D</span><span class=3D"p">.</span><span class=3D=
"n">true</span><span class=3D"p">.)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell170">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"fortran-reshape-intrinsic-function">
<h4><span class=3D"section-number">3.9.4.7. </span>Fortran RESHAPE Intrinsi=
c Function<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/a=
rchive/25.3/compilers/cuda-fortran-prog-guide/index.html#fortran-reshape-in=
trinsic-function" title=3D"Permalink to this headline">=EF=83=81</a></h4>
<p>The interface for <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">RESHAPE</span></code> is in the <code class=3D"docutils literal =
notranslate"><span class=3D"pre">cutensorex</span></code> module. This func=
tion is also documented thoroughly in the <a class=3D"reference internal" h=
ref=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-=
prog-guide/index.html#cf-related-publications"><span class=3D"std std-ref">=
NVIDIA Fortran CUDA Interfaces</span></a> document in the cuTensor chapter.=
</p>
<p>The Fortran reshape() intrinsic changes the shape of an array and possib=
ly permutes the dimensions and layout. It is invoked as:</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">D</span=
> <span class=3D"pre">=3D</span> <span class=3D"pre">alpha</span> <span cla=
ss=3D"pre">*</span> <span class=3D"pre">func(reshape(A,</span> <span class=
=3D"pre">shape=3D[...],</span> <span class=3D"pre">order=3D[...]))</span></=
code></p>
<p>The arrays A and D can be of type real(2), real(4), real(8), complex(4),=
 or complex(8). The rank (number of dimensions) of A and D can be from 1 to=
 7. The alpha value is expected to be the same type as A, or as func(reshap=
e(A)), if that differs. Accepted functions which can be applied to the resu=
lt of reshape are listed in the Fortran CUDA Interfaces document referred t=
o above. The pad argument to the F90 reshape function is not currently supp=
orted. This Fortran call, besides initialization and setting up cuTENSOR de=
scriptors, maps to <code class=3D"docutils literal notranslate"><span class=
=3D"pre">cutensorPermutation()</span></code>.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell171"><span></span><span class=3D"k">function </span><span cla=
ss=3D"nb">reshape</span><span class=3D"w"> </span><span class=3D"p">(</span=
><span class=3D"w"> </span><span class=3D"n">source</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"nb">shape</span><span cla=
ss=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">order</span><s=
pan class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"> </span=
><span class=3D"k">result</span><span class=3D"p">(</span><span class=3D"n"=
>res</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"k">intent</span><span cla=
ss=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span><span=
 class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span>=
<span class=3D"n">source</span><span class=3D"p">(...)</span><span class=3D=
"w">  </span><span class=3D"c">! type is real or complex</span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> <=
/span><span class=3D"nb">shape</span><span class=3D"p">(:)</span><span clas=
s=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">optional</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent=
</span><span class=3D"p">(</span><span class=3D"n">in</span><span class=3D"=
p">)</span><span class=3D"w"> </span><span class=3D"kd">::</span><span clas=
s=3D"w"> </span><span class=3D"n">order</span><span class=3D"p">(</span><sp=
an class=3D"o">*</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"k">intent</span><span cla=
ss=3D"p">(</span><span class=3D"n">out</span><span class=3D"p">)</span><spa=
n class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span=
><span class=3D"n">res</span><span class=3D"p">(...)</span><span class=3D"w=
">     </span><span class=3D"c">! type, kind same as source</span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell171">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell172"><span></span><span class=3D"c">! Example to switch the 2=
nd and 3rd dimension layout</span>
<span class=3D"n">D</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"nb">reshape</span><span class=
=3D"p">(</span><span class=3D"n">a</span><span class=3D"p">,</span><span cl=
ass=3D"nb">shape</span><span class=3D"o">=3D</span><span class=3D"p">[</spa=
n><span class=3D"n">ni</span><span class=3D"p">,</span><span class=3D"n">nk=
</span><span class=3D"p">,</span><span class=3D"n">nj</span><span class=3D"=
p">],</span><span class=3D"w"> </span><span class=3D"n">order</span><span c=
lass=3D"o">=3D</span><span class=3D"p">[</span><span class=3D"mi">1</span><=
span class=3D"p">,</span><span class=3D"mi">3</span><span class=3D"p">,</sp=
an><span class=3D"mi">2</span><span class=3D"p">])</span><span class=3D"w">=
</span>
<span class=3D"c">! Same example, take the absolute value and scale by 2.5<=
/span>
<span class=3D"n">D</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"mf">2.5</span><span class=3D"=
w"> </span><span class=3D"o">*</span><span class=3D"w"> </span><span class=
=3D"nb">abs</span><span class=3D"p">(</span><span class=3D"nb">reshape</spa=
n><span class=3D"p">(</span><span class=3D"n">a</span><span class=3D"p">,</=
span><span class=3D"nb">shape</span><span class=3D"o">=3D</span><span class=
=3D"p">[</span><span class=3D"n">ni</span><span class=3D"p">,</span><span c=
lass=3D"n">nk</span><span class=3D"p">,</span><span class=3D"n">nj</span><s=
pan class=3D"p">],</span><span class=3D"w"> </span><span class=3D"n">order<=
/span><span class=3D"o">=3D</span><span class=3D"p">[</span><span class=3D"=
mi">1</span><span class=3D"p">,</span><span class=3D"mi">3</span><span clas=
s=3D"p">,</span><span class=3D"mi">2</span><span class=3D"p">]))</span><spa=
n class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell172">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"fortran-transpose-intrinsic-function">
<h4><span class=3D"section-number">3.9.4.8. </span>Fortran TRANSPOSE Intrin=
sic Function<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk=
/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#fortran-transpos=
e-intrinsic-function" title=3D"Permalink to this headline">=EF=83=81</a></h=
4>
<p>The interface for <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">TRANSPOSE</span></code> is in the <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">cutensorex</span></code> module. This fu=
nction is also documented thoroughly in the <a class=3D"reference internal"=
 href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortra=
n-prog-guide/index.html#cf-related-publications"><span class=3D"std std-ref=
">NVIDIA Fortran CUDA Interfaces</span></a> document in the cuTensor chapte=
r.</p>
<p>The Fortran transpose() intrinsic transposes a matrix (a 2-dimensional a=
rray). It is invoked as:</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">D</span=
> <span class=3D"pre">=3D</span> <span class=3D"pre">alpha</span> <span cla=
ss=3D"pre">*</span> <span class=3D"pre">func(transpose(A))</span></code></p=
>
<p>The arrays A and D can be of type real(2), real(4), real(8), complex(4),=
 or complex(8). The rank (number of dimensions) of A and D is 2. Applying s=
caling (the <code class=3D"docutils literal notranslate"><span class=3D"pre=
">alpha</span></code> argument) or applying a function to the transpose res=
ult is optional. The alpha value is expected to be the same type as A, or a=
s func(transpose(A)), if that differs. Accepted functions which can be appl=
ied to the result of the transpose are listed in the Fortran CUDA Interface=
s document referred to above. This Fortran call, besides initialization and=
 setting up cuTENSOR descriptors, maps to <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">cutensorPermutation()</span></code>.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell173"><span></span><span class=3D"c">! Example of transpose</s=
pan>
<span class=3D"n">D</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"nb">transpose</span><span cla=
ss=3D"p">(</span><span class=3D"n">A</span><span class=3D"p">)</span><span =
class=3D"w"></span>
<span class=3D"c">! Same example, take the absolute value and scale by 2.5<=
/span>
<span class=3D"n">D</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"mf">2.5</span><span class=3D"=
w"> </span><span class=3D"o">*</span><span class=3D"w"> </span><span class=
=3D"nb">abs</span><span class=3D"p">(</span><span class=3D"n">tranpose</spa=
n><span class=3D"p">(</span><span class=3D"n">A</span><span class=3D"p">))<=
/span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell173">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>The transpose() function is also supported as part of the =E2=80=9CB=E2=
=80=9D argument in mask expressions described above. For example, if A is a=
 2-dimension mxn array, and B is nxm:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell174"><span></span><span class=3D"n">ICNT</span><span class=3D=
"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span cla=
ss=3D"nb">COUNT</span><span class=3D"p">(</span><span class=3D"n">A</span><=
span class=3D"w"> </span><span class=3D"p">.</span><span class=3D"n">GT</sp=
an><span class=3D"p">.</span><span class=3D"w"> </span><span class=3D"nb">T=
RANSPOSE</span><span class=3D"p">(</span><span class=3D"n">B</span><span cl=
ass=3D"p">))</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell174">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"fortran-spread-intrinsic-function">
<h4><span class=3D"section-number">3.9.4.9. </span>Fortran SPREAD Intrinsic=
 Function<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/ar=
chive/25.3/compilers/cuda-fortran-prog-guide/index.html#fortran-spread-intr=
insic-function" title=3D"Permalink to this headline">=EF=83=81</a></h4>
<p>The interface for <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">SPREAD</span></code> is in the <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">cutensorex</span></code> module. This funct=
ion is also documented in the <a class=3D"reference internal" href=3D"https=
://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/i=
ndex.html#cf-related-publications"><span class=3D"std std-ref">NVIDIA Fortr=
an CUDA Interfaces</span></a> document in the cuTensor chapter.</p>
<p>The Fortran spread() intrinsic increases the rank of an array by one acr=
oss the specified dimension and broadcasts the values over the new dimensio=
n. It is invoked as:</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">D</span=
> <span class=3D"pre">=3D</span> <span class=3D"pre">alpha</span> <span cla=
ss=3D"pre">*</span> <span class=3D"pre">func(spread(A,</span> <span class=
=3D"pre">dim=3Di,</span> <span class=3D"pre">ncopies=3Dn))</span></code></p=
>
<p>The arrays A and D can be of type real(2), real(4), real(8), complex(4),=
 or complex(8). The rank (number of dimensions) of A and D can be from 1 to=
 7. The alpha value is expected to be the same type as A. Accepted function=
s which can be applied to the result of spread are listed in the Fortran CU=
DA Interfaces document referred to above. This Fortran call, besides initia=
lization and setting up cuTENSOR descriptors, maps to <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">cutensorPermutation()</span></c=
ode>.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell175"><span></span><span class=3D"c">! Example to add and broa=
dcast values over the new first dimension</span>
<span class=3D"n">D</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"nb">spread</span><span class=
=3D"p">(</span><span class=3D"n">A</span><span class=3D"p">,</span><span cl=
ass=3D"w"> </span><span class=3D"nb">dim</span><span class=3D"o">=3D</span>=
<span class=3D"mi">1</span><span class=3D"p">,</span><span class=3D"w"> </s=
pan><span class=3D"n">ncopies</span><span class=3D"o">=3D</span><span class=
=3D"n">n1</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"c">! Same example, take the absolute value and scale by 2.5<=
/span>
<span class=3D"n">D</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"mf">2.5</span><span class=3D"=
w"> </span><span class=3D"o">*</span><span class=3D"w"> </span><span class=
=3D"nb">abs</span><span class=3D"p">(</span><span class=3D"nb">spread</span=
><span class=3D"p">(</span><span class=3D"n">A</span><span class=3D"p">,</s=
pan><span class=3D"w"> </span><span class=3D"nb">dim</span><span class=3D"o=
">=3D</span><span class=3D"mi">1</span><span class=3D"p">,</span><span clas=
s=3D"w"> </span><span class=3D"n">ncopies</span><span class=3D"o">=3D</span=
><span class=3D"n">n1</span><span class=3D"p">))</span><span class=3D"w"></=
span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell175">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>The spread() function is also supported as part of the =E2=80=9CB=E2=80=
=9D argument in mask expressions described above. For example, if A is a 2-=
dimension mxn array, and B is 1-dimensional array of length m:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell176"><span></span><span class=3D"n">ICNT</span><span class=3D=
"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span cla=
ss=3D"nb">COUNT</span><span class=3D"p">(</span><span class=3D"n">A</span><=
span class=3D"w"> </span><span class=3D"p">.</span><span class=3D"n">GT</sp=
an><span class=3D"p">.</span><span class=3D"w"> </span><span class=3D"nb">S=
PREAD</span><span class=3D"p">(</span><span class=3D"n">B</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"nb">dim</span><span=
 class=3D"o">=3D</span><span class=3D"mi">2</span><span class=3D"p">,</span=
><span class=3D"w"> </span><span class=3D"n">ncopies</span><span class=3D"o=
">=3D</span><span class=3D"n">n</span><span class=3D"p">))</span><span clas=
s=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell176">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"fortran-matmul-intrinsic-function">
<h4><span class=3D"section-number">3.9.4.10. </span>Fortran MATMUL Intrinsi=
c Function<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/a=
rchive/25.3/compilers/cuda-fortran-prog-guide/index.html#fortran-matmul-int=
rinsic-function" title=3D"Permalink to this headline">=EF=83=81</a></h4>
<p>The interface for <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">MATMUL</span></code> is in the <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">cutensorex</span></code> module. This funct=
ion is also documented thoroughly in the <a class=3D"reference internal" hr=
ef=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-p=
rog-guide/index.html#cf-related-publications"><span class=3D"std std-ref">N=
VIDIA Fortran CUDA Interfaces</span></a> document in the cuTensor chapter.<=
/p>
<p>The Fortran matmul() intrinsic performs matrix multiplication, one insta=
nce of tensor contractions. Either operand to matmul can be a permuted arra=
y, the result of a call to reshape(), transpose(), or spread(). The cuTENSO=
R library does not currently support applying an elemental function to the =
array operands, but the result and accumlator can be scaled. Here are some =
supported forms:</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">D</span=
> <span class=3D"pre">=3D</span> <span class=3D"pre">matmul(A,</span> <span=
 class=3D"pre">B)</span></code></p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">D</span=
> <span class=3D"pre">=3D</span> <span class=3D"pre">matmul(permute(A),</sp=
an> <span class=3D"pre">B)</span></code></p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">D</span=
> <span class=3D"pre">=3D</span> <span class=3D"pre">matmul(A,</span> <span=
 class=3D"pre">permute(B))</span></code></p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">D</span=
> <span class=3D"pre">=3D</span> <span class=3D"pre">matmul(permute(A),</sp=
an> <span class=3D"pre">permute(B))</span></code></p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">D</span=
> <span class=3D"pre">=3D</span> <span class=3D"pre">C</span> <span class=
=3D"pre">+</span> <span class=3D"pre">matmul(A,</span> <span class=3D"pre">=
B)</span></code></p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">D</span=
> <span class=3D"pre">=3D</span> <span class=3D"pre">C</span> <span class=
=3D"pre">-</span> <span class=3D"pre">matmul(A,</span> <span class=3D"pre">=
B)</span></code></p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">D</span=
> <span class=3D"pre">=3D</span> <span class=3D"pre">alpha</span> <span cla=
ss=3D"pre">*</span> <span class=3D"pre">matmul(A,</span> <span class=3D"pre=
">B)</span> <span class=3D"pre">+</span> <span class=3D"pre">beta</span> <s=
pan class=3D"pre">*</span> <span class=3D"pre">C</span></code></p>
<p>The arrays A, B, C, and D can be of type real(2), real(4), real(8), comp=
lex(4), or complex(8). The rank (number of dimensions) of A, B, C, and D mu=
st be 2, after any permutations. Arrays C and D must currently have the sam=
e shape, strides, and type. The alpha value is expected to be the same type=
 as A and B. The beta value should have the same type as C. The Fortran wra=
pper does no type conversion, though cuTENSOR may. Compile-time checking of=
 array conformance is limited. Other runtime checks for unsupported combina=
tions may come from either the Fortran wrapper or from cuTENSOR. Fortran su=
pport for <code class=3D"docutils literal notranslate"><span class=3D"pre">=
Matmul</span></code>, besides initialization and setting up cuTENSOR descri=
ptors, maps to <code class=3D"docutils literal notranslate"><span class=3D"=
pre">cutensorContraction()</span></code>.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell177"><span></span><span class=3D"c">! Example to multiply two=
 matrices together</span>
<span class=3D"n">D</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"nb">matmul</span><span class=
=3D"p">(</span><span class=3D"n">A</span><span class=3D"p">,</span><span cl=
ass=3D"w"> </span><span class=3D"n">B</span><span class=3D"p">)</span><span=
 class=3D"w"></span>
<span class=3D"c">! Same example, accumulate into C</span>
<span class=3D"n">C</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">C</span><span class=3D"w">=
 </span><span class=3D"o">+</span><span class=3D"w">  </span><span class=3D=
"nb">matmul</span><span class=3D"p">(</span><span class=3D"n">A</span><span=
 class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">B</span><s=
pan class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"c">! Same example, transpose the first argument</span>
<span class=3D"n">C</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">C</span><span class=3D"w">=
 </span><span class=3D"o">+</span><span class=3D"w"> </span><span class=3D"=
nb">matmul</span><span class=3D"p">(</span><span class=3D"nb">transpose</sp=
an><span class=3D"p">(</span><span class=3D"n">A</span><span class=3D"p">),=
</span><span class=3D"w"> </span><span class=3D"n">B</span><span class=3D"p=
">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell177">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"fortran-dot-product-intrinsic-function">
<h4><span class=3D"section-number">3.9.4.11. </span>Fortran DOT_PRODUCT Int=
rinsic Function<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-=
sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#fortran-dot-p=
roduct-intrinsic-function" title=3D"Permalink to this headline">=EF=83=81</=
a></h4>
<p>The interface for <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">DOT_PRODUCT</span></code> is in the <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">cutensorex</span></code> module. This =
function is also documented thoroughly in the <a class=3D"reference interna=
l" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fort=
ran-prog-guide/index.html#cf-related-publications"><span class=3D"std std-r=
ef">NVIDIA Fortran CUDA Interfaces</span></a> document in the cuTensor chap=
ter.</p>
<p>The Fortran dot_product() intrinsic performs the dot product of two vect=
ors, one specific instance of a tensor contraction. In the standard form, i=
t returns a scalar of the same type as the input arguments, and the destina=
tion on the LHS of the assignment must have the device or managed attribute=
. Either operand to dot_product can be a permuted array, the result of a ca=
ll to reshape(), creating a 1-D array. Note that the Fortran definition of =
dot_product for complex variables performs a conjugate of the first argumen=
t. Here are some supported forms:</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">S</span=
> <span class=3D"pre">=3D</span> <span class=3D"pre">dot_product(A,</span> =
<span class=3D"pre">B)</span></code></p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">S</span=
> <span class=3D"pre">=3D</span> <span class=3D"pre">dot_product(reshape(T,=
</span> <span class=3D"pre">shape=3D[m*n]),</span> <span class=3D"pre">B)</=
span></code></p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">S</span=
> <span class=3D"pre">=3D</span> <span class=3D"pre">dot_product(ABS(A),</s=
pan> <span class=3D"pre">B)</span></code></p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">ZC</spa=
n> <span class=3D"pre">=3D</span> <span class=3D"pre">dot_product(ZX,ZY)</s=
pan> <span class=3D"pre">!</span> <span class=3D"pre">BLAS</span> <span cla=
ss=3D"pre">ZDOTC</span> <span class=3D"pre">equivalent</span></code></p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">ZU</spa=
n> <span class=3D"pre">=3D</span> <span class=3D"pre">dot_product(CONJG(ZX)=
,ZY)</span> <span class=3D"pre">!</span> <span class=3D"pre">BLAS</span> <s=
pan class=3D"pre">ZDOTU</span> <span class=3D"pre">equivalent</span></code>=
</p>
<p>The input arrays can be of type real(2), real(4), real(8), complex(4), o=
r complex(8). Fortran support for <code class=3D"docutils literal notransla=
te"><span class=3D"pre">DOT_PRODUCT</span></code>, besides initialization a=
nd setting up cuTENSOR descriptors, maps to <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">cutensorContraction()</span></code>.</p>
<p>This implementation has been extended to expose more of the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">cutensorContraction()=
</span></code> functionality at a high level. The extended interface to <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">DOT_PRODUCT</=
span></code> accepts multi-dimensional arrays and a dim argument. The dot_p=
roduct will be computed only along the specified dimension, resulting in an=
 array with rank one fewer than the input arrays.</p>
<p>Most of the same permutations, functions and accumulation operations tha=
t are provided with <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">MATMUL</span></code> are provided with <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">DOT_PRODUCT</span></code>. Here are =
a few examples: For A and B an NxN matrix, X and V are vectors of length N,=
 and alpha a scalar:</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">X</span=
> <span class=3D"pre">=3D</span> <span class=3D"pre">dot_product(A,</span> =
<span class=3D"pre">B,</span> <span class=3D"pre">dim=3D1)</span></code></p=
>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">X</span=
> <span class=3D"pre">=3D</span> <span class=3D"pre">X</span> <span class=
=3D"pre">+</span> <span class=3D"pre">dot_product(A,</span> <span class=3D"=
pre">transpose(B),</span> <span class=3D"pre">dim=3D1)</span></code></p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">X</span=
> <span class=3D"pre">=3D</span> <span class=3D"pre">X</span> <span class=
=3D"pre">-</span> <span class=3D"pre">alpha</span> <span class=3D"pre">*</s=
pan> <span class=3D"pre">dot_product(spread(V,</span> <span class=3D"pre">d=
im=3D1,</span> <span class=3D"pre">ncopies=3DN),</span> <span class=3D"pre"=
>B,</span> <span class=3D"pre">dim=3D2)</span></code></p>
</section>
<section id=3D"fortran-random-number-intrinsic-function">
<h4><span class=3D"section-number">3.9.4.12. </span>Fortran RANDOM_NUMBER I=
ntrinsic Function<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hp=
c-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#fortran-ran=
dom-number-intrinsic-function" title=3D"Permalink to this headline">=EF=83=
=81</a></h4>
<p>The interface for <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">RANDOM_NUMBER</span></code> is actually in the <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">curandex</span></code> modu=
le, but that is included/used within the <code class=3D"docutils literal no=
translate"><span class=3D"pre">cutensorex</span></code> module.</p>
<p>The Fortran subroutine <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">RANDOM_NUMBER</span></code> returns random numbers between =
the values of 0.0 and 1.0. This interface is provided as a convenience, and=
 has not undergone extensive testing. When you pass arrays with the device =
or managed attribute, the subroutine will invoke a cuRAND library function =
to generate the values. Some additional work was done to support the types =
real(2), real(4), real(8), complex(4), and complex(8), some of which is non=
-standard. Only arrays of 1 - 3 dimensions are supported.</p>
<p>For example, if A is a real array and has the device or managed attribut=
e:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell178"><span></span><span class=3D"k">block</span><span class=
=3D"p">;</span><span class=3D"w"> </span><span class=3D"k">use </span><span=
 class=3D"n">cutensorex</span><span class=3D"w"></span>
<span class=3D"k">CALL </span><span class=3D"nb">RANDOM_NUMBER</span><span =
class=3D"p">(</span><span class=3D"n">A</span><span class=3D"p">)</span><sp=
an class=3D"w"></span>
<span class=3D"k">end block</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell178">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>The default generator used by the curandex module is CURAND_RNG_PSEUDO_X=
ORWOW.</p>
<p>Some helper functions are provided in the curandex module to fine-tune t=
he cuRAND library random number generator, which should be self-explanatory=
:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell179"><span></span><span class=3D"kt">integer</span><span clas=
s=3D"p">(</span><span class=3D"mi">4</span><span class=3D"p">)</span><span =
class=3D"w"> </span><span class=3D"k">function </span><span class=3D"n">cur=
andExSetCurandGenerator</span><span class=3D"p">(</span><span class=3D"n">g=
</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"k">type</span><span class=3D"p">(</span><span class=3D"n">cu=
randGenerator</span><span class=3D"p">)</span><span class=3D"w"> </span><sp=
an class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">g</spa=
n><span class=3D"w"></span>
<span class=3D"k">end function</span>

<span class=3D"k">function </span><span class=3D"n">curandExGetCurandGenera=
tor</span><span class=3D"p">()</span><span class=3D"w"> </span><span class=
=3D"k">result</span><span class=3D"p">(</span><span class=3D"n">s</span><sp=
an class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"k">type</span><span class=3D"p">(</span><span class=3D"n">cu=
randGenerator</span><span class=3D"p">)</span><span class=3D"w"> </span><sp=
an class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">s</spa=
n><span class=3D"w"></span>
<span class=3D"k">end function</span>

<span class=3D"kt">integer</span><span class=3D"p">(</span><span class=3D"m=
i">4</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"k">function </span><span class=3D"n">curandExSetStream</span><span clas=
s=3D"p">(</span><span class=3D"n">stream</span><span class=3D"p">)</span><s=
pan class=3D"w"></span>
<span class=3D"kt">integer</span><span class=3D"p">(</span><span class=3D"n=
b">kind</span><span class=3D"o">=3D</span><span class=3D"n">cuda_stream_kin=
d</span><span class=3D"p">),</span><span class=3D"w"> </span><span class=3D=
"k">value</span><span class=3D"w"> </span><span class=3D"kd">::</span><span=
 class=3D"w"> </span><span class=3D"n">stream</span><span class=3D"w"></spa=
n>
<span class=3D"k">end function</span>

<span class=3D"k">function </span><span class=3D"n">curandExGetStream</span=
><span class=3D"p">()</span><span class=3D"w"> </span><span class=3D"k">res=
ult</span><span class=3D"p">(</span><span class=3D"n">s</span><span class=
=3D"p">)</span><span class=3D"w"></span>
<span class=3D"kt">integer</span><span class=3D"p">(</span><span class=3D"n=
b">kind</span><span class=3D"o">=3D</span><span class=3D"n">cuda_stream_kin=
d</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"=
kd">::</span><span class=3D"w"> </span><span class=3D"n">s</span><span clas=
s=3D"w"></span>
<span class=3D"k">end function</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell179">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
</section>
<section id=3D"other-cuda-library-host-modules">
<h3><span class=3D"section-number">3.9.5. </span>Other CUDA Library Host Mo=
dules<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archiv=
e/25.3/compilers/cuda-fortran-prog-guide/index.html#other-cuda-library-host=
-modules" title=3D"Permalink to this headline">=EF=83=81</a></h3>
<p>Please refer to the <a class=3D"reference internal" href=3D"https://docs=
.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.ht=
ml#cf-related-publications"><span class=3D"std std-ref">NVIDIA Fortran CUDA=
 Interfaces</span></a> document for more detailed information on the Fortra=
n interfaces to CUDA libraries. This section discusses some of the more-com=
monly used interfaces and libraries.</p>
<p>NVIDIA provides a module which defines interfaces to the CUBLAS Library =
from NVIDIA CUDA Fortran. These interfaces are made accessible by placing t=
he following statement in the CUDA Fortran host-code program unit.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell180"><span></span><span class=3D"k">use </span><span class=3D=
"n">cublas</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell180">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>The interfaces are currently in three forms:</p>
<ul>
<li><p>Overloaded traditional BLAS interfaces which take device arrays as a=
rguments rather than host arrays, i.e.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre id=
=3D"codecell181"><span></span><span class=3D"n">call</span><span class=3D"w=
"> </span><span class=3D"n">saxpy</span><span class=3D"p">(</span><span cla=
ss=3D"n">n</span><span class=3D"p">,</span><span class=3D"w"> </span><span =
class=3D"n">a</span><span class=3D"p">,</span><span class=3D"w"> </span><sp=
an class=3D"n">x</span><span class=3D"p">,</span><span class=3D"w"> </span>=
<span class=3D"n">incx</span><span class=3D"p">,</span><span class=3D"w"> <=
/span><span class=3D"n">y</span><span class=3D"p">,</span><span class=3D"w"=
> </span><span class=3D"n">incy</span><span class=3D"p">)</span><span class=
=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell181">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>where the arguments <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">x</span></code> and <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">y</span></code> have the device attribute.</p>
</li>
<li><p>Portable legacy CUBLAS interfaces which interface directly with CUBL=
AS versions &lt; 4.0, i.e.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre id=
=3D"codecell182"><span></span><span class=3D"n">call</span><span class=3D"w=
"> </span><span class=3D"n">cublasSaxpy</span><span class=3D"p">(</span><sp=
an class=3D"n">n</span><span class=3D"p">,</span><span class=3D"w"> </span>=
<span class=3D"n">a</span><span class=3D"p">,</span><span class=3D"w"> </sp=
an><span class=3D"n">x</span><span class=3D"p">,</span><span class=3D"w"> <=
/span><span class=3D"n">incx</span><span class=3D"p">,</span><span class=3D=
"w"> </span><span class=3D"n">y</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">incy</span><span class=3D"p">)</span><span=
 class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell182">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>where the arguments <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">x</span></code> and <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">y</span></code> must have the device attribute.</p>
</li>
<li><p>New CUBLAS 4.0+ interfaces with access to all features of the new li=
brary.</p>
<p>These interfaces are all in the form of function calls, take a handle as=
 the first argument, and pass many scalar arguments and results by referenc=
e, i.e.</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre id=
=3D"codecell183"><span></span><span class=3D"n">istat</span><span class=3D"=
w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span clas=
s=3D"n">cublasSaxpy_v2</span><span class=3D"p">(</span><span class=3D"n">h<=
/span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n"=
>n</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D=
"n">a</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">x</span><span class=3D"p">,</span><span class=3D"w"> </span><span cl=
ass=3D"n">incx</span><span class=3D"p">,</span><span class=3D"w"> </span><s=
pan class=3D"n">y</span><span class=3D"p">,</span><span class=3D"w"> </span=
><span class=3D"n">incy</span><span class=3D"p">)</span><span class=3D"w"><=
/span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell183">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>In the case of <code class=3D"docutils literal notranslate"><span class=
=3D"pre">saxpy</span></code>, users now have the option of having <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">a</span></code> res=
ide either on the host or device. Functions which traditionally return a sc=
alar, such as <code class=3D"docutils literal notranslate"><span class=3D"p=
re">sdot()</span></code> and <code class=3D"docutils literal notranslate"><=
span class=3D"pre">isamax()</span></code>, now take an extra argument for r=
eturning the result. Functions which traditionally take a <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">character*1</span></code> a=
rgument, such as <code class=3D"docutils literal notranslate"><span class=
=3D"pre">t</span></code> or <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">n</span></code> to control transposing, now take an integ=
er value defined in the <code class=3D"docutils literal notranslate"><span =
class=3D"pre">cublas</span></code> module.</p>
<p>To support the third form, a derived type named <code class=3D"docutils =
literal notranslate"><span class=3D"pre">cublasHandle</span></code> is defi=
ned in the cublas module. You can define a variable of this type using</p>
<div class=3D"highlight-c++ notranslate"><div class=3D"highlight"><pre id=
=3D"codecell184"><span></span><span class=3D"n">type</span><span class=3D"p=
">(</span><span class=3D"n">cublasHandle</span><span class=3D"p">)</span><s=
pan class=3D"w"> </span><span class=3D"o">::</span><span class=3D"w"> </spa=
n><span class=3D"n">h</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell184">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Initialize it by passing it to the <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">cublasCreate</span></code> function.</p>
</li>
</ul>
<p>When using CUBLAS 4.0 and higher, the cublas module properly generates h=
andles for the first two forms from serial and OpenMP parallel regions.</p>
<p>Intermixing the three forms is permitted. To access the handles used int=
ernally in the cublas module use:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell185"><span></span><span class=3D"n">h</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cublasGetHandle</span><span class=3D"p">()</span><span class=3D"w"><=
/span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell185">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>The following form =E2=80=9Cistat =3D cublasGetHandle(h)=E2=80=9D is als=
o supported.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell186"><span></span><span class=3D"n">istat</span><span class=
=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span =
class=3D"n">cublasGetHandle</span><span class=3D"p">(</span><span class=3D"=
n">h</span><span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell186">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Assignment and tests for equality and inequality are supported for the <=
code class=3D"docutils literal notranslate"><span class=3D"pre">cublasHandl=
e</span></code> type.</p>
<p>CUDA 4.0+ helper functions defined in the cublas module:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell187"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cublasCreate</span><span class=
=3D"p">(</span><span class=3D"n">handle</span><span class=3D"p">)</span><sp=
an class=3D"w"></span>
<span class=3D"kt">integer </span><span class=3D"k">function </span><span c=
lass=3D"n">cublasDestroy</span><span class=3D"p">(</span><span class=3D"n">=
handle</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"kt">integer </span><span class=3D"k">function </span><span c=
lass=3D"n">cublasGetVersion</span><span class=3D"p">(</span><span class=3D"=
n">handle</span><span class=3D"p">,</span><span class=3D"w"> </span><span c=
lass=3D"n">version</span><span class=3D"p">)</span><span class=3D"w"></span=
>
<span class=3D"kt">integer </span><span class=3D"k">function </span><span c=
lass=3D"n">cublasSetStream</span><span class=3D"p">(</span><span class=3D"n=
">handle</span><span class=3D"p">,</span><span class=3D"w"> </span><span cl=
ass=3D"n">stream</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"kt">integer </span><span class=3D"k">function </span><span c=
lass=3D"n">cublasGetStream</span><span class=3D"p">(</span><span class=3D"n=
">handle</span><span class=3D"p">,</span><span class=3D"w"> </span><span cl=
ass=3D"n">stream</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"kt">integer </span><span class=3D"k">function </span><span c=
lass=3D"n">cublasGetPointerMode</span><span class=3D"p">(</span><span class=
=3D"n">handle</span><span class=3D"p">,</span><span class=3D"w"> </span><sp=
an class=3D"n">mode</span><span class=3D"p">)</span><span class=3D"w"></spa=
n>
<span class=3D"kt">integer </span><span class=3D"k">function </span><span c=
lass=3D"n">cublasSetPointerMode</span><span class=3D"p">(</span><span class=
=3D"n">handle</span><span class=3D"p">,</span><span class=3D"w"> </span><sp=
an class=3D"n">mode</span><span class=3D"p">)</span><span class=3D"w"></spa=
n>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell187">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Refer to <a class=3D"reference internal" href=3D"https://docs.nvidia.com=
/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#cfexam-c=
ublas-mod"><span class=3D"std std-ref">Cublas Module Example</span></a> for=
 an example that demonstrates the use of the <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">cublas</span></code> module, the <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">cublasHandle</spa=
n></code> type, and the three forms of calls.</p>
<p>NVIDIA provides another module which defines interfaces to the CUFFT Lib=
rary from NVIDIA CUDA Fortran. These interfaces are made accessible by plac=
ing the following statement in the CUDA Fortran host-code program unit.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell188"><span></span><span class=3D"k">use </span><span class=3D=
"n">cufft</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell188">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Here is an example of some code which uses the cufft interfaces:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell189"><span></span><span class=3D"k">program </span><span clas=
s=3D"n">cufft2dTest</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">use </span><span class=3D"n">c=
ufft</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">integer</span><span class=3D"=
p">,</span><span class=3D"w"> </span><span class=3D"k">parameter</span><spa=
n class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span=
><span class=3D"n">n</span><span class=3D"o">=3D</span><span class=3D"mi">4=
50</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">complex</span><span class=3D"=
w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span clas=
s=3D"n">a</span><span class=3D"p">(</span><span class=3D"n">n</span><span c=
lass=3D"p">,</span><span class=3D"n">n</span><span class=3D"p">),</span><sp=
an class=3D"n">b</span><span class=3D"p">(</span><span class=3D"n">n</span>=
<span class=3D"p">,</span><span class=3D"n">n</span><span class=3D"p">)</sp=
an><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">complex</span><span class=3D"=
p">,</span><span class=3D"w"> </span><span class=3D"n">device</span><span c=
lass=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><s=
pan class=3D"n">a_d</span><span class=3D"p">(</span><span class=3D"n">n</sp=
an><span class=3D"p">,</span><span class=3D"n">n</span><span class=3D"p">),=
</span><span class=3D"w"> </span><span class=3D"n">b_d</span><span class=3D=
"p">(</span><span class=3D"n">n</span><span class=3D"p">,</span><span class=
=3D"n">n</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">integer</span><span class=3D"=
w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span clas=
s=3D"n">plan</span><span class=3D"p">,</span><span class=3D"w"> </span><spa=
n class=3D"n">ierr</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"k">dimension</span><span c=
lass=3D"p">(</span><span class=3D"mi">3</span><span class=3D"p">)</span><sp=
an class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </spa=
n><span class=3D"n">res</span><span class=3D"p">,</span><span class=3D"w"> =
</span><span class=3D"nb">exp</span>

<span class=3D"nb">  </span><span class=3D"n">a</span><span class=3D"w">  <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
mi">1</span><span class=3D"p">;</span><span class=3D"w"> </span><span class=
=3D"n">a_d</span><span class=3D"w">  </span><span class=3D"o">=3D</span><sp=
an class=3D"w"> </span><span class=3D"n">a</span><span class=3D"w"></span>

<span class=3D"w">  </span><span class=3D"n">ierr</span><span class=3D"w"> =
</span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D=
"n">cufftPlan2D</span><span class=3D"p">(</span><span class=3D"n">plan</spa=
n><span class=3D"p">,</span><span class=3D"n">n</span><span class=3D"p">,</=
span><span class=3D"n">n</span><span class=3D"p">,</span><span class=3D"n">=
CUFFT_C2C</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">ierr</span><span class=3D"w"> =
</span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D=
"n">ierr</span><span class=3D"w"> </span><span class=3D"o">+</span><span cl=
ass=3D"w"> </span><span class=3D"n">cufftExecC2C</span><span class=3D"p">(<=
/span><span class=3D"n">plan</span><span class=3D"p">,</span><span class=3D=
"n">a_d</span><span class=3D"p">,</span><span class=3D"n">b_d</span><span c=
lass=3D"p">,</span><span class=3D"n">CUFFT_FORWARD</span><span class=3D"p">=
)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">ierr</span><span class=3D"w"> =
</span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D=
"n">ierr</span><span class=3D"w"> </span><span class=3D"o">+</span><span cl=
ass=3D"w"> </span><span class=3D"n">cufftExecC2C</span><span class=3D"p">(<=
/span><span class=3D"n">plan</span><span class=3D"p">,</span><span class=3D=
"n">b_d</span><span class=3D"p">,</span><span class=3D"n">b_d</span><span c=
lass=3D"p">,</span><span class=3D"n">CUFFT_INVERSE</span><span class=3D"p">=
)</span><span class=3D"w"></span>

<span class=3D"w">  </span><span class=3D"n">b</span><span class=3D"w"> </s=
pan><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n"=
>b_d</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">res</span><span class=3D"p">(<=
/span><span class=3D"mi">1</span><span class=3D"p">)</span><span class=3D"w=
"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"nb">maxval</span><span class=3D"p">(</span><span class=3D"nb">abs</span=
><span class=3D"p">(</span><span class=3D"n">a</span><span class=3D"o">-</s=
pan><span class=3D"n">b</span><span class=3D"o">/</span><span class=3D"p">(=
</span><span class=3D"n">n</span><span class=3D"o">*</span><span class=3D"n=
">n</span><span class=3D"p">)))</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">print</span><span class=3D"w">=
 </span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D"=
s1">'Max error C2C: '</span><span class=3D"p">,</span><span class=3D"w"> </=
span><span class=3D"n">res</span><span class=3D"p">(</span><span class=3D"m=
i">1</span><span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell189">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>The distribution also contains a module which defines interfaces to the =
CUSPARSE Library from NVIDIA CUDA Fortran. These interfaces are made explic=
it by placing the following statement in the CUDA Fortran host-code program=
 unit.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell190"><span></span><span class=3D"k">use </span><span class=3D=
"n">cusparse</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell190">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>In addition to the function interfaces, there are several important deri=
ved types and constants which are defined in the cusparse module. Here is a=
n example of their use:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell191"><span></span><span class=3D"c">! Compile with "nvfortran=
 testLevel3.cuf -cudalib=3Dcusparse"</span>
<span class=3D"k">program </span><span class=3D"n">testLevel3</span><span c=
lass=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">use </span><span class=3D"n">c=
udafor</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">use </span><span class=3D"n">c=
usparse</span><span class=3D"w"></span>

<span class=3D"w">  </span><span class=3D"k">implicit none</span>

<span class=3D"k">  </span><span class=3D"kt">integer</span><span class=3D"=
p">,</span><span class=3D"w"> </span><span class=3D"k">parameter</span><spa=
n class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span=
><span class=3D"n">nd</span><span class=3D"w"> </span><span class=3D"o">=3D=
</span><span class=3D"w"> </span><span class=3D"mi">20</span><span class=3D=
"w"> </span><span class=3D"c">! # rows/cols in dense matrix</span>

<span class=3D"w">  </span><span class=3D"k">type</span><span class=3D"p">(=
</span><span class=3D"n">cusparseHandle</span><span class=3D"p">)</span><sp=
an class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </spa=
n><span class=3D"n">h</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">type</span><span class=3D"p">(=
</span><span class=3D"n">cusparseMatDescr</span><span class=3D"p">)</span><=
span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </s=
pan><span class=3D"n">descrA</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">type</span><span class=3D"p">(=
</span><span class=3D"n">cusparseSolveAnalysisInfo</span><span class=3D"p">=
)</span><span class=3D"w"> </span><span class=3D"kd">::</span><span class=
=3D"w"> </span><span class=3D"n">saInfo</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">integer</span><span class=3D"=
w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span clas=
s=3D"n">status</span><span class=3D"p">,</span><span class=3D"w"> </span><s=
pan class=3D"n">version</span><span class=3D"p">,</span><span class=3D"w"> =
</span><span class=3D"n">mode</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">i</span><span class=3D"w"></span>

<span class=3D"w">  </span><span class=3D"c">! D-data</span>
<span class=3D"w">  </span><span class=3D"c">! dense</span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
(</span><span class=3D"mi">8</span><span class=3D"p">)</span><span class=3D=
"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span cla=
ss=3D"n">DAde</span><span class=3D"p">(</span><span class=3D"n">nd</span><s=
pan class=3D"p">,</span><span class=3D"n">nd</span><span class=3D"p">),</sp=
an><span class=3D"w"> </span><span class=3D"n">DBde</span><span class=3D"p"=
>(</span><span class=3D"n">nd</span><span class=3D"p">,</span><span class=
=3D"n">nd</span><span class=3D"p">),</span><span class=3D"w"> </span><span =
class=3D"n">DCde</span><span class=3D"p">(</span><span class=3D"n">nd</span=
><span class=3D"p">,</span><span class=3D"n">nd</span><span class=3D"p">),<=
/span><span class=3D"w"> </span><span class=3D"n">DmaxErr</span><span class=
=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
(</span><span class=3D"mi">8</span><span class=3D"p">),</span><span class=
=3D"w"> </span><span class=3D"n">device</span><span class=3D"w"> </span><sp=
an class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">DAde_d=
</span><span class=3D"p">(</span><span class=3D"n">nd</span><span class=3D"=
p">,</span><span class=3D"n">nd</span><span class=3D"p">),</span><span clas=
s=3D"w"> </span><span class=3D"n">DBde_d</span><span class=3D"p">(</span><s=
pan class=3D"n">nd</span><span class=3D"p">,</span><span class=3D"n">nd</sp=
an><span class=3D"p">),</span><span class=3D"w"> </span><span class=3D"n">D=
Cde_d</span><span class=3D"p">(</span><span class=3D"n">nd</span><span clas=
s=3D"p">,</span><span class=3D"n">nd</span><span class=3D"p">)</span><span =
class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"c">! csr</span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
(</span><span class=3D"mi">8</span><span class=3D"p">)</span><span class=3D=
"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span cla=
ss=3D"n">csrValDA</span><span class=3D"p">(</span><span class=3D"n">nd</spa=
n><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
(</span><span class=3D"mi">8</span><span class=3D"p">),</span><span class=
=3D"w"> </span><span class=3D"n">device</span><span class=3D"w"> </span><sp=
an class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">csrVal=
DA_d</span><span class=3D"p">(</span><span class=3D"n">nd</span><span class=
=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
(</span><span class=3D"mi">8</span><span class=3D"p">)</span><span class=3D=
"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span cla=
ss=3D"n">Dalpha</span><span class=3D"p">,</span><span class=3D"w"> </span><=
span class=3D"n">Dbeta</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
(</span><span class=3D"mi">8</span><span class=3D"p">),</span><span class=
=3D"w"> </span><span class=3D"n">device</span><span class=3D"w"> </span><sp=
an class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">Dalpha=
_d</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D=
"n">Dbeta_d</span><span class=3D"w"></span>

<span class=3D"w">  </span><span class=3D"c">! integer data common to all d=
ata types</span>
<span class=3D"w">  </span><span class=3D"kt">integer</span><span class=3D"=
w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span clas=
s=3D"n">nnz</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">integer</span><span class=3D"=
w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span clas=
s=3D"n">nnzPerRowA</span><span class=3D"p">(</span><span class=3D"n">nd</sp=
an><span class=3D"p">),</span><span class=3D"w"> </span><span class=3D"n">c=
srRowPtrA</span><span class=3D"p">(</span><span class=3D"n">nd</span><span =
class=3D"o">+</span><span class=3D"mi">1</span><span class=3D"p">),</span><=
span class=3D"w"> </span><span class=3D"n">csrColIndA</span><span class=3D"=
p">(</span><span class=3D"n">nd</span><span class=3D"p">)</span><span class=
=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">integer</span><span class=3D"=
p">,</span><span class=3D"w"> </span><span class=3D"n">device</span><span c=
lass=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><s=
pan class=3D"n">nnzPerRowA_d</span><span class=3D"p">(</span><span class=3D=
"n">nd</span><span class=3D"p">),</span><span class=3D"w"> </span><span cla=
ss=3D"n">csrRowPtrA_d</span><span class=3D"p">(</span><span class=3D"n">nd<=
/span><span class=3D"o">+</span><span class=3D"mi">1</span><span class=3D"p=
">),</span><span class=3D"w"> </span><span class=3D"n">csrColIndA_d</span><=
span class=3D"p">(</span><span class=3D"n">nd</span><span class=3D"p">)</sp=
an><span class=3D"w"></span>

<span class=3D"w">  </span><span class=3D"c">! initalization</span>

<span class=3D"w">  </span><span class=3D"n">status</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cusparseCreate</span><span class=3D"p">(</span><span class=3D"n">h</=
span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">status</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cusparseGetVersion</span><span class=3D"p">(</span><span class=3D"n"=
>h</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D=
"n">version</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">write</span><span class=3D"p">=
(</span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D"=
o">*</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"s1">'... version:'</span><span class=3D"p">,</span><span class=3D"w"> <=
/span><span class=3D"n">version</span><span class=3D"w"></span>

<span class=3D"w">  </span><span class=3D"n">status</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cusparseCreateMatDescr</span><span class=3D"p">(</span><span class=
=3D"n">descrA</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">status</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cusparseSetMatType</span><span class=3D"p">(</span><span class=3D"n"=
>descrA</span><span class=3D"p">,</span><span class=3D"w"> </span><span cla=
ss=3D"n">CUSPARSE_MATRIX_TYPE_GENERAL</span><span class=3D"p">)</span><span=
 class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">status</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cusparseSetMatIndexBase</span><span class=3D"p">(</span><span class=
=3D"n">descrA</span><span class=3D"p">,</span><span class=3D"w"> </span><sp=
an class=3D"n">CUSPARSE_INDEX_BASE_ONE</span><span class=3D"p">)</span><spa=
n class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">status</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cusparseCreateSolveAnalysisInfo</span><span class=3D"p">(</span><spa=
n class=3D"n">saInfo</span><span class=3D"p">)</span><span class=3D"w"></sp=
an>

<span class=3D"w">  </span><span class=3D"c">! Initialize matrix (Identity)=
</span>

<span class=3D"w">  </span><span class=3D"n">DAde</span><span class=3D"w"> =
</span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D=
"mf">0.0</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">i</span><span class=3D"w"> </s=
pan><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"mi=
">1</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">nd</span><span class=3D"w"></span>
<span class=3D"w">      </span><span class=3D"n">DAde</span><span class=3D"=
p">(</span><span class=3D"n">i</span><span class=3D"p">,</span><span class=
=3D"n">i</span><span class=3D"p">)</span><span class=3D"w"> </span><span cl=
ass=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"mf">1.0</span>=
<span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">end do</span>
<span class=3D"k">  </span><span class=3D"n">DAde_d</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">DAde</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">call </span><span class=3D"nb"=
>random_number</span><span class=3D"p">(</span><span class=3D"n">DBde</span=
><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">DBde_d</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">DBde</span><span class=3D"w"></span>

<span class=3D"w">  </span><span class=3D"c">! convert from dense to csr</s=
pan>
<span class=3D"w">  </span><span class=3D"n">status</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cusparseDnnz_v2</span><span class=3D"p">(</span><span class=3D"n">h<=
/span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n"=
>CUSPARSE_DIRECTION_ROW</span><span class=3D"p">,</span><span class=3D"w"> =
</span><span class=3D"n">nd</span><span class=3D"p">,</span><span class=3D"=
w"> </span><span class=3D"n">nd</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">descrA</span><span class=3D"p">,</span><sp=
an class=3D"w"> </span><span class=3D"p">&amp;</span><span class=3D"w"></sp=
an>
<span class=3D"w">      </span><span class=3D"n">DAde_d</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">nd</span><span c=
lass=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">nnzPerRowA_d=
</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n=
">nnz</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">status</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cusparseDdense2csr</span><span class=3D"p">(</span><span class=3D"n"=
>h</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D=
"n">nd</span><span class=3D"p">,</span><span class=3D"w"> </span><span clas=
s=3D"n">nd</span><span class=3D"p">,</span><span class=3D"w"> </span><span =
class=3D"n">descrA</span><span class=3D"p">,</span><span class=3D"w"> </spa=
n><span class=3D"n">DAde_d</span><span class=3D"p">,</span><span class=3D"w=
"> </span><span class=3D"n">nd</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">nnzPerRowA_d</span><span class=3D"p">,</sp=
an><span class=3D"w"> </span><span class=3D"p">&amp;</span><span class=3D"w=
"></span>
<span class=3D"w">      </span><span class=3D"n">csrValDA_d</span><span cla=
ss=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">csrRowPtrA_d</=
span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">=
csrColIndA_d</span><span class=3D"p">)</span><span class=3D"w"></span>

<span class=3D"w">  </span><span class=3D"c">! csrmm HPM</span>
<span class=3D"w">  </span><span class=3D"n">Dalpha</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"mf">1.0</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">Dbeta</span><span class=3D"w">=
 </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"mf">0.0</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">status</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cusparseDcsrmm</span><span class=3D"p">(</span><span class=3D"n">h</=
span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">=
CUSPARSE_OPERATION_NON_TRANSPOSE</span><span class=3D"p">,</span><span clas=
s=3D"w"> </span><span class=3D"n">nd</span><span class=3D"p">,</span><span =
class=3D"w"> </span><span class=3D"n">nd</span><span class=3D"p">,</span><s=
pan class=3D"w"> </span><span class=3D"n">nd</span><span class=3D"p">,</spa=
n><span class=3D"w"> </span><span class=3D"p">&amp;</span><span class=3D"w"=
></span>
<span class=3D"w">      </span><span class=3D"n">nnz</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"n">Dalpha</span><span cl=
ass=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">descrA</span>=
<span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">csrVa=
lDA_d</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">csrRowPtrA_d</span><span class=3D"p">,</span><span class=3D"w"> </sp=
an><span class=3D"n">csrColIndA_d</span><span class=3D"p">,</span><span cla=
ss=3D"w"> </span><span class=3D"n">DBde_d</span><span class=3D"p">,</span><=
span class=3D"w"> </span><span class=3D"p">&amp;</span><span class=3D"w"></=
span>
<span class=3D"w">      </span><span class=3D"n">nd</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"n">Dbeta</span><span clas=
s=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">DCde_d</span><s=
pan class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">nd</spa=
n><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">if</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"n">status</span><span class=
=3D"w"> </span><span class=3D"o">/=3D</span><span class=3D"w"> </span><span=
 class=3D"n">CUSPARSE_STATUS_SUCCESS</span><span class=3D"p">)</span><span =
class=3D"w"> </span><span class=3D"k">write</span><span class=3D"w"> </span=
><span class=3D"p">(</span><span class=3D"o">*</span><span class=3D"p">,</s=
pan><span class=3D"o">*</span><span class=3D"p">)</span><span class=3D"w"> =
</span><span class=3D"s1">'CSRMM Error:'</span><span class=3D"p">,</span><s=
pan class=3D"n">status</span><span class=3D"w"></span>

<span class=3D"w">  </span><span class=3D"n">DCde</span><span class=3D"w"> =
</span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D=
"n">DCde_d</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">DmaxErr</span><span class=3D"w=
"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"nb">maxval</span><span class=3D"p">(</span><span class=3D"nb">abs</span=
><span class=3D"p">(</span><span class=3D"n">DCde</span><span class=3D"o">-=
</span><span class=3D"n">DBde</span><span class=3D"p">))</span><span class=
=3D"w"></span>

<span class=3D"w">  </span><span class=3D"n">status</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cusparseDestroy</span><span class=3D"p">(</span><span class=3D"n">h<=
/span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">write</span><span class=3D"p">=
(</span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D"=
o">*</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"s1">'cusparseDestroy'</span><span class=3D"p">,</span><span class=3D"w"=
> </span><span class=3D"n">status</span><span class=3D"p">,</span><span cla=
ss=3D"w"> </span><span class=3D"n">DmaxErr</span><span class=3D"w"></span>

<span class=3D"k">end program </span><span class=3D"n">testLevel3</span><sp=
an class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell191">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<span class=3D"target" id=3D"cfapi-runtime"></span></section>
</section>
</section>
<section id=3D"runtime-apis">
<h1><span class=3D"section-number">4. </span>Runtime APIs<a class=3D"header=
link" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-f=
ortran-prog-guide/index.html#runtime-apis" title=3D"Permalink to this headl=
ine">=EF=83=81</a></h1>
<p>The system module <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">cudafor</span></code> defines the interfaces to the Runtime API =
routines.</p>
<p>For a complete explanation of the purpose and function of each routine i=
n this chapter, refer to <a class=3D"reference external" href=3D"https://do=
cs.nvidia.com/cuda/cuda-runtime-api">docs.nvidia.com/cuda/cuda-runtime-api<=
/a>.</p>
<p>Most of the runtime API routines are integer functions that return an er=
ror code; they return a value of zero if the call was successful, and a non=
zero value if there was an error. To interpret the error codes, refer to <a=
 class=3D"reference internal" href=3D"https://docs.nvidia.com/hpc-sdk/archi=
ve/25.3/compilers/cuda-fortran-prog-guide/index.html#error-handling"><span =
class=3D"std std-ref">Error Handling</span></a>.</p>
<p>Unless a specific kind is provided, the plain integer type implies integ=
er(4) and the plain real type implies real(4).</p>
<section id=3D"initialization">
<h2><span class=3D"section-number">4.1. </span>Initialization<a class=3D"he=
aderlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cu=
da-fortran-prog-guide/index.html#initialization" title=3D"Permalink to this=
 headline">=EF=83=81</a></h2>
<p>No explicit initialization is required; the runtime initializes and conn=
ects to the device the first time a runtime routine is called or a device a=
rray is allocated.</p>
<div class=3D"admonition tip">
<p class=3D"admonition-title">Tip</p>
<p>When doing timing runs, be aware that initialization can add some overhe=
ad.</p>
</div>
</section>
<section id=3D"device-management">
<h2><span class=3D"section-number">4.2. </span>Device Management<a class=3D=
"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers=
/cuda-fortran-prog-guide/index.html#device-management" title=3D"Permalink t=
o this headline">=EF=83=81</a></h2>
<p>Use the functions in this section for device management.</p>
<p>For a complete explanation of the purpose and function of each routine l=
isted here, refer to the Device Management section at <a class=3D"reference=
 external" href=3D"https://docs.nvidia.com/cuda/cuda-runtime-api">https://d=
ocs.nvidia.com/cuda/cuda-runtime-api</a>.</p>
<section id=3D"cudachoosedevice">
<h3><span class=3D"section-number">4.2.1. </span>cudaChooseDevice<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#cudachoosedevice" title=3D"Permalink=
 to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell192"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaChooseDevice</span><span cla=
ss=3D"w"> </span><span class=3D"p">(</span><span class=3D"w"> </span><span =
class=3D"n">devnum</span><span class=3D"p">,</span><span class=3D"w"> </spa=
n><span class=3D"n">prop</span><span class=3D"w"> </span><span class=3D"p">=
)</span><span class=3D"w"></span>
<span class=3D"w">     </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">out</span><span class=3D"p">)</spa=
n><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> =
</span><span class=3D"n">devnum</span><span class=3D"w"></span>
<span class=3D"w">     </span><span class=3D"k">type</span><span class=3D"p=
">(</span><span class=3D"n">cudadeviceprop</span><span class=3D"p">),</span=
><span class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p"=
>(</span><span class=3D"n">in</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">prop</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell192">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaCho=
oseDevice</span></code> assigns the device number that best matches the pro=
perties given in <code class=3D"docutils literal notranslate"><span class=
=3D"pre">prop</span></code> to its first argument.</p>
</section>
<section id=3D"cudadevicegetattribute">
<h3><span class=3D"section-number">4.2.2. </span>cudaDeviceGetAttribute<a c=
lass=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/co=
mpilers/cuda-fortran-prog-guide/index.html#cudadevicegetattribute" title=3D=
"Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell193"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaDeviceGetAttribute</span><sp=
an class=3D"w"> </span><span class=3D"p">(</span><span class=3D"w"> </span>=
<span class=3D"n">val</span><span class=3D"p">,</span><span class=3D"w"> </=
span><span class=3D"n">attribute</span><span class=3D"p">,</span><span clas=
s=3D"w"> </span><span class=3D"n">devicenum</span><span class=3D"w"> </span=
><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">     </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">out</span><span class=3D"p">)</spa=
n><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> =
</span><span class=3D"n">val</span><span class=3D"w"></span>
<span class=3D"w">     </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span=
><span class=3D"w">  </span><span class=3D"kd">::</span><span class=3D"w"> =
</span><span class=3D"n">attribute</span><span class=3D"w"></span>
<span class=3D"w">     </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span=
><span class=3D"w">  </span><span class=3D"kd">::</span><span class=3D"w"> =
</span><span class=3D"n">devicenum</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell193">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaDev=
iceGetAttribute</span></code> returns information about the device. Specifi=
c information returned is determined by the <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">attribute</span></code> argument, for the=
 specified device number.</p>
</section>
<section id=3D"cudadevicegetcacheconfig">
<h3><span class=3D"section-number">4.2.3. </span>cudaDeviceGetCacheConfig<a=
 class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/=
compilers/cuda-fortran-prog-guide/index.html#cudadevicegetcacheconfig" titl=
e=3D"Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell194"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaDeviceGetCacheConfig</span><=
span class=3D"w"> </span><span class=3D"p">(</span><span class=3D"w"> </spa=
n><span class=3D"n">cacheconfig</span><span class=3D"w"> </span><span class=
=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">     </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">out</span><span class=3D"p">)</spa=
n><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> =
</span><span class=3D"n">cacheconfig</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell194">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaDev=
iceGetCacheConfig</span></code> returns the preferred cache configuration f=
or the current device. Current possible cache configurations are defined to=
 be <code class=3D"docutils literal notranslate"><span class=3D"pre">cudaFu=
ncCachePreferNone</span></code>, <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">cudaFuncCachePreferShared</span></code>, and <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">cudaFuncCachePref=
erL1</span></code>.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaDev=
iceGetCacheConfig</span></code> is available in device code starting in CUD=
A 5.0.</p>
</section>
<section id=3D"cudadevicegetlimit">
<h3><span class=3D"section-number">4.2.4. </span>cudaDeviceGetLimit<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#cudadevicegetlimit" title=3D"Permali=
nk to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell195"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaDeviceGetLimit</span><span c=
lass=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">val</span><s=
pan class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">limit</=
span><span class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w">=
</span>
<span class=3D"w">   </span><span class=3D"kt">integer</span><span class=3D=
"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><span=
 class=3D"n">cuda_count_kind</span><span class=3D"p">)</span><span class=3D=
"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span cla=
ss=3D"n">val</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"kt">integer</span><span class=3D=
"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span cla=
ss=3D"n">limit</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell195">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaGet=
DeviceGetLimit</span></code> returns in val the current size of limit. Curr=
ent possible limit arguments are <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">cudaLimitStackSize</span></code>, <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">cudaLimitPrintfSize</span></=
code>, and <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>cudaLimitMallocHeapSize</span></code>.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaGet=
DeviceGetLimit</span></code> is available in device code starting in CUDA 5=
.0.</p>
</section>
<section id=3D"cudadevicegetsharedmemconfig">
<h3><span class=3D"section-number">4.2.5. </span>cudaDeviceGetSharedMemConf=
ig<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/2=
5.3/compilers/cuda-fortran-prog-guide/index.html#cudadevicegetsharedmemconf=
ig" title=3D"Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell196"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaDeviceGetSharedMemConfig</sp=
an><span class=3D"w"> </span><span class=3D"p">(</span><span class=3D"w"> <=
/span><span class=3D"n">config</span><span class=3D"w"> </span><span class=
=3D"p">)</span><span class=3D"w"></span>
<span class=3D"kt">integer</span><span class=3D"p">,</span><span class=3D"w=
"> </span><span class=3D"k">intent</span><span class=3D"p">(</span><span cl=
ass=3D"n">out</span><span class=3D"p">)</span><span class=3D"w"> </span><sp=
an class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">config=
</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell196">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaDev=
iceGetSharedMemConfig</span></code> returns the current size of the shared =
memory banks on the current device. This routine is for use with devices wi=
th configurable shared memory banks, and is supported starting with CUDA 4.=
2. Current possible shared memory configurations are defined to be <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">cudaSharedMemBankS=
izeDefault</span></code>, <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">cudaSharedMemBankSizeFourByte</span></code>, and <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">cudaSharedMemBankSiz=
eEightByte</span></code>.</p>
</section>
<section id=3D"cudadevicegetstreampriorityrange">
<h3><span class=3D"section-number">4.2.6. </span>cudaDeviceGetStreamPriorit=
yRange<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archi=
ve/25.3/compilers/cuda-fortran-prog-guide/index.html#cudadevicegetstreampri=
orityrange" title=3D"Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell197"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaDeviceGetStreamPriorityRange=
</span><span class=3D"w"> </span><span class=3D"p">(</span><span class=3D"w=
"> </span><span class=3D"n">leastpriority</span><span class=3D"p">,</span><=
span class=3D"w"> </span><span class=3D"n">greatestpriority</span><span cla=
ss=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"kt">integer</span><span class=3D"p">,</span><span class=3D"w=
"> </span><span class=3D"k">intent</span><span class=3D"p">(</span><span cl=
ass=3D"n">out</span><span class=3D"p">)</span><span class=3D"w"> </span><sp=
an class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">leastp=
riority</span><span class=3D"p">,</span><span class=3D"w"> </span><span cla=
ss=3D"n">greatestpriority</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell197">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaDev=
iceGetStreamPriorityRange</span></code> returns the numerical values that c=
orrespond to the least and greatest stream priorities for the current conte=
xt and device.</p>
</section>
<section id=3D"cudadevicereset">
<h3><span class=3D"section-number">4.2.7. </span>cudaDeviceReset<a class=3D=
"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers=
/cuda-fortran-prog-guide/index.html#cudadevicereset" title=3D"Permalink to =
this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell198"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaDeviceReset</span><span clas=
s=3D"p">()</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell198">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaDev=
iceReset</span></code> resets the current device attached to the current pr=
ocess.</p>
</section>
<section id=3D"cudadevicesetcacheconfig">
<h3><span class=3D"section-number">4.2.8. </span>cudaDeviceSetCacheConfig<a=
 class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/=
compilers/cuda-fortran-prog-guide/index.html#cudadevicesetcacheconfig" titl=
e=3D"Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell199"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaDeviceSetCacheConfig</span><=
span class=3D"w"> </span><span class=3D"p">(</span><span class=3D"w"> </spa=
n><span class=3D"n">cacheconfig</span><span class=3D"w"> </span><span class=
=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">     </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> <=
/span><span class=3D"n">cacheconfig</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell199">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaDev=
iceSetCacheConfig</span></code> sets the current device preferred cache con=
figuration. Current possible cache configurations are defined to be <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">cudaFuncCachePref=
erNone</span></code>, <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">cudaFuncCachePreferShared</span></code>, and <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">cudaFuncCachePreferL1</span>=
</code>.</p>
</section>
<section id=3D"cudadevicesetlimit">
<h3><span class=3D"section-number">4.2.9. </span>cudaDeviceSetLimit<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#cudadevicesetlimit" title=3D"Permali=
nk to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell200"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaDeviceSetLimit</span><span c=
lass=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">limit</span>=
<span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">val</=
span><span class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w">=
</span>
<span class=3D"w">  </span><span class=3D"kt">integer</span><span class=3D"=
w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span clas=
s=3D"n">limit</span><span class=3D"w"></span>

<span class=3D"w">  </span><span class=3D"kt">integer</span><span class=3D"=
p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><span =
class=3D"n">cuda_count_kind</span><span class=3D"p">)</span><span class=3D"=
w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span clas=
s=3D"n">val</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell200">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaGet=
DeviceSetLimit</span></code> sets the limit of the current device to val. C=
urrent possible limit arguments are <code class=3D"docutils literal notrans=
late"><span class=3D"pre">cudaLimitStackSize</span></code>, <code class=3D"=
docutils literal notranslate"><span class=3D"pre">cudaLimitPrintfSize</span=
></code>, and <code class=3D"docutils literal notranslate"><span class=3D"p=
re">cudaLimitMallocHeapSize</span></code>.</p>
</section>
<section id=3D"cudadevicesetsharedmemconfig">
<h3><span class=3D"section-number">4.2.10. </span>cudaDeviceSetSharedMemCon=
fig<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/=
25.3/compilers/cuda-fortran-prog-guide/index.html#cudadevicesetsharedmemcon=
fig" title=3D"Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell201"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaDeviceSetSharedMemConfig</sp=
an><span class=3D"w"> </span><span class=3D"p">(</span><span class=3D"w"> <=
/span><span class=3D"n">config</span><span class=3D"w"> </span><span class=
=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> <=
/span><span class=3D"n">config</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell201">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaDev=
iceSetSharedMemConfig</span></code> sets the size of the shared memory bank=
s on the current device. This routine is for use with devices with configur=
able shared memory banks, and is supported starting with CUDA 4.2. Current =
possible shared memory configurations are defined to be <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">cudaSharedMemBankSizeDefault<=
/span></code>, <code class=3D"docutils literal notranslate"><span class=3D"=
pre">cudaSharedMemBankSizeFourByte</span></code>, and <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">cudaSharedMemBankSizeEightByte<=
/span></code>.</p>
</section>
<section id=3D"cudadevicesynchronize">
<h3><span class=3D"section-number">4.2.11. </span>cudaDeviceSynchronize<a c=
lass=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/co=
mpilers/cuda-fortran-prog-guide/index.html#cudadevicesynchronize" title=3D"=
Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell202"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaDeviceSynchronize</span><spa=
n class=3D"p">()</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell202">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaDev=
iceSynchronize</span></code> blocks the current device until all preceding =
requested tasks have completed.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaDev=
iceSynchronize</span></code> was available in device code starting in CUDA =
5.0.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaDev=
iceSynchronize</span></code> has been removed from CUDA Fortran device code=
 starting with the NVHPC 22.11 Release as it is no longer supported there i=
n the CUDA Programming Model.</p>
</section>
<section id=3D"cudagetdevice">
<h3><span class=3D"section-number">4.2.12. </span>cudaGetDevice<a class=3D"=
headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/=
cuda-fortran-prog-guide/index.html#cudagetdevice" title=3D"Permalink to thi=
s headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell203"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaGetDevice</span><span class=
=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">devnum</span><sp=
an class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">out</span><span class=3D"p">)</spa=
n><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> =
</span><span class=3D"n">devnum</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell203">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaGet=
Device</span></code> assigns the device number associated with this host th=
read to its first argument.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaGet=
Device</span></code> is available in device code starting in CUDA 5.0.</p>
</section>
<section id=3D"cudagetdevicecount">
<h3><span class=3D"section-number">4.2.13. </span>cudaGetDeviceCount<a clas=
s=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compi=
lers/cuda-fortran-prog-guide/index.html#cudagetdevicecount" title=3D"Permal=
ink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell204"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaGetDeviceCount</span><span c=
lass=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">numdev</span=
><span class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"></sp=
an>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">out</span><span class=3D"p">)</spa=
n><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> =
</span><span class=3D"n">numdev</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell204">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaGet=
DeviceCount</span></code> assigns the number of available devices to its fi=
rst argument.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaGet=
DeviceCount</span></code> is available in device code starting in CUDA 5.0.=
</p>
</section>
<section id=3D"cudagetdeviceproperties">
<h3><span class=3D"section-number">4.2.14. </span>cudaGetDeviceProperties<a=
 class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/=
compilers/cuda-fortran-prog-guide/index.html#cudagetdeviceproperties" title=
=3D"Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell205"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaGetDeviceProperties</span><s=
pan class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">prop</s=
pan><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">d=
evnum</span><span class=3D"w"> </span><span class=3D"p">)</span><span class=
=3D"w"></span>
<span class=3D"w">     </span><span class=3D"k">type</span><span class=3D"p=
">(</span><span class=3D"n">cudadeviceprop</span><span class=3D"p">),</span=
><span class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p"=
>(</span><span class=3D"n">out</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">prop</span><span class=3D"w"></span>
<span class=3D"w">     </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> <=
/span><span class=3D"n">devnum</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell205">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaGet=
DeviceProperties</span></code> returns the properties of a given device.</p=
>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaGet=
DeviceProperties</span></code> is available in device code starting in CUDA=
 5.0.</p>
</section>
<section id=3D"cudasetdevice">
<h3><span class=3D"section-number">4.2.15. </span>cudaSetDevice<a class=3D"=
headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/=
cuda-fortran-prog-guide/index.html#cudasetdevice" title=3D"Permalink to thi=
s headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell206"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaSetDevice</span><span class=
=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">devnum</span><sp=
an class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> <=
/span><span class=3D"n">devnum</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell206">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaSet=
Device</span></code> selects the device to associate with this host thread.=
</p>
</section>
<section id=3D"cudasetdeviceflags">
<h3><span class=3D"section-number">4.2.16. </span>cudaSetDeviceFlags<a clas=
s=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compi=
lers/cuda-fortran-prog-guide/index.html#cudasetdeviceflags" title=3D"Permal=
ink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell207"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaSetDevice</span><span class=
=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">flags</span><spa=
n class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> <=
/span><span class=3D"n">flags</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell207">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaSet=
DeviceFlags</span></code> records how the CUDA runtime interacts with this =
host thread.</p>
</section>
<section id=3D"cudasetvaliddevices">
<h3><span class=3D"section-number">4.2.17. </span>cudaSetValidDevices<a cla=
ss=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/comp=
ilers/cuda-fortran-prog-guide/index.html#cudasetvaliddevices" title=3D"Perm=
alink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell208"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaSetValidDevices</span><span =
class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">devices</sp=
an><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">nu=
mdev</span><span class=3D"w"> </span><span class=3D"p">)</span><span class=
=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">numdev</span><span class=3D"p">,</span><span class=3D"w"> </spa=
n><span class=3D"n">devices</span><span class=3D"p">(</span><span class=3D"=
n">numdev</span><span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell208">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaSet=
ValidDevices</span></code> sets a list of valid devices for CUDA execution =
in priority order as specified in the devices array.</p>
<span class=3D"target" id=3D"thread-mgmt"></span></section>
</section>
<section id=3D"thread-management">
<h2><span class=3D"section-number">4.3. </span>Thread Management<a class=3D=
"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers=
/cuda-fortran-prog-guide/index.html#thread-management" title=3D"Permalink t=
o this headline">=EF=83=81</a></h2>
<p>Sometimes threads within a block access the same addresses in shared or =
global memory, thus creating potential read-after-write, write-after-read, =
or write-after-write hazards for some of these memory accesses. To avoid th=
ese potential issues, use the functions in this section for thread manageme=
nt. These functions have been deprecated beginning in CUDA 4.0.</p>
<section id=3D"cudathreadexit">
<h3><span class=3D"section-number">4.3.1. </span>cudaThreadExit<a class=3D"=
headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/=
cuda-fortran-prog-guide/index.html#cudathreadexit" title=3D"Permalink to th=
is headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell209"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaThreadExit</span><span class=
=3D"p">()</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell209">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaThr=
eadExit</span></code> explicitly cleans up all runtime-related CUDA resourc=
es associated with the host thread. Any subsequent CUDA calls or operations=
 will reinitialize the runtime.</p>
<p>Calling cudaThreadExit is optional; it is implicitly called when the hos=
t thread exits.</p>
</section>
<section id=3D"cudathreadsynchronize">
<h3><span class=3D"section-number">4.3.2. </span>cudaThreadSynchronize<a cl=
ass=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/com=
pilers/cuda-fortran-prog-guide/index.html#cudathreadsynchronize" title=3D"P=
ermalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell210"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaThreadSynchronize</span><spa=
n class=3D"p">()</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell210">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaThr=
eadSynchronize</span></code> blocks execution of the host subprogram until =
all preceding kernels and operations are complete. It may return an error c=
ondition if one of the preceding operations fails.</p>
<div class=3D"admonition note">
<p class=3D"admonition-title">Note</p>
<p>This function is deprecated because its name does not reflect its behavi=
or. Its functionality is identical to the non-deprecated function <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">cudaDeviceSynchroni=
ze()</span></code>, which you should use instead.</p>
</div>
<span class=3D"target" id=3D"error-handling"></span></section>
</section>
<section id=3D"id3">
<h2><span class=3D"section-number">4.4. </span>Error Handling<a class=3D"he=
aderlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cu=
da-fortran-prog-guide/index.html#id3" title=3D"Permalink to this headline">=
=EF=83=81</a></h2>
<p>Use the functions in this section for error handling.</p>
<p>For a complete explanation of the purpose and function of each routine l=
isted here, refer to the Error Handling section at <a class=3D"reference ex=
ternal" href=3D"https://docs.nvidia.com/cuda/cuda-runtime-api">https://docs=
.nvidia.com/cuda/cuda-runtime-api</a>.</p>
<section id=3D"cudageterrorstring">
<h3><span class=3D"section-number">4.4.1. </span>cudaGetErrorString<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#cudageterrorstring" title=3D"Permali=
nk to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell211"><span></span><span class=3D"k">function </span><span cla=
ss=3D"n">cudaGetErrorString</span><span class=3D"p">(</span><span class=3D"=
w"> </span><span class=3D"n">errcode</span><span class=3D"w"> </span><span =
class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span =
class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</spa=
n><span class=3D"n">in</span><span class=3D"p">)</span><span class=3D"w"> <=
/span><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"=
n">errcode</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">character</span><span class=
=3D"o">*</span><span class=3D"p">(</span><span class=3D"o">*</span><span cl=
ass=3D"p">)</span><span class=3D"w"> </span><span class=3D"kd">::</span><sp=
an class=3D"w"> </span><span class=3D"n">cudaGetErrorString</span><span cla=
ss=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell211">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaGet=
ErrorString</span></code> returns the message string associated with the gi=
ven error code.</p>
</section>
<section id=3D"cudagetlasterror">
<h3><span class=3D"section-number">4.4.2. </span>cudaGetLastError<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#cudagetlasterror" title=3D"Permalink=
 to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell212"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaGetLastError</span><span cla=
ss=3D"p">()</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell212">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaGet=
LastError</span></code> returns the error code that was most recently retur=
ned from any runtime call in this host thread.</p>
</section>
<section id=3D"cudapeekatlasterror">
<h3><span class=3D"section-number">4.4.3. </span>cudaPeekAtLastError<a clas=
s=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compi=
lers/cuda-fortran-prog-guide/index.html#cudapeekatlasterror" title=3D"Perma=
link to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell213"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaPeekAtLastError</span><span =
class=3D"p">()</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell213">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaPee=
kAtLastError</span></code> returns the last error code that has been produc=
ed by the CUDA runtime without resetting the error code to <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">cudaSuccess</span></code> =
like <code class=3D"docutils literal notranslate"><span class=3D"pre">cudaG=
etLastError</span></code>.</p>
</section>
</section>
<section id=3D"stream-management">
<h2><span class=3D"section-number">4.5. </span>Stream Management<a class=3D=
"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers=
/cuda-fortran-prog-guide/index.html#stream-management" title=3D"Permalink t=
o this headline">=EF=83=81</a></h2>
<p>Use the functions in this section for stream management.</p>
<p>For a complete explanation of the purpose and function of each routine l=
isted here, refer to the Stream Management section at <a class=3D"reference=
 external" href=3D"https://docs.nvidia.com/cuda/cuda-runtime-api">https://d=
ocs.nvidia.com/cuda/cuda-runtime-api</a>.</p>
<section id=3D"cudaforgetdefaultstream">
<h3><span class=3D"section-number">4.5.1. </span>cudaforGetDefaultStream<a =
class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/c=
ompilers/cuda-fortran-prog-guide/index.html#cudaforgetdefaultstream" title=
=3D"Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell214"><span></span><span class=3D"kt">integer</span><span clas=
s=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><=
span class=3D"n">cuda_stream_kind</span><span class=3D"p">)</span><span cla=
ss=3D"w"> </span><span class=3D"k">function </span><span class=3D"n">cudafo=
rGetDefaultStream</span><span class=3D"p">(</span><span class=3D"w"> </span=
><span class=3D"n">devptr</span><span class=3D"w"> </span><span class=3D"p"=
>)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell214">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudafor=
GetDefaultStream</span></code> returns the default stream which has been as=
sociated with a thread, managed variable, or device variable via a call to =
<code class=3D"docutils literal notranslate"><span class=3D"pre">cudaforSet=
DefaultStream</span></code>. <code class=3D"docutils literal notranslate"><=
span class=3D"pre">devptr</span></code> may be any managed or device scalar=
 or array of a supported type specified in <a class=3D"reference internal" =
href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran=
-prog-guide/index.html#cfref-dev-code-datatypes-dev-code-intrinsic-tbl"><sp=
an class=3D"std std-ref">Device Code Intrinsic Datatypes</span></a>. The <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">devptr</span=
></code> argument is optional; if it is not specified, the function returns=
 the stream tied to the thread, or zero (the default stream).</p>
<p>Streams values returned from <code class=3D"docutils literal notranslate=
"><span class=3D"pre">cudaforGetDefaultStream</span></code> can be used as =
the argument to other CUDA libraries, such as the routines <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">cublasSetStream()</span></=
code>, <code class=3D"docutils literal notranslate"><span class=3D"pre">cuf=
ftSetStream()</span></code>, and <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">cusparseSetStream()</span></code>.</p>
</section>
<section id=3D"cudaforsetdefaultstream">
<h3><span class=3D"section-number">4.5.2. </span>cudaforSetDefaultStream<a =
class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/c=
ompilers/cuda-fortran-prog-guide/index.html#cudaforsetdefaultstream" title=
=3D"Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell215"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaforSetDefaultStream</span><s=
pan class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">devptr<=
/span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n"=
>stream</span><span class=3D"w"> </span><span class=3D"p">)</span><span cla=
ss=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><s=
pan class=3D"n">cuda_stream_kind</span><span class=3D"p">),</span><span cla=
ss=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</span><=
span class=3D"n">in</span><span class=3D"p">)</span><span class=3D"w"> </sp=
an><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">=
stream</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell215">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudafor=
SetDefaultStream</span></code> sets the default stream for all subsequent h=
igh-level CUDA Fortran operations on managed or device data initiated by th=
at CPU thread. The specific operations affected with managed data are alloc=
atation via the Fortran allocate statement, assignment (both memset and mem=
cpy types), CUF Kernel and global kernel launches, and sum(), maxval(), and=
 minval() reduction operations. <code class=3D"docutils literal notranslate=
"><span class=3D"pre">devptr</span></code> may be any managed or device sca=
lar or array of a supported type specified in <a class=3D"reference interna=
l" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fort=
ran-prog-guide/index.html#cfref-dev-code-datatypes-dev-code-intrinsic-tbl">=
<span class=3D"std std-ref">Device Code Intrinsic Datatypes</span></a>. The=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">devptr</s=
pan></code> argument is optional; if it is not specified, the function ties=
 the specified stream to all subsequent, allowable, high-level operations e=
xecuting on that thread.</p>
</section>
<section id=3D"cudastreamattachmemasync">
<h3><span class=3D"section-number">4.5.3. </span>cudaStreamAttachMemAsync<a=
 class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/=
compilers/cuda-fortran-prog-guide/index.html#cudastreamattachmemasync" titl=
e=3D"Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell216"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaStreamAttachMemAsync</span><=
span class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">stream=
</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n=
">devptr</span><span class=3D"p">,</span><span class=3D"w"> </span><span cl=
ass=3D"n">length</span><span class=3D"p">,</span><span class=3D"w"> </span>=
<span class=3D"n">flags</span><span class=3D"w"> </span><span class=3D"p">)=
</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><s=
pan class=3D"n">cuda_stream_kind</span><span class=3D"p">),</span><span cla=
ss=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</span><=
span class=3D"n">in</span><span class=3D"p">)</span><span class=3D"w"> </sp=
an><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">=
stream</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><s=
pan class=3D"n">cuda_count_kind</span><span class=3D"p">),</span><span clas=
s=3D"w"> </span><span class=3D"k">optional</span><span class=3D"p">,</span>=
<span class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">=
(</span><span class=3D"n">in</span><span class=3D"p">)</span><span class=3D=
"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span cla=
ss=3D"n">length</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">optional</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent=
</span><span class=3D"p">(</span><span class=3D"n">in</span><span class=3D"=
p">)</span><span class=3D"w"> </span><span class=3D"kd">::</span><span clas=
s=3D"w"> </span><span class=3D"n">flags</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell216">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaStr=
eamAttachMemAsync</span></code> initiates a stream operation to attach the =
managed allocation starting at address <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">devptr</span></code> to the specified stream. =
<code class=3D"docutils literal notranslate"><span class=3D"pre">devptr</sp=
an></code> may be any managed scalar or array of a supported type specified=
 in <a class=3D"reference internal" href=3D"https://docs.nvidia.com/hpc-sdk=
/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#cfref-dev-code-d=
atatypes-dev-code-intrinsic-tbl"><span class=3D"std std-ref">Device Code In=
trinsic Datatypes</span></a>. The argument <code class=3D"docutils literal =
notranslate"><span class=3D"pre">len</span></code> is optional, but current=
ly must be zero. The flags argument must be <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">cudaMemAttachGlobal</span></code>, <code =
class=3D"docutils literal notranslate"><span class=3D"pre">cudMemAttachHost=
</span></code>, or <code class=3D"docutils literal notranslate"><span class=
=3D"pre">cudMemAttachSingle</span></code>.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaStr=
eamAttachMemAsync</span></code> is available starting in CUDA 6.0.</p>
</section>
<section id=3D"cudastreamcreate">
<h3><span class=3D"section-number">4.5.4. </span>cudaStreamCreate<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#cudastreamcreate" title=3D"Permalink=
 to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell217"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaStreamCreate</span><span cla=
ss=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">stream</span><=
span class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"></span=
>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><s=
pan class=3D"n">cuda_stream_kind</span><span class=3D"p">),</span><span cla=
ss=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</span><=
span class=3D"n">out</span><span class=3D"p">)</span><span class=3D"w"> </s=
pan><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n"=
>stream</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell217">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaStr=
eamCreate</span></code> creates an asynchronous <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">stream</span></code> and assigns its =
identifier to its first argument.</p>
</section>
<section id=3D"cudastreamcreatewithflags">
<h3><span class=3D"section-number">4.5.5. </span>cudaStreamCreateWithFlags<=
a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3=
/compilers/cuda-fortran-prog-guide/index.html#cudastreamcreatewithflags" ti=
tle=3D"Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell218"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaStreamCreateWithFlags</span>=
<span class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">strea=
m</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"=
n">flags</span><span class=3D"w"> </span><span class=3D"p">)</span><span cl=
ass=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><s=
pan class=3D"n">cuda_stream_kind</span><span class=3D"p">),</span><span cla=
ss=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</span><=
span class=3D"n">out</span><span class=3D"p">)</span><span class=3D"w"> </s=
pan><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n"=
>stream</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> <=
/span><span class=3D"n">flags</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell218">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaStr=
eamCreateWithFlags</span></code> creates an asynchronous <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">stream</span></code> and ass=
igns its identifier to its first argument. Valid values for flags are <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">cudaStreamDefau=
lt</span></code> or <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">cudaStreamNonBlocking</span></code>.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaStr=
eamCreateWithFlags</span></code> is available in device code starting in CU=
DA 5.0.</p>
</section>
<section id=3D"cudastreamcreatewithpriority">
<h3><span class=3D"section-number">4.5.6. </span>cudaStreamCreateWithPriori=
ty<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/2=
5.3/compilers/cuda-fortran-prog-guide/index.html#cudastreamcreatewithpriori=
ty" title=3D"Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell219"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaStreamCreateWithPriority</sp=
an><span class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">st=
ream</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">flags</span><span class=3D"p">,</span><span class=3D"w"> </span><spa=
n class=3D"n">priority</span><span class=3D"w"> </span><span class=3D"p">)<=
/span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><s=
pan class=3D"n">cuda_stream_kind</span><span class=3D"p">),</span><span cla=
ss=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</span><=
span class=3D"n">out</span><span class=3D"p">)</span><span class=3D"w"> </s=
pan><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n"=
>stream</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> <=
/span><span class=3D"n">flags</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">priority</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell219">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaStr=
eamCreateWithPriority</span></code> creates an asynchronous <code class=3D"=
docutils literal notranslate"><span class=3D"pre">stream</span></code> and =
assigns its identifier to its first argument. Valid values for flags are <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">cudaStreamDe=
fault</span></code> or <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">cudaStreamNonBlocking</span></code>. Lower values for priority=
 represent higher priorities. Work in a higher priority stream may preempt =
work already executing in a low priority stream.</p>
</section>
<section id=3D"cudastreamdestroy">
<h3><span class=3D"section-number">4.5.7. </span>cudaStreamDestroy<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#cudastreamdestroy" title=3D"Permalin=
k to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell220"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaStreamDestroy</span><span cl=
ass=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">stream</span>=
<span class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"></spa=
n>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><s=
pan class=3D"n">cuda_stream_kind</span><span class=3D"p">),</span><span cla=
ss=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</span><=
span class=3D"n">in</span><span class=3D"p">)</span><span class=3D"w"> </sp=
an><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">=
stream</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell220">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaStr=
eamDestroy</span></code> releases any resources associated with the given <=
code class=3D"docutils literal notranslate"><span class=3D"pre">stream</spa=
n></code>.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaStr=
eamDestroy</span></code> is available in device code starting in CUDA 5.0.<=
/p>
</section>
<section id=3D"cudastreamgetpriority">
<h3><span class=3D"section-number">4.5.8. </span>cudaStreamGetPriority<a cl=
ass=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/com=
pilers/cuda-fortran-prog-guide/index.html#cudastreamgetpriority" title=3D"P=
ermalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell221"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaStreamGetPriority</span><spa=
n class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">stream</s=
pan><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">p=
riority</span><span class=3D"w"> </span><span class=3D"p">)</span><span cla=
ss=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><s=
pan class=3D"n">cuda_stream_kind</span><span class=3D"p">),</span><span cla=
ss=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</span><=
span class=3D"n">in</span><span class=3D"p">)</span><span class=3D"w"> </sp=
an><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">=
stream</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">out</span><span class=3D"p">)</spa=
n><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> =
</span><span class=3D"n">priority</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell221">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaStr=
eamGetPriority</span></code> queries and returns the priority of the given =
stream in <code class=3D"docutils literal notranslate"><span class=3D"pre">=
priority</span></code>.</p>
</section>
<section id=3D"cudastreamquery">
<h3><span class=3D"section-number">4.5.9. </span>cudaStreamQuery<a class=3D=
"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers=
/cuda-fortran-prog-guide/index.html#cudastreamquery" title=3D"Permalink to =
this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell222"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaStreamQuery</span><span clas=
s=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">stream</span><s=
pan class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><s=
pan class=3D"n">cuda_stream_kind</span><span class=3D"p">),</span><span cla=
ss=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</span><=
span class=3D"n">in</span><span class=3D"p">)</span><span class=3D"w"> </sp=
an><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">=
stream</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell222">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaStr=
eamQuery</span></code> tests whether all operations enqueued to the selecte=
d <code class=3D"docutils literal notranslate"><span class=3D"pre">stream</=
span></code> are complete; it returns zero (success) if all operations are =
complete, and the value <code class=3D"docutils literal notranslate"><span =
class=3D"pre">cudaErrorNotReady</span></code> if not. It may also return an=
other error condition if some asynchronous operations failed.</p>
</section>
<section id=3D"cudastreamsynchronize">
<h3><span class=3D"section-number">4.5.10. </span>cudaStreamSynchronize<a c=
lass=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/co=
mpilers/cuda-fortran-prog-guide/index.html#cudastreamsynchronize" title=3D"=
Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell223"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaStreamSynchronize</span><spa=
n class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">stream</s=
pan><span class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"><=
/span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><s=
pan class=3D"n">cuda_stream_kind</span><span class=3D"p">),</span><span cla=
ss=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</span><=
span class=3D"n">in</span><span class=3D"p">)</span><span class=3D"w"> </sp=
an><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">=
stream</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell223">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaStr=
eamSynchronize</span></code> blocks execution of the host subprogram until =
all preceding kernels and operations associated with the given <code class=
=3D"docutils literal notranslate"><span class=3D"pre">stream</span></code> =
are complete. It may return error codes from previous, asynchronous operati=
ons.</p>
</section>
<section id=3D"cudastreamwaitevent">
<h3><span class=3D"section-number">4.5.11. </span>cudaStreamWaitEvent<a cla=
ss=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/comp=
ilers/cuda-fortran-prog-guide/index.html#cudastreamwaitevent" title=3D"Perm=
alink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell224"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaStreamWaitEvent</span><span =
class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">stream</spa=
n><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">eve=
nt</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D=
"n">flags</span><span class=3D"w"> </span><span class=3D"p">)</span><span c=
lass=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><s=
pan class=3D"n">cuda_stream_kind</span><span class=3D"p">)</span><span clas=
s=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span=
 class=3D"n">stream</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudaEvent</span><span class=3D"p">),</span><span=
 class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</sp=
an><span class=3D"n">in</span><span class=3D"p">)</span><span class=3D"w"> =
</span><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D=
"n">event</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">flags</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell224">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaStr=
eamWaitEvent</span></code> blocks execution on all work submitted on the <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">stream</span=
></code> until the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">event</span></code> reports completion.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaStr=
eamWaitEvent</span></code> is available in device code starting in CUDA 5.0=
.</p>
</section>
</section>
<section id=3D"event-management">
<h2><span class=3D"section-number">4.6. </span>Event Management<a class=3D"=
headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/=
cuda-fortran-prog-guide/index.html#event-management" title=3D"Permalink to =
this headline">=EF=83=81</a></h2>
<p>Use the functions in this section to manage events.</p>
<p>For a complete explanation of the purpose and function of each routine l=
isted here, refer to the Event Management section at <a class=3D"reference =
external" href=3D"https://docs.nvidia.com/cuda/cuda-runtime-api">https://do=
cs.nvidia.com/cuda/cuda-runtime-api</a>.</p>
<section id=3D"cudaeventcreate">
<h3><span class=3D"section-number">4.6.1. </span>cudaEventCreate<a class=3D=
"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers=
/cuda-fortran-prog-guide/index.html#cudaeventcreate" title=3D"Permalink to =
this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell225"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaEventCreate</span><span clas=
s=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">event</span><sp=
an class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudaEvent</span><span class=3D"p">),</span><span=
 class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</sp=
an><span class=3D"n">out</span><span class=3D"p">)</span><span class=3D"w">=
 </span><span class=3D"kd">::</span><span class=3D"w"> </span><span class=
=3D"n">event</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell225">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaEve=
ntCreate</span></code> creates an event object and assigns the event identi=
fier to its first argument</p>
</section>
<section id=3D"cudaeventcreatewithflags">
<h3><span class=3D"section-number">4.6.2. </span>cudaEventCreateWithFlags<a=
 class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/=
compilers/cuda-fortran-prog-guide/index.html#cudaeventcreatewithflags" titl=
e=3D"Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell226"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaEventCreateWithFlags</span><=
span class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">event<=
/span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n"=
>flags</span><span class=3D"w"> </span><span class=3D"p">)</span><span clas=
s=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudaEvent</span><span class=3D"p">),</span><span=
 class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</sp=
an><span class=3D"n">out</span><span class=3D"p">)</span><span class=3D"w">=
 </span><span class=3D"kd">::</span><span class=3D"w"> </span><span class=
=3D"n">event</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">flags</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell226">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaEve=
ntCreateWithFlags</span></code> creates an event object with the specified =
flags. Current flags supported are <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">cudaEventDefault</span></code>, <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">cudaEventBlockingSync</span>=
</code>, and <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">cudaEventDisableTiming</span></code>.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaEve=
ntCreateWithFlags</span></code> is available in device code starting in CUD=
A 5.0.</p>
</section>
<section id=3D"cudaeventdestroy">
<h3><span class=3D"section-number">4.6.3. </span>cudaEventDestroy<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#cudaeventdestroy" title=3D"Permalink=
 to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell227"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaEventDestroy</span><span cla=
ss=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">event</span><s=
pan class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudaEvent</span><span class=3D"p">),</span><span=
 class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</sp=
an><span class=3D"n">in</span><span class=3D"p">)</span><span class=3D"w"> =
</span><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D=
"n">event</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell227">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaEve=
ntDestroy</span></code> destroys the resources associated with an event obj=
ect.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaEve=
ntDestroy</span></code> is available in device code starting in CUDA 5.0.</=
p>
</section>
<section id=3D"cudaeventelapsedtime">
<h3><span class=3D"section-number">4.6.4. </span>cudaEventElapsedTime<a cla=
ss=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/comp=
ilers/cuda-fortran-prog-guide/index.html#cudaeventelapsedtime" title=3D"Per=
malink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell228"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaEventElapsedTime</span><span=
 class=3D"p">(</span><span class=3D"w"> </span><span class=3D"nb">time</spa=
n><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">sta=
rt</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D=
"k">end</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">real</span><span class=3D"w=
"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span class=
=3D"nb">time</span>
<span class=3D"nb">    </span><span class=3D"k">type</span><span class=3D"p=
">(</span><span class=3D"n">cudaEvent</span><span class=3D"p">),</span><spa=
n class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">()</=
span><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w=
"> </span><span class=3D"n">start</span><span class=3D"p">,</span><span cla=
ss=3D"w"> </span><span class=3D"k">end</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell228">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaEve=
ntElapsedTime</span></code> computes the elapsed time between two events (i=
n milliseconds). It returns <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">cudaErrorInvalidValue</span></code> if either event has n=
ot yet been recorded. This function is only valid with events recorded on s=
tream zero.</p>
</section>
<section id=3D"cudaeventquery">
<h3><span class=3D"section-number">4.6.5. </span>cudaEventQuery<a class=3D"=
headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/=
cuda-fortran-prog-guide/index.html#cudaeventquery" title=3D"Permalink to th=
is headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell229"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaEventQuery</span><span class=
=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">event</span><spa=
n class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudaEvent</span><span class=3D"p">),</span><span=
 class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</sp=
an><span class=3D"n">in</span><span class=3D"p">)</span><span class=3D"w"> =
</span><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D=
"n">event</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell229">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaEve=
ntQuery</span></code> tests whether an <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">event</span></code> has been recorded. It retu=
rns success (zero) if the event has been recorded, and <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">cudaErrorNotReady</span></code=
> if it has not. It returns <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">cudaErrorInvalidValue</span></code> if <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">cudaEventRecord</span></code=
> has not been called for this event.</p>
</section>
<section id=3D"cudaeventrecord">
<h3><span class=3D"section-number">4.6.6. </span>cudaEventRecord<a class=3D=
"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers=
/cuda-fortran-prog-guide/index.html#cudaeventrecord" title=3D"Permalink to =
this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell230"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaEventRecord</span><span clas=
s=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">event</span><sp=
an class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">stream</=
span><span class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w">=
</span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudaEvent</span><span class=3D"p">),</span><span=
 class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</sp=
an><span class=3D"n">in</span><span class=3D"p">)</span><span class=3D"w"> =
</span><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D=
"n">event</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> <=
/span><span class=3D"n">stream</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell230">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaEve=
ntRecord</span></code> issues an operation to the given <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">stream</span></code> to recor=
d an <code class=3D"docutils literal notranslate"><span class=3D"pre">event=
</span></code>. The event is recorded after all preceding operations in the=
 stream are complete. If <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">stream</span></code> is zero, the event is recorded after al=
l preceding operations in all streams are complete.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaEve=
ntRecord</span></code> is available in device code starting in CUDA 5.0.</p=
>
</section>
<section id=3D"cudaeventsynchronize">
<h3><span class=3D"section-number">4.6.7. </span>cudaEventSynchronize<a cla=
ss=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/comp=
ilers/cuda-fortran-prog-guide/index.html#cudaeventsynchronize" title=3D"Per=
malink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell231"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaEventSynchronize</span><span=
 class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">event</spa=
n><span class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"></s=
pan>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudaEvent</span><span class=3D"p">),</span><span=
 class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</sp=
an><span class=3D"n">in</span><span class=3D"p">)</span><span class=3D"w"> =
</span><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D=
"n">event</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell231">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaEve=
ntSynchronize</span></code> blocks until the <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">event</span></code> has been recorded. I=
t returns a value of <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">cudaErrorInvalidValue</span></code> if <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">cudaEventRecord</span></code> has n=
ot been called for this event.</p>
</section>
</section>
<section id=3D"execution-control">
<h2><span class=3D"section-number">4.7. </span>Execution Control<a class=3D=
"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers=
/cuda-fortran-prog-guide/index.html#execution-control" title=3D"Permalink t=
o this headline">=EF=83=81</a></h2>
<p>CUDA Fortran does not support all API routines which duplicate the funct=
ionality of the chevron syntax. Additional functionality which has been pro=
vided with later versions of CUDA is available.</p>
<p>For a complete explanation of the purpose and function of each routine l=
isted here, refer to the Execution Control section at <a class=3D"reference=
 external" href=3D"https://docs.nv%20idia.com/cuda/cuda-runtime-api">https:=
//docs.nv idia.com/cuda/cuda-runtime-api</a>.</p>
<section id=3D"cudafuncgetattributes">
<h3><span class=3D"section-number">4.7.1. </span>cudaFuncGetAttributes<a cl=
ass=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/com=
pilers/cuda-fortran-prog-guide/index.html#cudafuncgetattributes" title=3D"P=
ermalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell232"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaFuncGetAttributes</span><spa=
n class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">attr</spa=
n><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">fun=
c</span><span class=3D"w"> </span><span class=3D"p">)</span><span class=3D"=
w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudaFuncAttributes</span><span class=3D"p">),</s=
pan><span class=3D"w"> </span><span class=3D"k">intent</span><span class=3D=
"p">(</span><span class=3D"n">out</span><span class=3D"p">)</span><span cla=
ss=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><spa=
n class=3D"n">attr</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">external</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">func</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell232">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaFun=
cGetAttributes</span></code> gets the attributes for the function named by =
the func argument, which must be a global function.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaFun=
cGetAttributes</span></code> is available in device code starting in CUDA 5=
.0.</p>
</section>
<section id=3D"cudafuncsetattribute">
<h3><span class=3D"section-number">4.7.2. </span>cudaFuncSetAttribute<a cla=
ss=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/comp=
ilers/cuda-fortran-prog-guide/index.html#cudafuncsetattribute" title=3D"Per=
malink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell233"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaFuncSetAttribute</span><span=
 class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">func</span=
><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">attr=
ibute</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"k">value</span><span class=3D"w"> </span><span class=3D"p">)</span><spa=
n class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">external</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">func</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w">  </span><span class=3D"kd">::</span><span class=3D"w"> </span><span=
 class=3D"n">attribute</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w">  </span><span class=3D"kd">::</span><span class=3D"w"> </span><span=
 class=3D"k">value</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell233">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaFun=
cSetAttribute</span></code> sets the attribute for the function named by th=
e func argument, which must be a global function.</p>
</section>
<section id=3D"cudafuncsetcacheconfig">
<h3><span class=3D"section-number">4.7.3. </span>cudaFuncSetCacheConfig<a c=
lass=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/co=
mpilers/cuda-fortran-prog-guide/index.html#cudafuncsetcacheconfig" title=3D=
"Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell234"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaFuncSetCacheConfig</span><sp=
an class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">func</sp=
an><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">ca=
checonfig</span><span class=3D"w"> </span><span class=3D"p">)</span><span c=
lass=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">character</span><span class=
=3D"o">*</span><span class=3D"p">(</span><span class=3D"o">*</span><span cl=
ass=3D"p">)</span><span class=3D"w"> </span><span class=3D"kd">::</span><sp=
an class=3D"w"> </span><span class=3D"n">func</span><span class=3D"w"></spa=
n>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">cacheconfig</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell234">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaFun=
cSetCacheConfig</span></code> sets the preferred cache configuration for th=
e function named by the func argument, which must be a global function. Cur=
rent possible cache configurations are defined to be <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">cudaFuncCachePreferNone</span></=
code>, <code class=3D"docutils literal notranslate"><span class=3D"pre">cud=
aFuncCachePreferShared</span></code>, and <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">cudaFuncCachePreferL1</span></code>.</p>
</section>
<section id=3D"cudafuncsetsharedmemconfig">
<h3><span class=3D"section-number">4.7.4. </span>cudaFuncSetSharedMemConfig=
<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.=
3/compilers/cuda-fortran-prog-guide/index.html#cudafuncsetsharedmemconfig" =
title=3D"Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell235"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaFuncSetSharedMemConfig</span=
><span class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">func=
</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n=
">cacheconfig</span><span class=3D"w"> </span><span class=3D"p">)</span><sp=
an class=3D"w"></span>
<span class=3D"kt">character</span><span class=3D"o">*</span><span class=3D=
"p">(</span><span class=3D"o">*</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">func</span><span class=3D"w"></span>
<span class=3D"kt">integer</span><span class=3D"w"> </span><span class=3D"k=
d">::</span><span class=3D"w"> </span><span class=3D"n">cacheconfig</span><=
span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell235">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaFun=
cSetSharedMemConfig</span></code> sets the size of the shared memory banks =
for the function named by the <code class=3D"docutils literal notranslate">=
<span class=3D"pre">func</span></code> argument, which must be a global fun=
ction. This routine is for use with devices with configurable shared memory=
 banks, and is supported starting with CUDA 4.2. Current possible shared me=
mory configurations are defined to be <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">cudaSharedMemBankSizeDefault</span></code>, <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">cudaSharedMem=
BankSizeFourByte</span></code>, and <code class=3D"docutils literal notrans=
late"><span class=3D"pre">cudaSharedMemBankSizeEightByte</span></code></p>
</section>
<section id=3D"cudasetdoublefordevice">
<h3><span class=3D"section-number">4.7.5. </span>cudaSetDoubleForDevice<a c=
lass=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/co=
mpilers/cuda-fortran-prog-guide/index.html#cudasetdoublefordevice" title=3D=
"Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell236"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaSetDoubleForDevice</span><sp=
an class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">d</span>=
<span class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"></spa=
n>
<span class=3D"w">    </span><span class=3D"kt">real</span><span class=3D"p=
">(</span><span class=3D"mi">8</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">d</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell236">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaSet=
DoubleForDevice</span></code> sets the argument <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">d</span></code> to an internal repres=
entation suitable for devices which do not support double precision arithme=
tic.</p>
</section>
<section id=3D"cudasetdoubleforhost">
<h3><span class=3D"section-number">4.7.6. </span>cudaSetDoubleForHost<a cla=
ss=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/comp=
ilers/cuda-fortran-prog-guide/index.html#cudasetdoubleforhost" title=3D"Per=
malink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell237"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaSetDoubleForHost</span><span=
 class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">d</span><s=
pan class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">real</span><span class=3D"p=
">(</span><span class=3D"mi">8</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">d</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell237">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaSet=
DoubleForHost</span></code> sets the argument <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">d</span></code> from an internal repres=
entation on devices which do not support double precision arithmetic to the=
 normal host representation.</p>
</section>
</section>
<section id=3D"occupancy">
<h2><span class=3D"section-number">4.8. </span>Occupancy<a class=3D"headerl=
ink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fo=
rtran-prog-guide/index.html#occupancy" title=3D"Permalink to this headline"=
>=EF=83=81</a></h2>
<p>The occupancy routines take a global subroutine as an argument and retur=
n values related to occupancy, available to be used in kernel launch config=
urations.</p>
<p>CUDA Fortran has extended the chevron syntax to take a <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">*</span></code> argument wh=
ich will call these functions within the runtime, i.e. under the hood. This=
 convenience may not be desirable if the kernel is launched many times as i=
t does invoke some overhead for each call.</p>
<p>Use of the occupancy calls, either explicitly or via the <code class=3D"=
docutils literal notranslate"><span class=3D"pre">*</span></code> syntax, i=
s particularly useful when launching grid_global kernels as the launch para=
meters must be sized to fit on the current device.</p>
<p>Use the functions in this section for explicit occupancy calculations.</=
p>
<p>For a complete explanation of the purpose and function of each routine l=
isted here, refer to the Occupancy section at <a class=3D"reference externa=
l" href=3D"https://docs.nvidia.com/cuda/cuda-runtime-api">https://docs.nvid=
ia.com/cuda/cuda-runtime-api</a>.</p>
<section id=3D"cudaoccupancymaxactiveblockspermultiprocessor">
<h3><span class=3D"section-number">4.8.1. </span>cudaOccupancyMaxActiveBloc=
ksPerMultiprocessor<a class=3D"headerlink" href=3D"https://docs.nvidia.com/=
hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#cudaoccup=
ancymaxactiveblockspermultiprocessor" title=3D"Permalink to this headline">=
=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell238"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaOccupancyMaxActiveBlocksPerM=
ultiprocessor</span><span class=3D"p">(</span><span class=3D"w"> </span><sp=
an class=3D"n">numBlocks</span><span class=3D"p">,</span><span class=3D"w">=
 </span><span class=3D"n">func</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">blockSize</span><span class=3D"p">,</span>=
<span class=3D"w"> </span><span class=3D"n">dynamicSMemSize</span><span cla=
ss=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">numBlocks</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">external</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">func</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">blockSize</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">dynamicSMemSize</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell238">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaOcc=
upancyMaxActiveBlocksPerMultiprocessor</span></code> returns the occupancy,=
 as the number of blocks per multiprocessor, given the global subroutine na=
med by the func argument, the block size (number of threads) the kernel is =
intended to be launched with, and the amount of dynamic shared memory, in b=
ytes, the kernel is intended to be launched with.</p>
</section>
<section id=3D"cudaoccupancymaxactiveblockspermultiprocessorwithflags">
<h3><span class=3D"section-number">4.8.2. </span>cudaOccupancyMaxActiveBloc=
ksPerMultiprocessorWithFlags<a class=3D"headerlink" href=3D"https://docs.nv=
idia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#=
cudaoccupancymaxactiveblockspermultiprocessorwithflags" title=3D"Permalink =
to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell239"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaOccupancyMaxActiveBlocksPerM=
ultiprocessorWithFlags</span><span class=3D"p">(</span><span class=3D"w"> <=
/span><span class=3D"n">numBlocks</span><span class=3D"p">,</span><span cla=
ss=3D"w"> </span><span class=3D"n">func</span><span class=3D"p">,</span><sp=
an class=3D"w"> </span><span class=3D"n">blockSize</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"n">dynamicSMemSize</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">flags<=
/span><span class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"=
></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">numBlocks</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">external</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">func</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">blockSize</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">dynamicSMemSize</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">flags</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell239">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaOcc=
upancyMaxActiveBlocksPerMultiprocessorWithFlags</span></code> returns the o=
ccupancy, as the number of blocks per multiprocessor, given the global subr=
outine named by the func argument, the block size (number of threads) the k=
ernel is intended to be launched with, and the amount of dynamic shared mem=
ory, in bytes, the kernel is intended to be launched with, for the specifie=
d flags.</p>
</section>
<section id=3D"cudaoccupancymaxpotentialclustersize">
<h3><span class=3D"section-number">4.8.3. </span>cudaOccupancyMaxPotentialC=
lusterSize<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/a=
rchive/25.3/compilers/cuda-fortran-prog-guide/index.html#cudaoccupancymaxpo=
tentialclustersize" title=3D"Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell240"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaOccupancyMaxPotentialCluster=
Size</span><span class=3D"p">(</span><span class=3D"w"> </span><span class=
=3D"n">csize</span><span class=3D"p">,</span><span class=3D"w"> </span><spa=
n class=3D"n">func</span><span class=3D"p">,</span><span class=3D"w"> </spa=
n><span class=3D"n">config</span><span class=3D"w"> </span><span class=3D"p=
">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">csize</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">external</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">func</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudaLaunchConfig</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> <=
/span><span class=3D"n">config</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell240">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaOcc=
upancyMaxPotentialClusterSize</span></code> returns the maximum cluster siz=
e that can be launched, given the input kernel, func, and launch configurat=
ion specified in the config argument.</p>
</section>
<section id=3D"cudaoccupancymaxactiveclusters">
<h3><span class=3D"section-number">4.8.4. </span>cudaOccupancyMaxActiveClus=
ters<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive=
/25.3/compilers/cuda-fortran-prog-guide/index.html#cudaoccupancymaxactivecl=
usters" title=3D"Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell241"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaOccupancyMaxActiveClusters</=
span><span class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">=
maxc</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">func</span><span class=3D"p">,</span><span class=3D"w"> </span><span=
 class=3D"n">config</span><span class=3D"w"> </span><span class=3D"p">)</sp=
an><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">maxc</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">external</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">func</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudaLaunchConfig</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> <=
/span><span class=3D"n">config</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell241">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaOcc=
upancyMaxActiveClusters</span></code> returns the maximum number of cluster=
s that could co-exist on the target device. The cluster size can be set in =
the config argument.</p>
<span class=3D"target" id=3D"memory-mgmt"></span></section>
</section>
<section id=3D"memory-management">
<h2><span class=3D"section-number">4.9. </span>Memory Management<a class=3D=
"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers=
/cuda-fortran-prog-guide/index.html#memory-management" title=3D"Permalink t=
o this headline">=EF=83=81</a></h2>
<p>Many of the memory management routines can take device arrays as argumen=
ts. Some can also take C types, provided through the Fortran 2003 <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">iso_c_binding</span=
></code> module, as arguments to simplify interfacing to existing CUDA C co=
de.</p>
<p>CUDA Fortran has extended the F2003 derived type <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">TYPE(C_PTR)</span></code> by prov=
iding a C device pointer, defined in the <code class=3D"docutils literal no=
translate"><span class=3D"pre">cudafor</span></code> module, as <code class=
=3D"docutils literal notranslate"><span class=3D"pre">TYPE(C_DEVPTR)</span>=
</code>. Consistent use of <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">TYPE(C_PTR)</span></code> and <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">TYPE(C_DEVPTR)</span></code>, as well =
as consistency checks between Fortran device arrays and host arrays, should=
 be of benefit.</p>
<p>Currently, it is possible to construct a Fortran device array out of a <=
code class=3D"docutils literal notranslate"><span class=3D"pre">TYPE(C_DEVP=
TR)</span></code> by using an extension of the <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">iso_c_binding</span></code> subroutine=
 c_f_pointer. Under CUDA Fortran, c_f_pointer will take a <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">TYPE(C_DEVPTR)</span></code=
> as the first argument, an allocatable device array as the second argument=
, a shape as the third argument, and in effect transfer the allocation to t=
he Fortran array. Similarly, there is also a function <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">C_DEVLOC()</span></code> define=
d which will create a <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">TYPE(C_DEVPTR)</span></code> that holds the C address of the Fo=
rtran device array argument. Both of these features are subject to change w=
hen, in the future, proper Fortran pointers for device data are supported.<=
/p>
<p>Use the functions in this section for memory management.</p>
<p>For a complete explanation of the purpose and function of each routine l=
isted here, refer to the Memory Management section at <a class=3D"reference=
 external" href=3D"https://docs.nvidia.com/cuda/cuda-runtime-api">https://d=
ocs.nvidia.com/cuda/cuda-runtime-api</a>.</p>
<section id=3D"cudafree">
<h3><span class=3D"section-number">4.9.1. </span>cudaFree<a class=3D"header=
link" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-f=
ortran-prog-guide/index.html#cudafree" title=3D"Permalink to this headline"=
>=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell242"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaFree</span><span class=3D"p"=
>(</span><span class=3D"n">devptr</span><span class=3D"p">)</span><span cla=
ss=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell242">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaFre=
e</span></code> deallocates data on the device. <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">devptr</span></code> may be any alloc=
atable device array of a supported type specified in <a class=3D"reference =
internal" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cu=
da-fortran-prog-guide/index.html#cfref-dev-code-datatypes-dev-code-intrinsi=
c-tbl"><span class=3D"std std-ref">Device Code Intrinsic Datatypes</span></=
a>. Or, <code class=3D"docutils literal notranslate"><span class=3D"pre">de=
vptr</span></code> may be of TYPE(C_DEVPTR).</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaFre=
e</span></code> is available in device code starting in CUDA 5.0.</p>
</section>
<section id=3D"cudafreearray">
<h3><span class=3D"section-number">4.9.2. </span>cudaFreeArray<a class=3D"h=
eaderlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/c=
uda-fortran-prog-guide/index.html#cudafreearray" title=3D"Permalink to this=
 headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell243"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaFreeArray</span><span class=
=3D"p">(</span><span class=3D"n">carray</span><span class=3D"p">)</span><sp=
an class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudaArrayPtr</span><span class=3D"p">)</span><sp=
an class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </spa=
n><span class=3D"n">carray</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell243">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaFre=
eArray</span></code> frees an array that was allocated on the device.</p>
</section>
<section id=3D"cudafreeasync">
<h3><span class=3D"section-number">4.9.3. </span>cudaFreeAsync<a class=3D"h=
eaderlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/c=
uda-fortran-prog-guide/index.html#cudafreeasync" title=3D"Permalink to this=
 headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell244"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaFreeAsync</span><span class=
=3D"p">(</span><span class=3D"n">devptr</span><span class=3D"p">,</span><sp=
an class=3D"w"> </span><span class=3D"n">stream</span><span class=3D"p">)</=
span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell244">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaFre=
eAsync</span></code> deallocates data on the device, asynchronously, on the=
 specified stream. <code class=3D"docutils literal notranslate"><span class=
=3D"pre">devptr</span></code> may be any allocatable device array of a supp=
orted type specified in <a class=3D"reference internal" href=3D"https://doc=
s.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.h=
tml#cfref-dev-code-datatypes-dev-code-intrinsic-tbl"><span class=3D"std std=
-ref">Device Code Intrinsic Datatypes</span></a>. Or, <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">devptr</span></code> may be of =
TYPE(C_DEVPTR). The <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">stream</span></code> argument is an integer of kind=3Dcuda_stream=
_kind.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaFre=
eAsync</span></code> is available starting in CUDA 11.2.</p>
</section>
<section id=3D"cudafreehost">
<h3><span class=3D"section-number">4.9.4. </span>cudaFreeHost<a class=3D"he=
aderlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cu=
da-fortran-prog-guide/index.html#cudafreehost" title=3D"Permalink to this h=
eadline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell245"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaFreeHost</span><span class=
=3D"p">(</span><span class=3D"n">hostptr</span><span class=3D"p">)</span><s=
pan class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"kt">C_PTR</span><span class=3D"p">)</span><span cla=
ss=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><spa=
n class=3D"n">hostptr</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell245">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaFre=
eHost</span></code> deallocates pinned memory on the host allocated with <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">cudaMalloHos=
t</span></code>.</p>
</section>
<section id=3D"cudagetsymboladdress">
<h3><span class=3D"section-number">4.9.5. </span>cudaGetSymbolAddress<a cla=
ss=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/comp=
ilers/cuda-fortran-prog-guide/index.html#cudagetsymboladdress" title=3D"Per=
malink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell246"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaGetSymbolAddress</span><span=
 class=3D"p">(</span><span class=3D"n">devptr</span><span class=3D"p">,</sp=
an><span class=3D"w"> </span><span class=3D"n">symbol</span><span class=3D"=
p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">C_DEVPTR</span><span class=3D"p">)</span><span c=
lass=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><s=
pan class=3D"n">devptr</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"kt">c_ptr</span><span class=3D"p">)</span><span cla=
ss=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><spa=
n class=3D"n">symbol</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell246">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaGet=
SymbolAddress</span></code> returns in the <code class=3D"docutils literal =
notranslate"><span class=3D"pre">devptr</span></code> argument the address =
of <code class=3D"docutils literal notranslate"><span class=3D"pre">symbol<=
/span></code> on the device. A <code class=3D"docutils literal notranslate"=
><span class=3D"pre">symbol</span></code> can be set to an external device =
name via a character string.</p>
<p>The following code sequence initializes a global device array =E2=80=98v=
x=E2=80=99 from a CUDA C kernel:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell247"><span></span><span class=3D"k">type</span><span class=3D=
"p">(</span><span class=3D"kt">c_ptr</span><span class=3D"p">)</span><span =
class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><=
span class=3D"n">csvx</span><span class=3D"w"></span>
<span class=3D"k">type</span><span class=3D"p">(</span><span class=3D"n">c_=
devptr</span><span class=3D"p">)</span><span class=3D"w"> </span><span clas=
s=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">cdvx</span><s=
pan class=3D"w"></span>
<span class=3D"kt">real</span><span class=3D"p">,</span><span class=3D"w"> =
</span><span class=3D"k">allocatable</span><span class=3D"p">,</span><span =
class=3D"w"> </span><span class=3D"n">device</span><span class=3D"w"> </spa=
n><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">v=
x</span><span class=3D"p">(:)</span><span class=3D"w"></span>
<span class=3D"n">csvx</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"s1">'vx'</span><span cla=
ss=3D"w"></span>
<span class=3D"n">Istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaGetSymbolAddress<=
/span><span class=3D"p">(</span><span class=3D"n">cdvx</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"n">csvx</span><span cl=
ass=3D"p">)</span><span class=3D"w"></span>
<span class=3D"k">Call </span><span class=3D"nb">c_f_pointer</span><span cl=
ass=3D"p">(</span><span class=3D"n">cdvx</span><span class=3D"p">,</span><s=
pan class=3D"w"> </span><span class=3D"n">vx</span><span class=3D"p">,</spa=
n><span class=3D"w"> </span><span class=3D"mi">100</span><span class=3D"p">=
)</span><span class=3D"w"></span>
<span class=3D"n">Vx</span><span class=3D"w"> </span><span class=3D"o">=3D<=
/span><span class=3D"w"> </span><span class=3D"mf">0.0</span><span class=3D=
"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell247">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"cudagetsymbolsize">
<h3><span class=3D"section-number">4.9.6. </span>cudaGetSymbolSize<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#cudagetsymbolsize" title=3D"Permalin=
k to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell248"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaGetSymbolSize</span><span cl=
ass=3D"p">(</span><span class=3D"n">size</span><span class=3D"p">,</span><s=
pan class=3D"w"> </span><span class=3D"n">symbol</span><span class=3D"p">)<=
/span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">size</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"kt">c_ptr</span><span class=3D"p">)</span><span cla=
ss=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><spa=
n class=3D"n">symbol</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell248">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaGet=
SymbolSize</span></code> sets the variable <code class=3D"docutils literal =
notranslate"><span class=3D"pre">size</span></code> to the size of a device=
 area in global or constant memory space referenced by the <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">symbol</span></code>.</p>
</section>
<section id=3D"cudahostalloc">
<h3><span class=3D"section-number">4.9.7. </span>cudaHostAlloc<a class=3D"h=
eaderlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/c=
uda-fortran-prog-guide/index.html#cudahostalloc" title=3D"Permalink to this=
 headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell249"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaHostAlloc</span><span class=
=3D"p">(</span><span class=3D"n">hostptr</span><span class=3D"p">,</span><s=
pan class=3D"w"> </span><span class=3D"n">size</span><span class=3D"p">,</s=
pan><span class=3D"w"> </span><span class=3D"n">flags</span><span class=3D"=
p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"kt">C_PTR</span><span class=3D"p">)</span><span cla=
ss=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><spa=
n class=3D"n">hostptr</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">size</span><span class=3D"p">,</span><span class=3D"w"> </span>=
<span class=3D"n">flags</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell249">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaHos=
tAlloc</span></code> allocates pinned memory on the host. It returns in <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">hostptr</span=
></code> the address of the page-locked allocation, or returns an error if =
the memory is unavailable. <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">Size</span></code> is in bytes. The <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">flags</span></code> argument ena=
bles different options to be specified that affect the allocation. The norm=
al iso_c_binding subroutine c_f_pointer can be used to move the type(c_ptr)=
 to a Fortran pointer.</p>
</section>
<section id=3D"cudahostgetdevicepointer">
<h3><span class=3D"section-number">4.9.8. </span>cudaHostGetDevicePointer<a=
 class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/=
compilers/cuda-fortran-prog-guide/index.html#cudahostgetdevicepointer" titl=
e=3D"Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell250"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaHostGetDevicePointer</span><=
span class=3D"p">(</span><span class=3D"n">devptr</span><span class=3D"p">,=
</span><span class=3D"w"> </span><span class=3D"n">hostptr</span><span clas=
s=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">flags</span><sp=
an class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">C_DEVPTR</span><span class=3D"p">)</span><span c=
lass=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><s=
pan class=3D"n">devptr</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"kt">C_PTR</span><span class=3D"p">)</span><span cla=
ss=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><spa=
n class=3D"n">hostptr</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">flags</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell250">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaHos=
tGetDevicePointer</span></code> returns a pointer to a device memory addres=
s corresponding to the pinned memory on the host. <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">hostptr</span></code> is a pinned m=
emory buffer that was allocated via <code class=3D"docutils literal notrans=
late"><span class=3D"pre">cudaHostAlloc()</span></code>. It returns in <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">devptr</span><=
/code> an address that can be passed to, and read and written by, a kernel =
which runs on the device. The <code class=3D"docutils literal notranslate">=
<span class=3D"pre">flags</span></code> argument is provided for future rel=
eases. The normal iso_c_binding subroutine c_f_pointer can be used to move =
the type(c_devptr)to a device array.</p>
</section>
<section id=3D"cudahostgetflags">
<h3><span class=3D"section-number">4.9.9. </span>cudaHostGetFlags<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#cudahostgetflags" title=3D"Permalink=
 to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell251"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaHostGetFlags</span><span cla=
ss=3D"p">(</span><span class=3D"n">flags</span><span class=3D"p">,</span><s=
pan class=3D"w"> </span><span class=3D"n">hostptr</span><span class=3D"p">)=
</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">flags</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"kt">C_PTR</span><span class=3D"p">)</span><span cla=
ss=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><spa=
n class=3D"n">hostptr</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell251">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaHos=
tGetFlags</span></code> returns the flags associated with a host pointer.</=
p>
</section>
<section id=3D"cudahostregister">
<h3><span class=3D"section-number">4.9.10. </span>cudaHostRegister<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#cudahostregister" title=3D"Permalink=
 to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell252"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaHostRegister</span><span cla=
ss=3D"p">(</span><span class=3D"n">hostptr</span><span class=3D"p">,</span>=
<span class=3D"w"> </span><span class=3D"nb">count</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"n">flags</span><span class=
=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">flags</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"kt">C_PTR</span><span class=3D"p">)</span><span cla=
ss=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><spa=
n class=3D"n">hostptr</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell252">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaHos=
tRegister</span></code> page-locks the memory associated with the host poin=
ter and of size provided by the <code class=3D"docutils literal notranslate=
"><span class=3D"pre">count</span></code> argument, according to the <code =
class=3D"docutils literal notranslate"><span class=3D"pre">flags</span></co=
de> argument.</p>
</section>
<section id=3D"cudahostunregister">
<h3><span class=3D"section-number">4.9.11. </span>cudaHostUnregister<a clas=
s=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compi=
lers/cuda-fortran-prog-guide/index.html#cudahostunregister" title=3D"Permal=
ink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell253"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaHostRegister</span><span cla=
ss=3D"p">(</span><span class=3D"n">hostptr</span><span class=3D"p">)</span>=
<span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"kt">C_PTR</span><span class=3D"p">)</span><span cla=
ss=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><spa=
n class=3D"n">hostptr</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell253">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaHos=
tUnregister</span></code> unmaps the memory associated with the host pointe=
r and makes it page-able again. The argument hostptr must be the same as wa=
s used with <code class=3D"docutils literal notranslate"><span class=3D"pre=
">cudaHostRegister</span></code>.</p>
</section>
<section id=3D"cudamalloc">
<h3><span class=3D"section-number">4.9.12. </span>cudaMalloc<a class=3D"hea=
derlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cud=
a-fortran-prog-guide/index.html#cudamalloc" title=3D"Permalink to this head=
line">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell254"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMalloc</span><span class=3D"=
p">(</span><span class=3D"n">devptr</span><span class=3D"p">,</span><span c=
lass=3D"w"> </span><span class=3D"nb">count</span><span class=3D"p">)</span=
><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell254">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMal=
loc</span></code> allocates data on the device. <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">devptr</span></code> may be any alloc=
atable, one-dimensional device array of a supported type specified in <a cl=
ass=3D"reference internal" href=3D"https://docs.nvidia.com/hpc-sdk/archive/=
25.3/compilers/cuda-fortran-prog-guide/index.html#cfref-dev-code-datatypes-=
dev-code-intrinsic-tbl"><span class=3D"std std-ref">Device Code Intrinsic D=
atatypes</span></a>. The <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">count</span></code> is in terms of elements. Or, <code class=
=3D"docutils literal notranslate"><span class=3D"pre">devptr</span></code> =
may be of TYPE(C_DEVPTR), in which case the <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">count</span></code> is in bytes.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMal=
loc</span></code> is available in device code starting in CUDA 5.0.</p>
</section>
<section id=3D"cudamallocarray">
<h3><span class=3D"section-number">4.9.13. </span>cudaMallocArray<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#cudamallocarray" title=3D"Permalink =
to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell255"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMallocArray</span><span clas=
s=3D"p">(</span><span class=3D"n">carray</span><span class=3D"p">,</span><s=
pan class=3D"w"> </span><span class=3D"n">cdesc</span><span class=3D"p">,</=
span><span class=3D"w"> </span><span class=3D"n">width</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"n">height</span><span =
class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudaArrayPtr</span><span class=3D"p">)</span><sp=
an class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </spa=
n><span class=3D"n">carray</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudaChannelFormatDesc</span><span class=3D"p">)<=
/span><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"=
w"> </span><span class=3D"n">cdesc</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">width</span><span class=3D"p">,</span><span class=3D"w"> </span=
><span class=3D"n">height</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell255">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMal=
locArray</span></code> allocates a data array on the device.</p>
</section>
<section id=3D"cudamallocasync">
<h3><span class=3D"section-number">4.9.14. </span>cudaMallocAsync<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#cudamallocasync" title=3D"Permalink =
to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell256"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMallocAsync</span><span clas=
s=3D"p">(</span><span class=3D"n">devptr</span><span class=3D"p">,</span><s=
pan class=3D"w"> </span><span class=3D"nb">count</span><span class=3D"p">,<=
/span><span class=3D"w"> </span><span class=3D"n">stream</span><span class=
=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell256">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMal=
locAsync</span></code> allocates data on the device, asynchronously, on the=
 specified stream. <code class=3D"docutils literal notranslate"><span class=
=3D"pre">devptr</span></code> may be any allocatable, one-dimensional devic=
e array of a supported type specified in <a class=3D"reference internal" hr=
ef=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-p=
rog-guide/index.html#cfref-dev-code-datatypes-dev-code-intrinsic-tbl"><span=
 class=3D"std std-ref">Device Code Intrinsic Datatypes</span></a>. The <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">count</span></=
code> is in terms of elements. Or, <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">devptr</span></code> may be of TYPE(C_DEVPTR), in =
which case the <code class=3D"docutils literal notranslate"><span class=3D"=
pre">count</span></code> is in bytes. The <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">stream</span></code> argument is an integer=
 of kind=3Dcuda_stream_kind.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaFre=
eAsync</span></code> is available starting in CUDA 11.2.</p>
</section>
<section id=3D"cudamallocmanaged">
<h3><span class=3D"section-number">4.9.15. </span>cudaMallocManaged<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#cudamallocmanaged" title=3D"Permalin=
k to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell257"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMallocManaged</span><span cl=
ass=3D"p">(</span><span class=3D"n">devptr</span><span class=3D"p">,</span>=
<span class=3D"w"> </span><span class=3D"nb">count</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"n">flags</span><span class=
=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell257">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMal=
locManaged</span></code> allocates data that will be managed by the unified=
 memory system. <code class=3D"docutils literal notranslate"><span class=3D=
"pre">devptr</span></code> may be any allocatable, one-dimensional managed =
array of a supported type specified in <a class=3D"reference internal" href=
=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-pro=
g-guide/index.html#cfref-dev-code-datatypes-dev-code-intrinsic-tbl"><span c=
lass=3D"std std-ref">Device Code Intrinsic Datatypes</span></a>. The <code =
class=3D"docutils literal notranslate"><span class=3D"pre">count</span></co=
de> is in terms of elements. Or, <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">devptr</span></code> may be of TYPE(C_DEVPTR), in wh=
ich case the <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">count</span></code> is in bytes. The flags argument must be either <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">cudaMemAttachGl=
obal</span></code> or <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">cudaMemAttachHost</span></code>.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMal=
locManaged</span></code> is available starting in CUDA 6.0.</p>
</section>
<section id=3D"cudamallocpitch">
<h3><span class=3D"section-number">4.9.16. </span>cudaMallocPitch<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#cudamallocpitch" title=3D"Permalink =
to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell258"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMallocPitch</span><span clas=
s=3D"p">(</span><span class=3D"n">devptr</span><span class=3D"p">,</span><s=
pan class=3D"w"> </span><span class=3D"n">pitch</span><span class=3D"p">,</=
span><span class=3D"w"> </span><span class=3D"n">width</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"n">height</span><span =
class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell258">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMal=
locPitch</span></code> allocates data on the device. <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">devptr</span></code> may be any =
allocatable, two-dimensional device array of a supported type specified in =
<a class=3D"reference internal" href=3D"https://docs.nvidia.com/hpc-sdk/arc=
hive/25.3/compilers/cuda-fortran-prog-guide/index.html#cfref-dev-code-datat=
ypes-dev-code-intrinsic-tbl"><span class=3D"std std-ref">Device Code Intrin=
sic Datatypes</span></a>. The <code class=3D"docutils literal notranslate">=
<span class=3D"pre">width</span></code> is in terms of number of elements. =
The <code class=3D"docutils literal notranslate"><span class=3D"pre">height=
</span></code> is an integer.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMal=
locPitch</span></code> may pad the data, and the padded width is returned i=
n the variable <code class=3D"docutils literal notranslate"><span class=3D"=
pre">pitch</span></code>. <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">Pitch</span></code> is an integer of kind=3Dcuda_count_kind=
. <code class=3D"docutils literal notranslate"><span class=3D"pre">devptr</=
span></code> may also be of TYPE(C_DEVPTR), in which case the integer value=
s are expressed in bytes.</p>
</section>
<section id=3D"cudamalloc3d">
<h3><span class=3D"section-number">4.9.17. </span>cudaMalloc3D<a class=3D"h=
eaderlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/c=
uda-fortran-prog-guide/index.html#cudamalloc3d" title=3D"Permalink to this =
headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell259"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMalloc3D</span><span class=
=3D"p">(</span><span class=3D"n">pitchptr</span><span class=3D"p">,</span><=
span class=3D"w"> </span><span class=3D"n">cext</span><span class=3D"p">)</=
span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudaPitchedPtr</span><span class=3D"p">),</span>=
<span class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">=
(</span><span class=3D"n">out</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">pitchptr</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudaExtent</span><span class=3D"p">),</span><spa=
n class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</s=
pan><span class=3D"n">in</span><span class=3D"p">)</span><span class=3D"w">=
 </span><span class=3D"kd">::</span><span class=3D"w"> </span><span class=
=3D"n">cext</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell259">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMal=
loc3D</span></code> allocates data on the device. <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">pitchptr</span></code> is a derived=
 type defined in the <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">cudafor</span></code> module. <code class=3D"docutils literal no=
translate"><span class=3D"pre">cext</span></code> is also a derived type wh=
ich holds the extents of the allocated array. Alternatively, <code class=3D=
"docutils literal notranslate"><span class=3D"pre">pitchptr</span></code> m=
ay be any allocatable, three-dimensional device array of a supported type s=
pecified in <a class=3D"reference internal" href=3D"https://docs.nvidia.com=
/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#cfref-de=
v-code-datatypes"><span class=3D"std std-ref">Datatypes Allowed</span></a>.=
</p>
</section>
<section id=3D"cudamalloc3darray">
<h3><span class=3D"section-number">4.9.18. </span>cudaMalloc3DArray<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#cudamalloc3darray" title=3D"Permalin=
k to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell260"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMalloc3DArray</span><span cl=
ass=3D"p">(</span><span class=3D"n">carray</span><span class=3D"p">,</span>=
<span class=3D"w"> </span><span class=3D"n">cdesc</span><span class=3D"p">,=
</span><span class=3D"w"> </span><span class=3D"n">cext</span><span class=
=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudaArrayPtr</span><span class=3D"p">)</span><sp=
an class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </spa=
n><span class=3D"n">carray</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudaChannelFormatDesc</span><span class=3D"p">)<=
/span><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"=
w"> </span><span class=3D"n">cdesc</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudaExtent</span><span class=3D"p">)</span><span=
 class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span>=
<span class=3D"n">cext</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell260">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMal=
loc3DArray</span></code> allocates array data on the device.</p>
<span class=3D"target" id=3D"mm-cudamemadvise"></span></section>
<section id=3D"cudamemadvise">
<h3><span class=3D"section-number">4.9.19. </span>cudaMemAdvise<a class=3D"=
headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/=
cuda-fortran-prog-guide/index.html#cudamemadvise" title=3D"Permalink to thi=
s headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell261"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMemAdvise</span><span class=
=3D"p">(</span><span class=3D"n">devptr</span><span class=3D"p">,</span><sp=
an class=3D"w"> </span><span class=3D"nb">count</span><span class=3D"p">,</=
span><span class=3D"w"> </span><span class=3D"n">advice</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">device</span><sp=
an class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell261">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
Advise</span></code> lends advice to the Unified Memory subsystem about the=
 expected usage pattern for the specified memory range. <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">devptr</span></code> may be a=
ny managed memory scalar or array, of a supported type specified in <a clas=
s=3D"reference internal" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25=
.3/compilers/cuda-fortran-prog-guide/index.html#cfref-dev-code-datatypes-de=
v-code-intrinsic-tbl"><span class=3D"std std-ref">Device Code Intrinsic Dat=
atypes</span></a>. The <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">count</span></code> is in terms of elements. Alternatively, <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">devptr</span=
></code> may be of TYPE(C_DEVPTR), in which case the <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">count</span></code> is in terms =
of bytes.</p>
<p>Current possible values for advice, defined in the cudafor module, are <=
code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMemAdvi=
seSetReadMostly</span></code>, <code class=3D"docutils literal notranslate"=
><span class=3D"pre">cudaMemAdviseUnsetReadMostly</span></code>, <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">cudaMemAdviseSetPref=
erredLocation</span></code>, <code class=3D"docutils literal notranslate"><=
span class=3D"pre">cudaMemAdviseUnsetPreferredLocation</span></code>, <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">cudaMemAdviseSe=
tAccessedBy</span></code>, and <code class=3D"docutils literal notranslate"=
><span class=3D"pre">cudaMemAdviseUnsetAccessedBy</span></code></p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">dev=
ice</span></code> argument specifies the destination device. Passing in <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">cudaCpuDevice=
Id</span></code> for the device, which is defined as a parameter in the cud=
afor module, will set advice for the CPU.</p>
</section>
<section id=3D"cudamemcpy">
<h3><span class=3D"section-number">4.9.20. </span>cudaMemcpy<a class=3D"hea=
derlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cud=
a-fortran-prog-guide/index.html#cudamemcpy" title=3D"Permalink to this head=
line">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell262"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMemcpy</span><span class=3D"=
p">(</span><span class=3D"n">dst</span><span class=3D"p">,</span><span clas=
s=3D"w"> </span><span class=3D"n">src</span><span class=3D"p">,</span><span=
 class=3D"w"> </span><span class=3D"nb">count</span><span class=3D"p">,</sp=
an><span class=3D"w"> </span><span class=3D"n">kdir</span><span class=3D"p"=
>)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell262">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
cpy</span></code> copies data from one location to another. <code class=3D"=
docutils literal notranslate"><span class=3D"pre">dst</span></code> and <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">src</span></c=
ode> may be any device or host, scalar or array, of a supported type specif=
ied in <a class=3D"reference internal" href=3D"https://docs.nvidia.com/hpc-=
sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#cfref-dev-cod=
e-datatypes-dev-code-intrinsic-tbl"><span class=3D"std std-ref">Device Code=
 Intrinsic Datatypes</span></a>. The <code class=3D"docutils literal notran=
slate"><span class=3D"pre">count</span></code> is in terms of elements. <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">kdir</span></=
code> may be optional; for more information, refer to <a class=3D"reference=
 internal" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/c=
uda-fortran-prog-guide/index.html#cfref-data-trans-runtm-routines"><span cl=
ass=3D"std std-ref">Data Transfer Using Runtime Routines</span></a>. If <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">kdir</span></=
code> is specified, it must be one of the defined enums <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">cudaMemcpyHostToDevice</span>=
</code>, <code class=3D"docutils literal notranslate"><span class=3D"pre">c=
udaMemcpyDeviceToHost</span></code>, or <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">cudaMemcpyDeviceToDevice</span></code>. Alter=
natively, <code class=3D"docutils literal notranslate"><span class=3D"pre">=
dst</span></code> and <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">src</span></code> may be of TYPE(C_DEVPTR) or TYPE(C_PTR), in w=
hich case the <code class=3D"docutils literal notranslate"><span class=3D"p=
re">count</span></code> is in term of bytes.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
cpy</span></code> is available in device code starting in CUDA 5.0.</p>
</section>
<section id=3D"cudamemcpyarraytoarray">
<h3><span class=3D"section-number">4.9.21. </span>cudaMemcpyArrayToArray<a =
class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/c=
ompilers/cuda-fortran-prog-guide/index.html#cudamemcpyarraytoarray" title=
=3D"Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell263"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMemcpyArrayToArray</span><sp=
an class=3D"p">(</span><span class=3D"n">dsta</span><span class=3D"p">,</sp=
an><span class=3D"w"> </span><span class=3D"n">dstx</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"n">dsty</span><span class=
=3D"p">,</span><span class=3D"w"></span>
<span class=3D"w">                        </span><span class=3D"n">srca</sp=
an><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">sr=
cx</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D=
"n">srcy</span><span class=3D"p">,</span><span class=3D"w"> </span><span cl=
ass=3D"nb">count</span><span class=3D"p">,</span><span class=3D"w"> </span>=
<span class=3D"n">kdir</span><span class=3D"p">)</span><span class=3D"w"></=
span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudaArrayPtr</span><span class=3D"p">)</span><sp=
an class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </spa=
n><span class=3D"n">dsta</span><span class=3D"p">,</span><span class=3D"w">=
 </span><span class=3D"n">srca</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">dstx</span><span class=3D"p">,</span><span class=3D"w"> </span>=
<span class=3D"n">dsty</span><span class=3D"p">,</span><span class=3D"w"> <=
/span><span class=3D"n">srcx</span><span class=3D"p">,</span><span class=3D=
"w"> </span><span class=3D"n">srcy</span><span class=3D"p">,</span><span cl=
ass=3D"w"> </span><span class=3D"nb">count</span><span class=3D"p">,</span>=
<span class=3D"w"> </span><span class=3D"n">kdir</span><span class=3D"w"></=
span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell263">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
cpyArrayToArray</span></code> copies array data to and from the device.</p>
</section>
<section id=3D"cudamemcpyasync">
<h3><span class=3D"section-number">4.9.22. </span>cudaMemcpyAsync<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#cudamemcpyasync" title=3D"Permalink =
to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell264"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMemcpyAsync</span><span clas=
s=3D"p">(</span><span class=3D"n">dst</span><span class=3D"p">,</span><span=
 class=3D"w"> </span><span class=3D"n">src</span><span class=3D"p">,</span>=
<span class=3D"w"> </span><span class=3D"nb">count</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"n">kdir</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">stream</span><sp=
an class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell264">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
cpyAsync</span></code> copies data from one location to another. <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">dst</span></code> an=
d <code class=3D"docutils literal notranslate"><span class=3D"pre">src</spa=
n></code> may be any device or host, scalar or array, of a supported type s=
pecified in <a class=3D"reference internal" href=3D"https://docs.nvidia.com=
/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#cfref-de=
v-code-datatypes-dev-code-intrinsic-tbl"><span class=3D"std std-ref">Device=
 Code Intrinsic Datatypes</span></a>. The <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">count</span></code> is in terms of elements=
. <code class=3D"docutils literal notranslate"><span class=3D"pre">kdir</sp=
an></code> may be optional; for more information, refer to <a class=3D"refe=
rence internal" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#cfref-data-trans-runtm-routines"><sp=
an class=3D"std std-ref">Data Transfer Using Runtime Routines</span></a>. I=
f <code class=3D"docutils literal notranslate"><span class=3D"pre">kdir</sp=
an></code> is specified, it must be one of the defined enums <code class=3D=
"docutils literal notranslate"><span class=3D"pre">cudaMemcpyHostToDevice</=
span></code>, <code class=3D"docutils literal notranslate"><span class=3D"p=
re">cudaMemcpyDeviceToHost</span></code>, or <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">cudaMemcpyDeviceToDevice</span></code>. =
Alternatively, <code class=3D"docutils literal notranslate"><span class=3D"=
pre">dst</span></code> and <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">src</span></code> may be of TYPE(C_DEVPTR) or TYPE(C_PTR),=
 in which case the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">count</span></code> is in term of bytes.</p>
<p>This function operates on page-locked host memory only. The copy can be =
associated with a stream by passing a non-zero stream argument; otherwise t=
he <code class=3D"docutils literal notranslate"><span class=3D"pre">stream<=
/span></code> argument is optional and defaults to zero.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
cpyAsync</span></code> is available in device code starting in CUDA 5.0.</p=
>
</section>
<section id=3D"cudamemcpyfromarray">
<h3><span class=3D"section-number">4.9.23. </span>cudaMemcpyFromArray<a cla=
ss=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/comp=
ilers/cuda-fortran-prog-guide/index.html#cudamemcpyfromarray" title=3D"Perm=
alink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell265"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMemcpyFromArray</span><span =
class=3D"p">(</span><span class=3D"n">dst</span><span class=3D"p">,</span><=
span class=3D"w"> </span><span class=3D"n">srca</span><span class=3D"p">,</=
span><span class=3D"w"> </span><span class=3D"n">srcx</span><span class=3D"=
p">,</span><span class=3D"w"> </span><span class=3D"n">srcy</span><span cla=
ss=3D"p">,</span><span class=3D"w"> </span><span class=3D"nb">count</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">kdir</=
span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudaArrayPtr</span><span class=3D"p">)</span><sp=
an class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </spa=
n><span class=3D"n">srca</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">dstx</span><span class=3D"p">,</span><span class=3D"w"> </span>=
<span class=3D"n">dsty</span><span class=3D"p">,</span><span class=3D"w"> <=
/span><span class=3D"nb">count</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">kdir</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell265">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
cpyFromArray</span></code> copies array data to and from the device.</p>
</section>
<section id=3D"cudamemcpyfromsymbol">
<h3><span class=3D"section-number">4.9.24. </span>cudaMemcpyFromSymbol<a cl=
ass=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/com=
pilers/cuda-fortran-prog-guide/index.html#cudamemcpyfromsymbol" title=3D"Pe=
rmalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell266"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMemcpyFromSymbol</span><span=
 class=3D"p">(</span><span class=3D"n">dst</span><span class=3D"p">,</span>=
<span class=3D"w"> </span><span class=3D"n">symbol</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"nb">count</span><span clas=
s=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">offset</span><s=
pan class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">kdir</s=
pan><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">s=
tream</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"kt">c_ptr</span><span class=3D"p">)</span><span cla=
ss=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><spa=
n class=3D"n">symbol</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"nb">count</span><span class=3D"p">,</span><span class=3D"w"> </spa=
n><span class=3D"n">offset</span><span class=3D"p">,</span><span class=3D"w=
"> </span><span class=3D"n">kdir</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">optional</span><=
span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </s=
pan><span class=3D"n">stream</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell266">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
cpyFromSymbol</span></code> copies data from a device area in global or con=
stant memory space referenced by a <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">symbol</span></code> to a destination on the host.=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">dst</span=
></code> may be any host scalar or array of a supported type specified in <=
a class=3D"reference internal" href=3D"https://docs.nvidia.com/hpc-sdk/arch=
ive/25.3/compilers/cuda-fortran-prog-guide/index.html#cfref-dev-code-dataty=
pes"><span class=3D"std std-ref">Datatypes Allowed</span></a>. The <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">count</span></code=
> is in terms of elements.</p>
</section>
<section id=3D"cudamemcpyfromsymbolasync">
<h3><span class=3D"section-number">4.9.25. </span>cudaMemcpyFromSymbolAsync=
<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.=
3/compilers/cuda-fortran-prog-guide/index.html#cudamemcpyfromsymbolasync" t=
itle=3D"Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell267"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMemcpyFromSymbolAsync</span>=
<span class=3D"p">(</span><span class=3D"n">dst</span><span class=3D"p">,</=
span><span class=3D"w"> </span><span class=3D"n">symbol</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"nb">count</span><sp=
an class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">offset</=
span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">=
kdir</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">stream</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"kt">c_ptr</span><span class=3D"p">)</span><span cla=
ss=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><spa=
n class=3D"n">symbol</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"nb">count</span><span class=3D"p">,</span><span class=3D"w"> </spa=
n><span class=3D"n">offset</span><span class=3D"p">,</span><span class=3D"w=
"> </span><span class=3D"n">kdir</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">optional</span><=
span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </s=
pan><span class=3D"n">stream</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell267">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
cpyFromSymbolASYNC</span></code> copies data from a device area in global o=
r constant memory space referenced by a <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">symbol</span></code> to a destination on the =
host. <code class=3D"docutils literal notranslate"><span class=3D"pre">dst<=
/span></code> may be any host scalar or array of a supported type specified=
 in <a class=3D"reference internal" href=3D"https://docs.nvidia.com/hpc-sdk=
/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#cfref-dev-code-d=
atatypes"><span class=3D"std std-ref">Datatypes Allowed</span></a>. The <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">count</span><=
/code> is in terms of elements.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
cpyFromSymbolASYNC</span></code> is asynchronous with respect to the host, =
This function operates on page-locked host memory only. The copy can be ass=
ociated with a stream by passing a non-zero stream argument.</p>
</section>
<section id=3D"cudamemcpypeer">
<h3><span class=3D"section-number">4.9.26. </span>cudaMemcpyPeer<a class=3D=
"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers=
/cuda-fortran-prog-guide/index.html#cudamemcpypeer" title=3D"Permalink to t=
his headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell268"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMemcpyPeer</span><span class=
=3D"p">(</span><span class=3D"n">dst</span><span class=3D"p">,</span><span =
class=3D"w"> </span><span class=3D"n">dstdev</span><span class=3D"p">,</spa=
n><span class=3D"w"> </span><span class=3D"n">src</span><span class=3D"p">,=
</span><span class=3D"w"> </span><span class=3D"n">srcdev</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"nb">count</span><sp=
an class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell268">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
cpyPeer</span></code> copies data from one device to another. <code class=
=3D"docutils literal notranslate"><span class=3D"pre">dst</span></code> and=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">src</span=
></code> may be any device scalar or array, of a supported type specified i=
n <a class=3D"reference internal" href=3D"https://docs.nvidia.com/hpc-sdk/a=
rchive/25.3/compilers/cuda-fortran-prog-guide/index.html#cfref-dev-code-dat=
atypes-dev-code-intrinsic-tbl"><span class=3D"std std-ref">Device Code Intr=
insic Datatypes</span></a>. The <code class=3D"docutils literal notranslate=
"><span class=3D"pre">count</span></code> is in terms of elements. Alternat=
ively, <code class=3D"docutils literal notranslate"><span class=3D"pre">dst=
</span></code> and <code class=3D"docutils literal notranslate"><span class=
=3D"pre">src</span></code> may be of TYPE(C_DEVPTR), in which case the <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">count</span></=
code> is in term of bytes.</p>
</section>
<section id=3D"cudamemcpypeerasync">
<h3><span class=3D"section-number">4.9.27. </span>cudaMemcpyPeerAsync<a cla=
ss=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/comp=
ilers/cuda-fortran-prog-guide/index.html#cudamemcpypeerasync" title=3D"Perm=
alink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell269"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMemcpyPeerAsync</span><span =
class=3D"p">(</span><span class=3D"n">dst</span><span class=3D"p">,</span><=
span class=3D"w"> </span><span class=3D"n">dstdev</span><span class=3D"p">,=
</span><span class=3D"w"> </span><span class=3D"n">src</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"n">srcdev</span><span =
class=3D"p">,</span><span class=3D"w"> </span><span class=3D"nb">count</spa=
n><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">str=
eam</span><span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell269">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
cpyPeerAsync</span></code> copies data from one device to another. <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">dst</span></code> =
and <code class=3D"docutils literal notranslate"><span class=3D"pre">src</s=
pan></code> may be any device scalar or array, of a supported type specifie=
d in <a class=3D"reference internal" href=3D"https://docs.nvidia.com/hpc-sd=
k/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#cfref-dev-code-=
datatypes-dev-code-intrinsic-tbl"><span class=3D"std std-ref">Device Code I=
ntrinsic Datatypes</span></a>. The <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">count</span></code> is in terms of elements. Alter=
natively, dst and src may be of TYPE(C_DEVPTR), in which case the <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">count</span></code>=
 is in term of bytes. The copy can be associated with a stream by passing a=
 non-zero stream argument.</p>
</section>
<section id=3D"cudamemcpytoarray">
<h3><span class=3D"section-number">4.9.28. </span>cudaMemcpyToArray<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#cudamemcpytoarray" title=3D"Permalin=
k to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell270"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMemcpyToArray</span><span cl=
ass=3D"p">(</span><span class=3D"n">dsta</span><span class=3D"p">,</span><s=
pan class=3D"w"> </span><span class=3D"n">dstx</span><span class=3D"p">,</s=
pan><span class=3D"w"> </span><span class=3D"n">dsty</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"n">src</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"nb">count</span><sp=
an class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">kdir</sp=
an><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudaArrayPtr</span><span class=3D"p">)</span><sp=
an class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </spa=
n><span class=3D"n">dsta</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">dstx</span><span class=3D"p">,</span><span class=3D"w"> </span>=
<span class=3D"n">dsty</span><span class=3D"p">,</span><span class=3D"w"> <=
/span><span class=3D"nb">count</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">kdir</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell270">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
cpyToArray</span></code> copies array data to and from the device.</p>
</section>
<section id=3D"cudamemcpytosymbol">
<h3><span class=3D"section-number">4.9.29. </span>cudaMemcpyToSymbol<a clas=
s=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compi=
lers/cuda-fortran-prog-guide/index.html#cudamemcpytosymbol" title=3D"Permal=
ink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell271"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMemcpyToSymbol</span><span c=
lass=3D"p">(</span><span class=3D"n">symbol</span><span class=3D"p">,</span=
><span class=3D"w"> </span><span class=3D"n">src</span><span class=3D"p">,<=
/span><span class=3D"w"> </span><span class=3D"nb">count</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">offset</span><sp=
an class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">kdir</sp=
an><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"k">type</span><span class=3D"p">=
(</span><span class=3D"kt">c_ptr</span><span class=3D"p">)</span><span clas=
s=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span=
 class=3D"n">symbol</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"kt">integer</span><span class=3D=
"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span cla=
ss=3D"nb">count</span><span class=3D"p">,</span><span class=3D"w"> </span><=
span class=3D"n">offset</span><span class=3D"p">,</span><span class=3D"w"> =
</span><span class=3D"n">kdir</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell271">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
cpyToSymbol</span></code> copies data from the source to a device area in g=
lobal or constant memory space referenced by a <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">symbol</span></code>. <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">src</span></code> may be a=
ny host scalar or array of a supported type as specified in <a class=3D"ref=
erence internal" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compi=
lers/cuda-fortran-prog-guide/index.html#cfref-dev-code-datatypes-dev-code-i=
ntrinsic-tbl"><span class=3D"std std-ref">Device Code Intrinsic Datatypes</=
span></a>. The <code class=3D"docutils literal notranslate"><span class=3D"=
pre">count</span></code> is in terms of elements.</p>
</section>
<section id=3D"cudamemcpytosymbolasync">
<h3><span class=3D"section-number">4.9.30. </span>cudaMemcpyToSymbolAsync<a=
 class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/=
compilers/cuda-fortran-prog-guide/index.html#cudamemcpytosymbolasync" title=
=3D"Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell272"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMemcpyToSymbolAsync</span><s=
pan class=3D"p">(</span><span class=3D"n">symbol</span><span class=3D"p">,<=
/span><span class=3D"w"> </span><span class=3D"n">src</span><span class=3D"=
p">,</span><span class=3D"w"> </span><span class=3D"nb">count</span><span c=
lass=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">offset</span=
><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">kdir=
</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n=
">stream</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"kt">c_ptr</span><span class=3D"p">)</span><span cla=
ss=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><spa=
n class=3D"n">symbol</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"nb">count</span><span class=3D"p">,</span><span class=3D"w"> </spa=
n><span class=3D"n">offset</span><span class=3D"p">,</span><span class=3D"w=
"> </span><span class=3D"n">kdir</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">optional</span><=
span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </s=
pan><span class=3D"n">stream</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell272">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
cpyToSymbolAsync</span></code> copies data from the source to a device area=
 in global or constant memory space referenced by a <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">symbol</span></code>. <code class=
=3D"docutils literal notranslate"><span class=3D"pre">src</span></code> may=
 be any host scalar or array of a supported type specified in <a class=3D"r=
eference internal" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/com=
pilers/cuda-fortran-prog-guide/index.html#cfref-dev-code-datatypes"><span c=
lass=3D"std std-ref">Datatypes Allowed</span></a>. The <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">count</span></code> is in term=
s of elements.</p>
<p>This function operates on page-locked host memory only. The copy can be =
associated with a stream by passing a non-zero stream argument.</p>
</section>
<section id=3D"cudamemcpy2d">
<h3><span class=3D"section-number">4.9.31. </span>cudaMemcpy2D<a class=3D"h=
eaderlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/c=
uda-fortran-prog-guide/index.html#cudamemcpy2d" title=3D"Permalink to this =
headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell273"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMemcpy2D</span><span class=
=3D"p">(</span><span class=3D"n">dst</span><span class=3D"p">,</span><span =
class=3D"w"> </span><span class=3D"n">dpitch</span><span class=3D"p">,</spa=
n><span class=3D"w"> </span><span class=3D"n">src</span><span class=3D"p">,=
</span><span class=3D"w"> </span><span class=3D"n">spitch</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">width</span><spa=
n class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">height</s=
pan><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">k=
dir</span><span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell273">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
cpy2D</span></code> copies data from one location to another. <code class=
=3D"docutils literal notranslate"><span class=3D"pre">dst</span></code> and=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">src</span=
></code> may be any device or host array, of a supported type specified in =
<a class=3D"reference internal" href=3D"https://docs.nvidia.com/hpc-sdk/arc=
hive/25.3/compilers/cuda-fortran-prog-guide/index.html#cfref-dev-code-datat=
ypes-dev-code-intrinsic-tbl"><span class=3D"std std-ref">Device Code Intrin=
sic Datatypes</span></a>. The <code class=3D"docutils literal notranslate">=
<span class=3D"pre">width</span></code> and <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">height</span></code> are in terms of elem=
ents. Contrary to how Fortran programmers might view memory layout, and in =
order to keep compatibility with CUDA C, the width specifies the number of =
contiguous elements in the leading dimension, and the height is the number =
of such contiguous sections. <code class=3D"docutils literal notranslate"><=
span class=3D"pre">kdir</span></code> may be optional; for more information=
, refer to <a class=3D"reference internal" href=3D"https://docs.nvidia.com/=
hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#cfref-dat=
a-trans-runtm-routines"><span class=3D"std std-ref">Data Transfer Using Run=
time Routines</span></a>. If <code class=3D"docutils literal notranslate"><=
span class=3D"pre">kdir</span></code> is specified, it must be one of the d=
efined enums <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">cudaMemcpyHostToDevice</span></code>, <code class=3D"docutils literal no=
translate"><span class=3D"pre">cudaMemcpyDeviceToHost</span></code>, or <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">cudaMemcpyDev=
iceToDevice</span></code>. Alternatively, <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">dst</span></code> and <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">src</span></code> may be of TYP=
E(C_DEVPTR) or TYPE(C_PTR), in which case the <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">width</span></code> and <code class=3D"=
docutils literal notranslate"><span class=3D"pre">height</span></code> are =
in term of bytes.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
cpy2D</span></code> is available in device code starting in CUDA 5.0.</p>
</section>
<section id=3D"cudamemcpy2darraytoarray">
<h3><span class=3D"section-number">4.9.32. </span>cudaMemcpy2DArrayToArray<=
a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3=
/compilers/cuda-fortran-prog-guide/index.html#cudamemcpy2darraytoarray" tit=
le=3D"Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell274"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMemcpy2DArrayToArray</span><=
span class=3D"p">(</span><span class=3D"n">dsta</span><span class=3D"p">,</=
span><span class=3D"w"> </span><span class=3D"n">dstx</span><span class=3D"=
p">,</span><span class=3D"w"> </span><span class=3D"n">dsty</span><span cla=
ss=3D"p">,</span><span class=3D"w"></span>
<span class=3D"w">                     </span><span class=3D"n">srca</span>=
<span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">srcx<=
/span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n"=
>srcy</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">width</span><span class=3D"p">,</span><span class=3D"w"> </span><spa=
n class=3D"n">height</span><span class=3D"p">,</span><span class=3D"w"> </s=
pan><span class=3D"n">kdir</span><span class=3D"p">)</span><span class=3D"w=
"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudaArrayPtr</span><span class=3D"p">)</span><sp=
an class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </spa=
n><span class=3D"n">dsta</span><span class=3D"p">,</span><span class=3D"w">=
 </span><span class=3D"n">srca</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">dstx</span><span class=3D"p">,</span><span class=3D"w"> </span>=
<span class=3D"n">dsty</span><span class=3D"p">,</span><span class=3D"w"> <=
/span><span class=3D"n">srcx</span><span class=3D"p">,</span><span class=3D=
"w"> </span><span class=3D"n">srcy</span><span class=3D"p">,</span><span cl=
ass=3D"w"> </span><span class=3D"n">width</span><span class=3D"p">,</span><=
span class=3D"w"> </span><span class=3D"n">height</span><span class=3D"p">,=
</span><span class=3D"w"> </span><span class=3D"n">kdir</span><span class=
=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell274">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
cpy2DArrayToArray</span></code> copies array data to and from the device.</=
p>
</section>
<section id=3D"cudamemcpy2dasync">
<h3><span class=3D"section-number">4.9.33. </span>cudaMemcpy2DAsync<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#cudamemcpy2dasync" title=3D"Permalin=
k to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell275"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMemcpy2DAsync</span><span cl=
ass=3D"p">(</span><span class=3D"n">dst</span><span class=3D"p">,</span><sp=
an class=3D"w"> </span><span class=3D"n">dpitch</span><span class=3D"p">,</=
span><span class=3D"w"> </span><span class=3D"n">src</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"n">spitch</span><span cl=
ass=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">width</span><=
span class=3D"p">,</span><span class=3D"w"></span>
<span class=3D"w">              </span><span class=3D"n">height</span><span=
 class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">kdir</span=
><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">stre=
am</span><span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell275">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
cpy2D</span></code> copies data from one location to another. <code class=
=3D"docutils literal notranslate"><span class=3D"pre">dst</span></code> and=
 <code class=3D"docutils literal notranslate"><span class=3D"pre">src</span=
></code> may be any device or host array, of a supported type specified in =
<a class=3D"reference internal" href=3D"https://docs.nvidia.com/hpc-sdk/arc=
hive/25.3/compilers/cuda-fortran-prog-guide/index.html#cfref-dev-code-datat=
ypes-dev-code-intrinsic-tbl"><span class=3D"std std-ref">Device Code Intrin=
sic Datatypes</span></a>. The <code class=3D"docutils literal notranslate">=
<span class=3D"pre">width</span></code> and <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">height</span></code> are in terms of elem=
ents. Contrary to how Fortran programmers might view memory layout, and in =
order to keep compatibility with CUDA C, the width specifies the number of =
contiguous elements in the leading dimension, and the height is the number =
of such contiguous sections. <code class=3D"docutils literal notranslate"><=
span class=3D"pre">kdir</span></code> may be optional; for more information=
, refer to <a class=3D"reference internal" href=3D"https://docs.nvidia.com/=
hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#cfref-dat=
a-trans-runtm-routines"><span class=3D"std std-ref">Data Transfer Using Run=
time Routines</span></a>. If <code class=3D"docutils literal notranslate"><=
span class=3D"pre">kdir</span></code> is specified, it must be one of the d=
efined enums <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">cudaMemcpyHostToDevice</span></code>, <code class=3D"docutils literal no=
translate"><span class=3D"pre">cudaMemcpyDeviceToHost</span></code>, or <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">cudaMemcpyDev=
iceToDevice</span></code>. Alternatively, <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">dst</span></code> and <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">src</span></code> may be of TYP=
E(C_DEVPTR) or TYPE(C_PTR), in which case the <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">width</span></code> and <code class=3D"=
docutils literal notranslate"><span class=3D"pre">height</span></code> are =
in term of bytes.</p>
<p>This function operates on page-locked host memory only. The copy can be =
associated with a stream by passing a non-zero <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">stream</span></code> argument, otherwi=
se the <code class=3D"docutils literal notranslate"><span class=3D"pre">str=
eam</span></code> argument is optional and defaults to zero.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
cpy2DAsync</span></code> is available in device code starting in CUDA 5.0.<=
/p>
</section>
<section id=3D"cudamemcpy2dfromarray">
<h3><span class=3D"section-number">4.9.34. </span>cudaMemcpy2DFromArray<a c=
lass=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/co=
mpilers/cuda-fortran-prog-guide/index.html#cudamemcpy2dfromarray" title=3D"=
Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell276"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMemcpy2DFromArray</span><spa=
n class=3D"p">(</span><span class=3D"n">dst</span><span class=3D"p">,</span=
><span class=3D"w"> </span><span class=3D"n">dpitch</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"n">srca</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">srcx</span><span=
 class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">srcy</span=
><span class=3D"p">,</span><span class=3D"w"></span>
<span class=3D"w">                               </span><span class=3D"n">w=
idth</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">height</span><span class=3D"p">,</span><span class=3D"w"> </span><sp=
an class=3D"n">kdir</span><span class=3D"p">)</span><span class=3D"w"></spa=
n>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudaArrayPtr</span><span class=3D"p">)</span><sp=
an class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </spa=
n><span class=3D"n">srca</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">dpitch</span><span class=3D"p">,</span><span class=3D"w"> </spa=
n><span class=3D"n">srcx</span><span class=3D"p">,</span><span class=3D"w">=
 </span><span class=3D"n">srcy</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">width</span><span class=3D"p">,</span><spa=
n class=3D"w"> </span><span class=3D"n">height</span><span class=3D"p">,</s=
pan><span class=3D"w"> </span><span class=3D"n">kdir</span><span class=3D"w=
"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell276">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
cpy2DFromArray</span></code> copies array data to and from the device.</p>
</section>
<section id=3D"cudamemcpy2dtoarray">
<h3><span class=3D"section-number">4.9.35. </span>cudaMemcpy2DToArray<a cla=
ss=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/comp=
ilers/cuda-fortran-prog-guide/index.html#cudamemcpy2dtoarray" title=3D"Perm=
alink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell277"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMemcpy2DToArray</span><span =
class=3D"p">(</span><span class=3D"n">dsta</span><span class=3D"p">,</span>=
<span class=3D"w"> </span><span class=3D"n">dstx</span><span class=3D"p">,<=
/span><span class=3D"w"> </span><span class=3D"n">dsty</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"n">src</span><span cla=
ss=3D"p">,</span><span class=3D"w"></span>
<span class=3D"w">                     </span><span class=3D"n">spitch</spa=
n><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">wid=
th</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D=
"n">height</span><span class=3D"p">,</span><span class=3D"w"> </span><span =
class=3D"n">kdir</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudaArrayPtr</span><span class=3D"p">)</span><sp=
an class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </spa=
n><span class=3D"n">dsta</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">dstx</span><span class=3D"p">,</span><span class=3D"w"> </span>=
<span class=3D"n">dsty</span><span class=3D"p">,</span><span class=3D"w"> <=
/span><span class=3D"n">spitch</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">width</span><span class=3D"p">,</span><spa=
n class=3D"w"> </span><span class=3D"n">height</span><span class=3D"p">,</s=
pan><span class=3D"w"> </span><span class=3D"n">kdir</span><span class=3D"w=
"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell277">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
cpy2DToArray</span></code> copies array data to and from the device.</p>
</section>
<section id=3D"cudamemcpy3d">
<h3><span class=3D"section-number">4.9.36. </span>cudaMemcpy3D<a class=3D"h=
eaderlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/c=
uda-fortran-prog-guide/index.html#cudamemcpy3d" title=3D"Permalink to this =
headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell278"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMemcpy3D</span><span class=
=3D"p">(</span><span class=3D"n">p</span><span class=3D"p">)</span><span cl=
ass=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudaMemcpy3DParms</span><span class=3D"p">)</spa=
n><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> =
</span><span class=3D"n">p</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell278">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
cpy3D</span></code> copies elements from one 3D array to another as specifi=
ed by the data held in the derived type <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">p</span></code>.</p>
</section>
<section id=3D"cudamemcpy3dasync">
<h3><span class=3D"section-number">4.9.37. </span>cudaMemcpy3DAsync<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#cudamemcpy3dasync" title=3D"Permalin=
k to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell279"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMemcpy3D</span><span class=
=3D"p">(</span><span class=3D"n">p</span><span class=3D"p">,</span><span cl=
ass=3D"w"> </span><span class=3D"n">stream</span><span class=3D"p">)</span>=
<span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudaMemcpy3DParms</span><span class=3D"p">)</spa=
n><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> =
</span><span class=3D"n">p</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">stream</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell279">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
cpy3DAsync</span></code> copies elements from one 3D array to another as sp=
ecified by the data held in the derived type <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">p</span></code>.</p>
<p>This function operates on page-locked host memory only. The copy can be =
associated with a stream by passing a non-zero <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">stream</span></code> argument.</p>
</section>
<section id=3D"cudamemgetinfo">
<h3><span class=3D"section-number">4.9.38. </span>cudaMemGetInfo<a class=3D=
"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers=
/cuda-fortran-prog-guide/index.html#cudamemgetinfo" title=3D"Permalink to t=
his headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell280"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMemGetInfo</span><span class=
=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">free</span><span=
 class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">total</spa=
n><span class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"></s=
pan>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><s=
pan class=3D"n">cuda_count_kind</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">free</span><span class=3D"p">,</span><span class=3D"w"> </span>=
<span class=3D"n">total</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell280">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
GetInfo</span></code> returns the amount of free and total memory available=
 for allocation on the device. The returned values units are in bytes.</p>
<span class=3D"target" id=3D"mm-cudamemprefetchasync"></span></section>
<section id=3D"cudamemprefetchasync">
<h3><span class=3D"section-number">4.9.39. </span>cudaMemPrefetchAsync<a cl=
ass=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/com=
pilers/cuda-fortran-prog-guide/index.html#cudamemprefetchasync" title=3D"Pe=
rmalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell281"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMemPrefetchAsync</span><span=
 class=3D"p">(</span><span class=3D"n">devptr</span><span class=3D"p">,</sp=
an><span class=3D"w"> </span><span class=3D"nb">count</span><span class=3D"=
p">,</span><span class=3D"w"> </span><span class=3D"n">device</span><span c=
lass=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">stream</span=
><span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell281">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
PrefetchAsync</span></code> prefetches memory to the specified destination =
device. <code class=3D"docutils literal notranslate"><span class=3D"pre">de=
vptr</span></code> may be any managed memory scalar or array, of a supporte=
d type specified in <a class=3D"reference internal" href=3D"https://docs.nv=
idia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#=
cfref-dev-code-datatypes-dev-code-intrinsic-tbl"><span class=3D"std std-ref=
">Device Code Intrinsic Datatypes</span></a>. The <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">count</span></code> is in terms of =
elements. Alternatively, <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">devptr</span></code> may be of TYPE(C_DEVPTR), in which case=
 the <code class=3D"docutils literal notranslate"><span class=3D"pre">count=
</span></code> is in terms of bytes.</p>
<p>The <code class=3D"docutils literal notranslate"><span class=3D"pre">dev=
ice</span></code> argument specifies the destination device. The <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">stream</span></code>=
 argument specifies which stream to enqueue the prefetch operation on.</p>
<p>Passing in <code class=3D"docutils literal notranslate"><span class=3D"p=
re">cudaCpuDeviceId</span></code> for the device, which is defined as a par=
ameter in the cudafor module, will prefetch the data to CPU memory.</p>
</section>
<section id=3D"cudamemset">
<h3><span class=3D"section-number">4.9.40. </span>cudaMemset<a class=3D"hea=
derlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cud=
a-fortran-prog-guide/index.html#cudamemset" title=3D"Permalink to this head=
line">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell282"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMemset</span><span class=3D"=
p">(</span><span class=3D"n">devptr</span><span class=3D"p">,</span><span c=
lass=3D"w"> </span><span class=3D"k">value</span><span class=3D"p">,</span>=
<span class=3D"w"> </span><span class=3D"nb">count</span><span class=3D"p">=
)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell282">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
set</span></code> sets a location or array to the specified value. <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">devptr</span></cod=
e> may be any device scalar or array of a supported type specified in <a cl=
ass=3D"reference internal" href=3D"https://docs.nvidia.com/hpc-sdk/archive/=
25.3/compilers/cuda-fortran-prog-guide/index.html#cfref-dev-code-datatypes-=
dev-code-intrinsic-tbl"><span class=3D"std std-ref">Device Code Intrinsic D=
atatypes</span></a>. The <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">value</span></code> must match in type and kind. The <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">count</span></cod=
e> is in terms of elements. Or, <code class=3D"docutils literal notranslate=
"><span class=3D"pre">devptr</span></code> may be of TYPE(C_DEVPTR), in whi=
ch case the <code class=3D"docutils literal notranslate"><span class=3D"pre=
">count</span></code> is in term of bytes, and the lowest byte of <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">value</span></code>=
 is used.</p>
</section>
<section id=3D"cudamemsetasync">
<h3><span class=3D"section-number">4.9.41. </span>cudaMemsetAsync<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#cudamemsetasync" title=3D"Permalink =
to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell283"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMemsetAsync</span><span clas=
s=3D"p">(</span><span class=3D"n">devptr</span><span class=3D"p">,</span><s=
pan class=3D"w"> </span><span class=3D"k">value</span><span class=3D"p">,</=
span><span class=3D"w"> </span><span class=3D"nb">count</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">stream</span><sp=
an class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell283">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
setAsync</span></code> sets a location or array to the specified value. <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">devptr</span>=
</code> may be any device scalar or array of a supported type specified in =
<a class=3D"reference internal" href=3D"https://docs.nvidia.com/hpc-sdk/arc=
hive/25.3/compilers/cuda-fortran-prog-guide/index.html#cfref-dev-code-datat=
ypes-dev-code-intrinsic-tbl"><span class=3D"std std-ref">Device Code Intrin=
sic Datatypes</span></a>. The <code class=3D"docutils literal notranslate">=
<span class=3D"pre">value</span></code> must match in type and kind. The <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">count</span>=
</code> is in terms of elements. Or, <code class=3D"docutils literal notran=
slate"><span class=3D"pre">devptr</span></code> may be of TYPE(C_DEVPTR), i=
n which case the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">count</span></code> is in term of bytes, and the lowest byte of <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">value</span>=
</code> is used. The memory set operation is associated with the stream spe=
cified.</p>
</section>
<section id=3D"cudamemset2d">
<h3><span class=3D"section-number">4.9.42. </span>cudaMemset2D<a class=3D"h=
eaderlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/c=
uda-fortran-prog-guide/index.html#cudamemset2d" title=3D"Permalink to this =
headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell284"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMemset2D</span><span class=
=3D"p">(</span><span class=3D"n">devptr</span><span class=3D"p">,</span><sp=
an class=3D"w"> </span><span class=3D"n">pitch</span><span class=3D"p">,</s=
pan><span class=3D"w"> </span><span class=3D"k">value</span><span class=3D"=
p">,</span><span class=3D"w"> </span><span class=3D"n">width</span><span cl=
ass=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">height</span>=
<span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell284">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
set2D</span></code> sets an array to the specified value. <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">devptr</span></code> may be=
 any device array of a supported type specified in <a class=3D"reference in=
ternal" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda=
-fortran-prog-guide/index.html#cfref-dev-code-datatypes-dev-code-intrinsic-=
tbl"><span class=3D"std std-ref">Device Code Intrinsic Datatypes</span></a>=
. The <code class=3D"docutils literal notranslate"><span class=3D"pre">valu=
e</span></code> must match in type and kind. The <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">pitch</span></code>, <code class=3D"=
docutils literal notranslate"><span class=3D"pre">width</span></code>, and =
<code class=3D"docutils literal notranslate"><span class=3D"pre">height</sp=
an></code> are in terms of elements. Or, <code class=3D"docutils literal no=
translate"><span class=3D"pre">devptr</span></code> may be of TYPE(C_DEVPTR=
), in which case the <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">pitch</span></code>, <code class=3D"docutils literal notranslate=
"><span class=3D"pre">width</span></code>, and <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">height</span></code> are in terms of b=
ytes, and the lowest byte of <code class=3D"docutils literal notranslate"><=
span class=3D"pre">value</span></code> is used. Contrary to how Fortran pro=
grammers might view memory layout, and in order to keep compatibility with =
CUDA C, the width specifies the number of contiguous elements in the leadin=
g dimension, and the height is the number of such contiguous sections.</p>
</section>
<section id=3D"cudamemset3d">
<h3><span class=3D"section-number">4.9.43. </span>cudaMemset3D<a class=3D"h=
eaderlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/c=
uda-fortran-prog-guide/index.html#cudamemset3d" title=3D"Permalink to this =
headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell285"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaMemset3D</span><span class=
=3D"p">(</span><span class=3D"n">pitchptr</span><span class=3D"p">,</span><=
span class=3D"w"> </span><span class=3D"k">value</span><span class=3D"p">,<=
/span><span class=3D"w"> </span><span class=3D"n">cext</span><span class=3D=
"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudaPitchedPtr</span><span class=3D"p">)</span><=
span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </s=
pan><span class=3D"n">pitchptr</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"k">value</span>
<span class=3D"k">    type</span><span class=3D"p">(</span><span class=3D"n=
">cudaExtent</span><span class=3D"p">)</span><span class=3D"w"> </span><spa=
n class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">cext</s=
pan><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell285">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaMem=
set3D</span></code> sets elements of an array, the extents in each dimensio=
n specified by <code class=3D"docutils literal notranslate"><span class=3D"=
pre">cext</span></code>, which was allocated with <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">cudaMalloc3D</span></code> to a spe=
cified value.</p>
</section>
</section>
<section id=3D"unified-addressing-and-peer-device-memory-access">
<h2><span class=3D"section-number">4.10. </span>Unified Addressing and Peer=
 Device Memory Access<a class=3D"headerlink" href=3D"https://docs.nvidia.co=
m/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#unified=
-addressing-and-peer-device-memory-access" title=3D"Permalink to this headl=
ine">=EF=83=81</a></h2>
<p>Use the functions in this section for managing multiple devices from the=
 same process and threads.</p>
<p>For a complete explanation of the purpose and function of each routine l=
isted here, refer to the Unified Addressing and Peer Device Memory Access s=
ections at <a class=3D"reference external" href=3D"https://docs.nvidia.com/=
cuda/cuda-runtime-api">https://docs.nvidia.com/cuda/cuda-runtime-api</a>.</=
p>
<section id=3D"cudadevicecanaccesspeer">
<h3><span class=3D"section-number">4.10.1. </span>cudaDeviceCanAccessPeer<a=
 class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/=
compilers/cuda-fortran-prog-guide/index.html#cudadevicecanaccesspeer" title=
=3D"Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell286"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaDeviceCanAccessPeer</span><s=
pan class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">canAcce=
ssPeer</span><span class=3D"p">,</span><span class=3D"w"> </span><span clas=
s=3D"n">device</span><span class=3D"p">,</span><span class=3D"w"> </span><s=
pan class=3D"n">peerDevice</span><span class=3D"w"> </span><span class=3D"p=
">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">canAccessPeer</span><span class=3D"p">,</span><span class=3D"w"=
> </span><span class=3D"n">device</span><span class=3D"p">,</span><span cla=
ss=3D"w"> </span><span class=3D"n">peerDevice</span><span class=3D"w"></spa=
n>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell286">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaDev=
iceCanAccessPeer</span></code> returns in <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">canAccessPeer</span></code> the value 1 if =
the <code class=3D"docutils literal notranslate"><span class=3D"pre">device=
</span></code> argument can access memory in the device specified by the <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">peerDevice</=
span></code> argument.</p>
</section>
<section id=3D"cudadevicedisablepeeraccess">
<h3><span class=3D"section-number">4.10.2. </span>cudaDeviceDisablePeerAcce=
ss<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/2=
5.3/compilers/cuda-fortran-prog-guide/index.html#cudadevicedisablepeeracces=
s" title=3D"Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell287"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaDeviceDisablePeerAccess</spa=
n><span class=3D"w"> </span><span class=3D"p">(</span><span class=3D"w"> </=
span><span class=3D"n">peerDevice</span><span class=3D"w"> </span><span cla=
ss=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">peerDevice</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell287">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaDev=
iceDisablePeerAccess</span></code> disables the ability to access memory on=
 the device specified by the <code class=3D"docutils literal notranslate"><=
span class=3D"pre">peerDevice</span></code> argument by the current device.=
</p>
</section>
<section id=3D"cudadeviceenablepeeraccess">
<h3><span class=3D"section-number">4.10.3. </span>cudaDeviceEnablePeerAcces=
s<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25=
.3/compilers/cuda-fortran-prog-guide/index.html#cudadeviceenablepeeraccess"=
 title=3D"Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell288"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaDeviceEnablePeerAccess</span=
><span class=3D"w"> </span><span class=3D"p">(</span><span class=3D"w"> </s=
pan><span class=3D"n">peerDevice</span><span class=3D"p">,</span><span clas=
s=3D"w"> </span><span class=3D"n">flags</span><span class=3D"w"> </span><sp=
an class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">peerDevice</span><span class=3D"p">,</span><span class=3D"w"> <=
/span><span class=3D"n">flags</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell288">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaDev=
iceEnablePeerAccess</span></code> enables the ability to access memory on t=
he device specified by the <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">peerDevice</span></code> argument by the current device. C=
urrently, flags must be zero.</p>
</section>
<section id=3D"cudapointergetattributes">
<h3><span class=3D"section-number">4.10.4. </span>cudaPointerGetAttributes<=
a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3=
/compilers/cuda-fortran-prog-guide/index.html#cudapointergetattributes" tit=
le=3D"Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell289"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaPointerGetAttributes</span><=
span class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">attr</=
span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">=
ptr</span><span class=3D"w"> </span><span class=3D"p">)</span><span class=
=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudaPointerAttributes</span><span class=3D"p">),=
</span><span class=3D"w"> </span><span class=3D"k">intent</span><span class=
=3D"p">(</span><span class=3D"n">out</span><span class=3D"p">)</span><span =
class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><=
span class=3D"n">attr</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell289">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaPoi=
nterGetAttributes</span></code> returns the attributes of a device or host =
pointer in the attributes type. <code class=3D"docutils literal notranslate=
"><span class=3D"pre">ptr</span></code> may be any host or device scalar or=
 array of a supported type specified in <a class=3D"reference internal" hre=
f=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-pr=
og-guide/index.html#cfref-dev-code-datatypes"><span class=3D"std std-ref">D=
atatypes Allowed</span></a>. It may also be of type C_PTR or C_DEVPTR. It m=
ay have the host, device, managed, or pinned attribute.</p>
</section>
</section>
<section id=3D"version-management">
<h2><span class=3D"section-number">4.11. </span>Version Management<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#version-management" title=3D"Permali=
nk to this headline">=EF=83=81</a></h2>
<p>Use the functions in this section for version management.</p>
<p>For a complete explanation of the purpose and function of each routine l=
isted here, refer to the Version Management section at <a class=3D"referenc=
e external" href=3D"https://docs.nvidia.com/cuda/cuda-runtime-api">https://=
docs.nvidia.com/cuda/cuda-runtime-api</a>.</p>
<section id=3D"cudadrivergetversion">
<h3><span class=3D"section-number">4.11.1. </span>cudaDriverGetVersion<a cl=
ass=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/com=
pilers/cuda-fortran-prog-guide/index.html#cudadrivergetversion" title=3D"Pe=
rmalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell290"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaDriverGetVersion</span><span=
 class=3D"p">(</span><span class=3D"n">iversion</span><span class=3D"p">)</=
span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">iversion</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell290">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaDri=
verGetVersion</span></code> returns the version number of the installed CUD=
A driver as <code class=3D"docutils literal notranslate"><span class=3D"pre=
">iversion</span></code>. If no driver is installed, then it returns 0 as <=
code class=3D"docutils literal notranslate"><span class=3D"pre">iversion</s=
pan></code>.</p>
<p>This function automatically returns <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">cudaErrorInvalidValue</span></code> if the <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">iversion</spa=
n></code> argument is NULL.</p>
</section>
<section id=3D"cudaruntimegetversion">
<h3><span class=3D"section-number">4.11.2. </span>cudaRuntimeGetVersion<a c=
lass=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/co=
mpilers/cuda-fortran-prog-guide/index.html#cudaruntimegetversion" title=3D"=
Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell291"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaRuntimeGetVersion</span><spa=
n class=3D"p">(</span><span class=3D"n">iversion</span><span class=3D"p">)<=
/span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">iversion</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell291">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaRun=
timeGetVersion</span></code> returns the version number of the installed CU=
DA Runtime as <code class=3D"docutils literal notranslate"><span class=3D"p=
re">iversion</span></code>.</p>
<p>This function automatically returns <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">cudaErrorInvalidValue</span></code> if the <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">iversion</spa=
n></code> argument is NULL.</p>
</section>
</section>
<section id=3D"profiling-management">
<h2><span class=3D"section-number">4.12. </span>Profiling Management<a clas=
s=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compi=
lers/cuda-fortran-prog-guide/index.html#profiling-management" title=3D"Perm=
alink to this headline">=EF=83=81</a></h2>
<p>Use the functions in this section for profiling management.</p>
<p>For a complete explanation of the purpose and function of each routine l=
isted here, refer to the Profiler Control section at <a class=3D"reference =
external" href=3D"https://docs.nvidia.com/cuda/cuda-runtime-api">https://do=
cs.nvidia.com/cuda/cuda-runtime-api</a>.</p>
<section id=3D"cudaprofilerstart">
<h3><span class=3D"section-number">4.12.1. </span>cudaProfilerStart<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#cudaprofilerstart" title=3D"Permalin=
k to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell292"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaProfilerStart</span><span cl=
ass=3D"p">()</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell292">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaPro=
filerStart</span></code> enables profile collection by the active profilng =
tool.</p>
</section>
<section id=3D"cudaprofilerstop">
<h3><span class=3D"section-number">4.12.2. </span>cudaProfilerStop<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#cudaprofilerstop" title=3D"Permalink=
 to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell293"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaProfilerStop</span><span cla=
ss=3D"p">()</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell293">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaPro=
filerStop</span></code> disables profile collection by the active profilng =
tool.</p>
</section>
</section>
<section id=3D"cuda-graph-management">
<h2><span class=3D"section-number">4.13. </span>CUDA Graph Management<a cla=
ss=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/comp=
ilers/cuda-fortran-prog-guide/index.html#cuda-graph-management" title=3D"Pe=
rmalink to this headline">=EF=83=81</a></h2>
<p>Use the functions in this section for CUDA Graph management, the capturi=
ng and replaying of CUDA Graphs from CUDA Fortran.</p>
<p>For a complete explanation of the purpose and function of each routine l=
isted here, refer to the CUDA Graph section here <a class=3D"reference exte=
rnal" href=3D"https://docs.nvidia.com/cuda/cuda-c-programming-guide">https:=
//docs.nvidia.com/cuda/cuda-c-programming-guide</a>.</p>
<p>CUDA Fortran provides three types for managing cuda graphs:</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell294"><span></span><span class=3D"k">TYPE </span><span class=
=3D"n">cudaGraph</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">TYPE</span><span class=3D"p">(=
</span><span class=3D"kt">C_PTR</span><span class=3D"p">)</span><span class=
=3D"w">  </span><span class=3D"kd">::</span><span class=3D"w"> </span><span=
 class=3D"n">graph</span><span class=3D"w"></span>
<span class=3D"k">END TYPE </span><span class=3D"n">cudaGraph</span><span c=
lass=3D"w"></span>

<span class=3D"k">TYPE </span><span class=3D"n">cudaGraphExec</span><span c=
lass=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">TYPE</span><span class=3D"p">(=
</span><span class=3D"kt">C_PTR</span><span class=3D"p">)</span><span class=
=3D"w">  </span><span class=3D"kd">::</span><span class=3D"w"> </span><span=
 class=3D"n">exec</span><span class=3D"w"></span>
<span class=3D"k">END TYPE </span><span class=3D"n">cudaGraphExec</span><sp=
an class=3D"w"></span>

<span class=3D"k">TYPE </span><span class=3D"n">cudaGraphNode</span><span c=
lass=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">TYPE</span><span class=3D"p">(=
</span><span class=3D"kt">C_PTR</span><span class=3D"p">)</span><span class=
=3D"w">  </span><span class=3D"kd">::</span><span class=3D"w"> </span><span=
 class=3D"n">node</span><span class=3D"w"></span>
<span class=3D"k">END TYPE </span><span class=3D"n">cudaGraphNode</span><sp=
an class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell294">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<section id=3D"cudagraphcreate">
<h3><span class=3D"section-number">4.13.1. </span>cudaGraphCreate<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#cudagraphcreate" title=3D"Permalink =
to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell295"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaGraphCreate</span><span clas=
s=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">graph</span><sp=
an class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">flags</s=
pan><span class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"><=
/span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudagraph</span><span class=3D"p">),</span><span=
 class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</sp=
an><span class=3D"n">out</span><span class=3D"p">)</span><span class=3D"w">=
 </span><span class=3D"kd">::</span><span class=3D"w"> </span><span class=
=3D"n">graph</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">flags</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell295">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaGra=
phCreate</span></code> creates an empty <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">graph</span></code>.</p>
</section>
<section id=3D"cudagraphdestroy">
<h3><span class=3D"section-number">4.13.2. </span>cudaGraphDestroy<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#cudagraphdestroy" title=3D"Permalink=
 to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell296"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaGraphDestroy</span><span cla=
ss=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">graph</span><s=
pan class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudagraph</span><span class=3D"p">)</span><span =
class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><=
span class=3D"n">graph</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell296">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaGra=
phDestroy</span></code> releases any resources associated with the given <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">graph</span>=
</code>.</p>
</section>
<section id=3D"cudagraphexecdestroy">
<h3><span class=3D"section-number">4.13.3. </span>cudaGraphExecDestroy<a cl=
ass=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/com=
pilers/cuda-fortran-prog-guide/index.html#cudagraphexecdestroy" title=3D"Pe=
rmalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell297"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaGraphExecDestroy</span><span=
 class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">graphExec<=
/span><span class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"=
></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudagraphexec</span><span class=3D"p">)</span><s=
pan class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </sp=
an><span class=3D"n">graphExec</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell297">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaGra=
phExecDestroy</span></code> releases any resources associated with the give=
n <code class=3D"docutils literal notranslate"><span class=3D"pre">graphExe=
c</span></code>.</p>
</section>
<section id=3D"cudagraphinstantiate">
<h3><span class=3D"section-number">4.13.4. </span>cudaGraphInstantiate<a cl=
ass=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/com=
pilers/cuda-fortran-prog-guide/index.html#cudagraphinstantiate" title=3D"Pe=
rmalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell298"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaGraphInstantiate</span><span=
 class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">graphExec<=
/span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n"=
>graph</span><span class=3D"p">,</span><span class=3D"w"> </span><span clas=
s=3D"n">flags</span><span class=3D"w"> </span><span class=3D"p">)</span><sp=
an class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudagraphexec</span><span class=3D"p">),</span><=
span class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(=
</span><span class=3D"n">out</span><span class=3D"p">)</span><span class=3D=
"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span cla=
ss=3D"n">graphExec</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudagraph</span><span class=3D"p">),</span><span=
 class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</sp=
an><span class=3D"n">in</span><span class=3D"p">)</span><span class=3D"w"> =
</span><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D=
"n">graph</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> <=
/span><span class=3D"n">flags</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell298">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaGra=
phInstantiate</span></code> instantiates the <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">graphExec</span></code> object from the =
specified <code class=3D"docutils literal notranslate"><span class=3D"pre">=
graph</span></code>.</p>
</section>
<section id=3D"cudagraphlaunch">
<h3><span class=3D"section-number">4.13.5. </span>cudaGraphLaunch<a class=
=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compil=
ers/cuda-fortran-prog-guide/index.html#cudagraphlaunch" title=3D"Permalink =
to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell299"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaGraphLaunch</span><span clas=
s=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">graphExec</span=
><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">stre=
am</span><span class=3D"w"> </span><span class=3D"p">)</span><span class=3D=
"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudagraphexec</span><span class=3D"p">)</span><s=
pan class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </sp=
an><span class=3D"n">graphExec</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><s=
pan class=3D"n">cuda_stream_kind</span><span class=3D"p">),</span><span cla=
ss=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</span><=
span class=3D"n">in</span><span class=3D"p">)</span><span class=3D"w"> </sp=
an><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">=
stream</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell299">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaGra=
phLaunch</span></code> begins an asynchronous graph launch or replay on the=
 specified <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>stream</span></code>.</p>
</section>
<section id=3D"cudastreambegincapture">
<h3><span class=3D"section-number">4.13.6. </span>cudaStreamBeginCapture<a =
class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/c=
ompilers/cuda-fortran-prog-guide/index.html#cudastreambegincapture" title=
=3D"Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell300"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaStreamBeginCapture</span><sp=
an class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">stream</=
span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">=
mode</span><span class=3D"w"> </span><span class=3D"p">)</span><span class=
=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><s=
pan class=3D"n">cuda_stream_kind</span><span class=3D"p">),</span><span cla=
ss=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</span><=
span class=3D"n">in</span><span class=3D"p">)</span><span class=3D"w"> </sp=
an><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">=
stream</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">in</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> <=
/span><span class=3D"n">mode</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell300">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaStr=
eamBeginCapture</span></code> begins a graph capture on the specified <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">stream</span></=
code>.</p>
</section>
<section id=3D"cudastreamendcapture">
<h3><span class=3D"section-number">4.13.7. </span>cudaStreamEndCapture<a cl=
ass=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/com=
pilers/cuda-fortran-prog-guide/index.html#cudastreamendcapture" title=3D"Pe=
rmalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell301"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaStreamEndCapture</span><span=
 class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">stream</sp=
an><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">gr=
aph</span><span class=3D"w"> </span><span class=3D"p">)</span><span class=
=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><s=
pan class=3D"n">cuda_stream_kind</span><span class=3D"p">),</span><span cla=
ss=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</span><=
span class=3D"n">in</span><span class=3D"p">)</span><span class=3D"w"> </sp=
an><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">=
stream</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">type</span><span class=3D"p"=
>(</span><span class=3D"n">cudagraph</span><span class=3D"p">),</span><span=
 class=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</sp=
an><span class=3D"n">out</span><span class=3D"p">)</span><span class=3D"w">=
 </span><span class=3D"kd">::</span><span class=3D"w"> </span><span class=
=3D"n">graph</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell301">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaStr=
eamEndCapture</span></code> ends a graph capture on the specified <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">stream</span></code=
> and provides a <code class=3D"docutils literal notranslate"><span class=
=3D"pre">cudagraph</span></code> for further use.</p>
</section>
<section id=3D"cudastreamiscapturing">
<h3><span class=3D"section-number">4.13.8. </span>cudaStreamIsCapturing<a c=
lass=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/co=
mpilers/cuda-fortran-prog-guide/index.html#cudastreamiscapturing" title=3D"=
Permalink to this headline">=EF=83=81</a></h3>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell302"><span></span><span class=3D"kt">integer </span><span cla=
ss=3D"k">function </span><span class=3D"n">cudaStreamIsCapturing</span><spa=
n class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">stream</s=
pan><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">s=
tatus</span><span class=3D"w"> </span><span class=3D"p">)</span><span class=
=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><s=
pan class=3D"n">cuda_stream_kind</span><span class=3D"p">),</span><span cla=
ss=3D"w"> </span><span class=3D"k">intent</span><span class=3D"p">(</span><=
span class=3D"n">in</span><span class=3D"p">)</span><span class=3D"w"> </sp=
an><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">=
stream</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">intent</span><sp=
an class=3D"p">(</span><span class=3D"n">out</span><span class=3D"p">)</spa=
n><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> =
</span><span class=3D"n">status</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell302">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">cudaStr=
eamIsCapturing</span></code> queries the capture <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">status</span></code> in the specifie=
d <code class=3D"docutils literal notranslate"><span class=3D"pre">stream</=
span></code>.</p>
<span class=3D"target" id=3D"cf-examples"></span></section>
</section>
</section>
<section id=3D"examples">
<h1><span class=3D"section-number">5. </span>Examples<a class=3D"headerlink=
" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortr=
an-prog-guide/index.html#examples" title=3D"Permalink to this headline">=EF=
=83=81</a></h1>
<p>This section contains examples with source code.</p>
<section id=3D"matrix-multiplication-example">
<h2><span class=3D"section-number">5.1. </span>Matrix Multiplication Exampl=
e<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25=
.3/compilers/cuda-fortran-prog-guide/index.html#matrix-multiplication-examp=
le" title=3D"Permalink to this headline">=EF=83=81</a></h2>
<p>This example shows a program to compute the product C of two matrices A =
and B, as follows:</p>
<ul class=3D"simple">
<li><p>Each thread block computes one 16x16 submatrix of C;</p></li>
<li><p>Each thread within the block computes one element of the submatrix.<=
/p></li>
</ul>
<p>The submatrix size is chosen so the number of threads in a block is a mu=
ltiple of the warp size (32) and is less than the maximum number of threads=
 per thread block (512).</p>
<p>Each element of the result is the product of one row of A by one column =
of B. The program computes the products by accumulating submatrix products;=
 it reads a block submatrix of A and a block submatrix of B, accumulates th=
e submatrix product, then moves to the next submatrix of A rowwise and of B=
 columnwise. The program caches the submatrices of A and B in the fast shar=
ed memory.</p>
<p>For simplicity, the program assumes the matrix sizes are a multiple of 1=
6, and has not been highly optimized for execution time.</p>
<section id=3D"source-code-listing">
<h3><span class=3D"section-number">5.1.1. </span>Source Code Listing<a clas=
s=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compi=
lers/cuda-fortran-prog-guide/index.html#source-code-listing" title=3D"Perma=
link to this headline">=EF=83=81</a></h3>
<p><strong>Matrix Multiplication</strong></p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell303"><span></span><span class=3D"c">! start the module contai=
ning the matmul kernel</span>
<span class=3D"k">module </span><span class=3D"n">mmul_mod</span><span clas=
s=3D"w"></span>
<span class=3D"w"> </span><span class=3D"k">use </span><span class=3D"n">cu=
dafor</span><span class=3D"w"></span>
<span class=3D"k">contains</span><span class=3D"w"></span>
<span class=3D"w"> </span><span class=3D"c">! mmul_kernel computes A*B into=
 C where</span>
<span class=3D"w"> </span><span class=3D"c">! A is NxM, B is MxL, C is then=
 NxL</span>
<span class=3D"w"> </span><span class=3D"n">attributes</span><span class=3D=
"p">(</span><span class=3D"n">global</span><span class=3D"p">)</span><span =
class=3D"w"> </span><span class=3D"k">subroutine </span><span class=3D"n">m=
mul_kernel</span><span class=3D"p">(</span><span class=3D"w"> </span><span =
class=3D"n">A</span><span class=3D"p">,</span><span class=3D"w"> </span><sp=
an class=3D"n">B</span><span class=3D"p">,</span><span class=3D"w"> </span>=
<span class=3D"n">C</span><span class=3D"p">,</span><span class=3D"w"> </sp=
an><span class=3D"n">N</span><span class=3D"p">,</span><span class=3D"w"> <=
/span><span class=3D"n">M</span><span class=3D"p">,</span><span class=3D"w"=
> </span><span class=3D"n">L</span><span class=3D"w"> </span><span class=3D=
"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"w">=
 </span><span class=3D"kd">::</span><span class=3D"w"> </span><span class=
=3D"n">A</span><span class=3D"p">(</span><span class=3D"n">N</span><span cl=
ass=3D"p">,</span><span class=3D"n">M</span><span class=3D"p">),</span><spa=
n class=3D"w"> </span><span class=3D"n">B</span><span class=3D"p">(</span><=
span class=3D"n">M</span><span class=3D"p">,</span><span class=3D"n">L</spa=
n><span class=3D"p">),</span><span class=3D"w"> </span><span class=3D"n">C<=
/span><span class=3D"p">(</span><span class=3D"n">N</span><span class=3D"p"=
>,</span><span class=3D"n">L</span><span class=3D"p">)</span><span class=3D=
"w"></span>
<span class=3D"w">  </span><span class=3D"kt">integer</span><span class=3D"=
p">,</span><span class=3D"w"> </span><span class=3D"k">value</span><span cl=
ass=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><sp=
an class=3D"n">N</span><span class=3D"p">,</span><span class=3D"w"> </span>=
<span class=3D"n">M</span><span class=3D"p">,</span><span class=3D"w"> </sp=
an><span class=3D"n">L</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">integer</span><span class=3D"=
w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span clas=
s=3D"n">i</span><span class=3D"p">,</span><span class=3D"w"> </span><span c=
lass=3D"n">j</span><span class=3D"p">,</span><span class=3D"w"> </span><spa=
n class=3D"n">kb</span><span class=3D"p">,</span><span class=3D"w"> </span>=
<span class=3D"n">k</span><span class=3D"p">,</span><span class=3D"w"> </sp=
an><span class=3D"n">tx</span><span class=3D"p">,</span><span class=3D"w"> =
</span><span class=3D"n">ty</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"c">! submatrices stored in shared=
 memory</span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"n">shared</span><span clas=
s=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span=
 class=3D"n">Asub</span><span class=3D"p">(</span><span class=3D"mi">16</sp=
an><span class=3D"p">,</span><span class=3D"mi">16</span><span class=3D"p">=
),</span><span class=3D"w"> </span><span class=3D"n">Bsub</span><span class=
=3D"p">(</span><span class=3D"mi">16</span><span class=3D"p">,</span><span =
class=3D"mi">16</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"c">! the value of C(i,j) being co=
mputed</span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"w">=
 </span><span class=3D"kd">::</span><span class=3D"w"> </span><span class=
=3D"n">Cij</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"c">! Get the thread indices</span=
>
<span class=3D"w">  </span><span class=3D"n">tx</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n=
">threadidx</span><span class=3D"p">%</span><span class=3D"n">x</span><span=
 class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">ty</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n=
">threadidx</span><span class=3D"p">%</span><span class=3D"n">y</span><span=
 class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell303">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell304"><span></span><span class=3D"c">! This thread computes C(=
i,j) =3D sum(A(i,:) * B(:,j))</span>
<span class=3D"n">i</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"p">(</span><span class=3D"n">=
blockidx</span><span class=3D"p">%</span><span class=3D"n">x</span><span cl=
ass=3D"o">-</span><span class=3D"mi">1</span><span class=3D"p">)</span><spa=
n class=3D"w"> </span><span class=3D"o">*</span><span class=3D"w"> </span><=
span class=3D"mi">16</span><span class=3D"w"> </span><span class=3D"o">+</s=
pan><span class=3D"w"> </span><span class=3D"n">tx</span><span class=3D"w">=
</span>
<span class=3D"n">j</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"p">(</span><span class=3D"n">=
blockidx</span><span class=3D"p">%</span><span class=3D"n">y</span><span cl=
ass=3D"o">-</span><span class=3D"mi">1</span><span class=3D"p">)</span><spa=
n class=3D"w"> </span><span class=3D"o">*</span><span class=3D"w"> </span><=
span class=3D"mi">16</span><span class=3D"w"> </span><span class=3D"o">+</s=
pan><span class=3D"w"> </span><span class=3D"n">ty</span><span class=3D"w">=
</span>
<span class=3D"n">Cij</span><span class=3D"w"> </span><span class=3D"o">=3D=
</span><span class=3D"w"> </span><span class=3D"mf">0.0</span><span class=
=3D"w"></span>
<span class=3D"c">! Do the k loop in chunks of 16, the block size</span>
<span class=3D"k">do </span><span class=3D"n">kb</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
mi">1</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">M</span><span class=3D"p">,</span><span class=3D"w"> </span><span cl=
ass=3D"mi">16</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"c">! Fill the submatrices</span>
<span class=3D"w">  </span><span class=3D"c">! Each of the 16x16 threads in=
 the thread block</span>
<span class=3D"w">  </span><span class=3D"c">! loads one element of Asub an=
d Bsub</span>
<span class=3D"w">   </span><span class=3D"n">Asub</span><span class=3D"p">=
(</span><span class=3D"n">tx</span><span class=3D"p">,</span><span class=3D=
"n">ty</span><span class=3D"p">)</span><span class=3D"w"> </span><span clas=
s=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">A</span><span=
 class=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">,</span><s=
pan class=3D"n">kb</span><span class=3D"o">+</span><span class=3D"n">ty</sp=
an><span class=3D"o">-</span><span class=3D"mi">1</span><span class=3D"p">)=
</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">Bsub</span><span class=3D"p">(=
</span><span class=3D"n">tx</span><span class=3D"p">,</span><span class=3D"=
n">ty</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">B</span><span =
class=3D"p">(</span><span class=3D"n">kb</span><span class=3D"o">+</span><s=
pan class=3D"n">tx</span><span class=3D"o">-</span><span class=3D"mi">1</sp=
an><span class=3D"p">,</span><span class=3D"n">j</span><span class=3D"p">)<=
/span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"c">! Wait until all elements are =
filled</span>
<span class=3D"w">  </span><span class=3D"k">call </span><span class=3D"n">=
syncthreads</span><span class=3D"p">()</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"c">! Multiply the two submatrices=
</span>
<span class=3D"w">  </span><span class=3D"c">! Each of the 16x16 threads ac=
cumulates the</span>
<span class=3D"w">  </span><span class=3D"c">! dot product for its element =
of C(i,j)</span>
<span class=3D"w">  </span><span class=3D"k">do </span><span class=3D"n">k<=
/span><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"=
w"> </span><span class=3D"mi">1</span><span class=3D"p">,</span><span class=
=3D"mi">16</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">Cij</span><span class=3D"w">=
 </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">Cij</span><span class=3D"w"> </span><span class=3D"o">+</span><span =
class=3D"w"> </span><span class=3D"n">Asub</span><span class=3D"p">(</span>=
<span class=3D"n">tx</span><span class=3D"p">,</span><span class=3D"n">k</s=
pan><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"w"> </span><span class=3D"n">Bsub</span><span class=
=3D"p">(</span><span class=3D"n">k</span><span class=3D"p">,</span><span cl=
ass=3D"n">ty</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">enddo</span><span class=3D"w">=
</span>
<span class=3D"w">  </span><span class=3D"c">! Synchronize to make sure all=
 threads are done</span>
<span class=3D"w">  </span><span class=3D"c">! reading the submatrices befo=
re overwriting them</span>
<span class=3D"w">  </span><span class=3D"c">! in the next iteration of the=
 kb loop</span>
<span class=3D"w">  </span><span class=3D"k">call </span><span class=3D"n">=
syncthreads</span><span class=3D"p">()</span><span class=3D"w"></span>
<span class=3D"k">enddo</span><span class=3D"w"></span>
<span class=3D"c">! Each of the 16x16 threads stores its element</span>
<span class=3D"c">! to the global C array</span>
<span class=3D"n">C</span><span class=3D"p">(</span><span class=3D"n">i</sp=
an><span class=3D"p">,</span><span class=3D"n">j</span><span class=3D"p">)<=
/span><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"=
w"> </span><span class=3D"n">Cij</span><span class=3D"w"></span>
<span class=3D"k">end subroutine </span><span class=3D"n">mmul_kernel</span=
><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell304">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell305"><span></span><span class=3D"c">! The host routine to dri=
ve the matrix multiplication</span>
<span class=3D"w"> </span><span class=3D"k">subroutine </span><span class=
=3D"n">mmul</span><span class=3D"p">(</span><span class=3D"w"> </span><span=
 class=3D"n">A</span><span class=3D"p">,</span><span class=3D"w"> </span><s=
pan class=3D"n">B</span><span class=3D"p">,</span><span class=3D"w"> </span=
><span class=3D"n">C</span><span class=3D"w"> </span><span class=3D"p">)</s=
pan><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"k">dimension</span><span c=
lass=3D"p">(:,:)</span><span class=3D"w"> </span><span class=3D"kd">::</spa=
n><span class=3D"w"> </span><span class=3D"n">A</span><span class=3D"p">,</=
span><span class=3D"w"> </span><span class=3D"n">B</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"n">C</span><span class=3D"=
w"></span>
<span class=3D"w">  </span><span class=3D"c">! allocatable device arrays</s=
pan>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"n">device</span><span clas=
s=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">allocatable</sp=
an><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">di=
mension</span><span class=3D"p">(:,:)</span><span class=3D"w"> </span><span=
 class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">Adev</sp=
an><span class=3D"p">,</span><span class=3D"n">Bdev</span><span class=3D"p"=
>,</span><span class=3D"n">Cdev</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"c">! dim3 variables to define the=
 grid and block shapes</span>
<span class=3D"w">  </span><span class=3D"k">type</span><span class=3D"p">(=
</span><span class=3D"n">dim3</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">dimGrid</span><span class=3D"p">,</span><span class=3D"w"> </sp=
an><span class=3D"n">dimBlock</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell305">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell306"><span></span><span class=3D"c">! Get the array sizes</sp=
an>
<span class=3D"n">N</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">size</span><span class=3D"=
p">(</span><span class=3D"w"> </span><span class=3D"n">A</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"mi">1</span><span c=
lass=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">M</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">size</span><span class=3D"=
p">(</span><span class=3D"w"> </span><span class=3D"n">A</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"mi">2</span><span c=
lass=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">L</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">size</span><span class=3D"=
p">(</span><span class=3D"w"> </span><span class=3D"n">B</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"mi">2</span><span c=
lass=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"c">! Allocate the device arrays</span>
<span class=3D"k">allocate</span><span class=3D"p">(</span><span class=3D"w=
"> </span><span class=3D"n">Adev</span><span class=3D"p">(</span><span clas=
s=3D"n">N</span><span class=3D"p">,</span><span class=3D"n">M</span><span c=
lass=3D"p">),</span><span class=3D"w"> </span><span class=3D"n">Bdev</span>=
<span class=3D"p">(</span><span class=3D"n">M</span><span class=3D"p">,</sp=
an><span class=3D"n">L</span><span class=3D"p">),</span><span class=3D"w"> =
</span><span class=3D"n">Cdev</span><span class=3D"p">(</span><span class=
=3D"n">N</span><span class=3D"p">,</span><span class=3D"n">L</span><span cl=
ass=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">)</span><span=
 class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell306">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<hr class=3D"docutils">
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell307"><span></span><span class=3D"c">! Copy A and B to the dev=
ice</span>
<span class=3D"n">Adev</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">A</span><span class=
=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p">:</span><span c=
lass=3D"n">N</span><span class=3D"p">,</span><span class=3D"mi">1</span><sp=
an class=3D"p">:</span><span class=3D"n">M</span><span class=3D"p">)</span>=
<span class=3D"w"></span>
<span class=3D"n">Bdev</span><span class=3D"p">(:,:)</span><span class=3D"w=
"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">B</span><span class=3D"p">(</span><span class=3D"mi">1</span><span c=
lass=3D"p">:</span><span class=3D"n">M</span><span class=3D"p">,</span><spa=
n class=3D"mi">1</span><span class=3D"p">:</span><span class=3D"n">L</span>=
<span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell307">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell308"><span></span><span class=3D"c">! Create the grid and blo=
ck dimensions</span>
<span class=3D"n">dimGrid</span><span class=3D"w"> </span><span class=3D"o"=
>=3D</span><span class=3D"w"> </span><span class=3D"n">dim3</span><span cla=
ss=3D"p">(</span><span class=3D"w"> </span><span class=3D"n">N</span><span =
class=3D"o">/</span><span class=3D"mi">16</span><span class=3D"p">,</span><=
span class=3D"w"> </span><span class=3D"n">L</span><span class=3D"o">/</spa=
n><span class=3D"mi">16</span><span class=3D"p">,</span><span class=3D"w"> =
</span><span class=3D"mi">1</span><span class=3D"w"> </span><span class=3D"=
p">)</span><span class=3D"w"></span>
<span class=3D"n">dimBlock</span><span class=3D"w"> </span><span class=3D"o=
">=3D</span><span class=3D"w"> </span><span class=3D"n">dim3</span><span cl=
ass=3D"p">(</span><span class=3D"w"> </span><span class=3D"mi">16</span><sp=
an class=3D"p">,</span><span class=3D"w"> </span><span class=3D"mi">16</spa=
n><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"mi">1<=
/span><span class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"=
></span>
<span class=3D"k">call </span><span class=3D"n">mmul_kernel</span><span cla=
ss=3D"o">&lt;&lt;&lt;</span><span class=3D"n">dimGrid</span><span class=3D"=
p">,</span><span class=3D"n">dimBlock</span><span class=3D"o">&gt;&gt;&gt;<=
/span><span class=3D"p">(</span><span class=3D"w"> </span><span class=3D"n"=
>Adev</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">Bdev</span><span class=3D"p">,</span><span class=3D"w"> </span><span=
 class=3D"n">Cdev</span><span class=3D"p">,</span><span class=3D"w"> </span=
><span class=3D"n">N</span><span class=3D"p">,</span><span class=3D"w"> </s=
pan><span class=3D"n">M</span><span class=3D"p">,</span><span class=3D"w"> =
</span><span class=3D"n">L</span><span class=3D"p">)</span><span class=3D"w=
"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell308">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell309"><span></span><span class=3D"w"> </span><span class=3D"c"=
>! Copy the results back and free up memory</span>
<span class=3D"w"> </span><span class=3D"n">C</span><span class=3D"p">(</sp=
an><span class=3D"mi">1</span><span class=3D"p">:</span><span class=3D"n">N=
</span><span class=3D"p">,</span><span class=3D"mi">1</span><span class=3D"=
p">:</span><span class=3D"n">L</span><span class=3D"p">)</span><span class=
=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span =
class=3D"n">Cdev</span><span class=3D"w"></span>
<span class=3D"w"> </span><span class=3D"k">deallocate</span><span class=3D=
"p">(</span><span class=3D"w"> </span><span class=3D"n">Adev</span><span cl=
ass=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">Bdev</span><s=
pan class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">Cdev</s=
pan><span class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"><=
/span>
<span class=3D"k">end subroutine </span><span class=3D"n">mmul</span><span =
class=3D"w"></span>
<span class=3D"k">end module </span><span class=3D"n">mmul_mod</span><span =
class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell309">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"source-code-description">
<h3><span class=3D"section-number">5.1.2. </span>Source Code Description<a =
class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/c=
ompilers/cuda-fortran-prog-guide/index.html#source-code-description" title=
=3D"Permalink to this headline">=EF=83=81</a></h3>
<p>This source code module <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">mmul_mod</span></code> has two subroutines. The host subro=
utine <code class=3D"docutils literal notranslate"><span class=3D"pre">mmul=
</span></code> is a wrapper for the kernel routine <code class=3D"docutils =
literal notranslate"><span class=3D"pre">mmul_kernel</span></code>.</p>
<p><strong>MMUL</strong></p>
<p>This host subroutine has two input arrays, <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">A</span></code> and <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">B</span></code>, and one outp=
ut array, <code class=3D"docutils literal notranslate"><span class=3D"pre">=
C</span></code>, passed as assumed-shape arrays. The routine performs the f=
ollowing operations:</p>
<ul class=3D"simple">
<li><p>It determines the size of the matrices in <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">N</span></code>, <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">M</span></code>, and <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">L</span></code>.</=
p></li>
<li><p>It allocates device memory arrays <code class=3D"docutils literal no=
translate"><span class=3D"pre">Adev</span></code>, <code class=3D"docutils =
literal notranslate"><span class=3D"pre">Bdev</span></code>, and <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">Cdev.</span></code><=
/p></li>
<li><p>It copies the arrays <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">A</span></code> and <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">B</span></code> to <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">Adev</span></code> and <code class=3D"=
docutils literal notranslate"><span class=3D"pre">Bdev</span></code> using =
array assignments.</p></li>
<li><p>It fills <code class=3D"docutils literal notranslate"><span class=3D=
"pre">dimGrid</span></code> and <code class=3D"docutils literal notranslate=
"><span class=3D"pre">dimBlock</span></code> to hold the grid and thread bl=
ock sizes.</p></li>
<li><p>It calls <code class=3D"docutils literal notranslate"><span class=3D=
"pre">mmul_kernel</span></code> to compute <code class=3D"docutils literal =
notranslate"><span class=3D"pre">Cdev</span></code> on the device.</p></li>
<li><p>It copies <code class=3D"docutils literal notranslate"><span class=
=3D"pre">Cdev</span></code> back from device memory to <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">C</span></code>.</p></li>
<li><p>It frees the device memory arrays.</p></li>
</ul>
<p>Because the data copy operations are synchronous, no extra synchronizati=
on is needed between the copy operations and the kernel launch.</p>
<p><strong>MMUL_KERNEL</strong></p>
<p>This kernel subroutine has two device memory input arrays, <code class=
=3D"docutils literal notranslate"><span class=3D"pre">A</span></code> and <=
code class=3D"docutils literal notranslate"><span class=3D"pre">B</span></c=
ode>, one device memory output array, <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">C</span></code>, and three scalars giving the a=
rray sizes. The thread executing this routine is one of 16x16 threads coope=
rating in a thread block. This routine computes the dot product of <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">A(i,:)*B(:,j)</spa=
n></code> for a particular value of <code class=3D"docutils literal notrans=
late"><span class=3D"pre">i</span></code> and <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">j</span></code>, depending on the block=
 and thread index.</p>
<p>It performs the following operations:</p>
<ul class=3D"simple">
<li><p>It determines the thread indices for this thread.</p></li>
<li><p>It determines the i and j indices, for which element of`` C(i,j)`` i=
t is computing.</p></li>
<li><p>It initializes a scalar in which it will accumulate the dot product.=
</p></li>
<li><p>It steps through the arrays <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">A</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">B</span></code> in blocks of size 16.</p=
></li>
<li><p>For each block, it does the following steps:</p>
<ul>
<li><p>It loads one element of the submatrices of <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">A</span></code> and <code class=3D"=
docutils literal notranslate"><span class=3D"pre">B</span></code> into shar=
ed memory.</p></li>
<li><p>It synchronizes to make sure both submatrices are loaded by all thre=
ads in the block.</p></li>
<li><p>It accumulates the dot product of its row and column of the submatri=
ces.</p></li>
<li><p>It synchronizes again to make sure all threads are done reading the =
submatrices before starting the next block.</p></li>
</ul>
</li>
<li><p>Finally, it stores the computed value into the correct element of <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">C</span></co=
de>.</p></li>
</ul>
<span class=3D"target" id=3D"cfexam-mapped-mem"></span></section>
</section>
<section id=3D"mapped-memory-example">
<h2><span class=3D"section-number">5.2. </span>Mapped Memory Example<a clas=
s=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compi=
lers/cuda-fortran-prog-guide/index.html#mapped-memory-example" title=3D"Per=
malink to this headline">=EF=83=81</a></h2>
<p>This example demonstrates the use of CUDA API supported in the <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">cudafor</span></cod=
e> module for mapping page-locked host memory into the address space of the=
 device. It makes use of the <code class=3D"docutils literal notranslate"><=
span class=3D"pre">iso_c_binding</span> <span class=3D"pre">c_ptr</span></c=
ode> type and the <code class=3D"docutils literal notranslate"><span class=
=3D"pre">cudafor</span> <span class=3D"pre">c_devptr</span></code> types to=
 interface to the C routines, then the Fortran <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">c_f_pointer</span></code> call to map =
the types to Fortran arrays.</p>
<p><strong>Mapped Memory</strong></p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell310"><span></span><span class=3D"k">module </span><span class=
=3D"n">atest</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">contains</span>
<span class=3D"k">    </span><span class=3D"n">attributes</span><span class=
=3D"p">(</span><span class=3D"n">global</span><span class=3D"p">)</span><sp=
an class=3D"w"> </span><span class=3D"k">subroutine </span><span class=3D"n=
">matrixinc</span><span class=3D"p">(</span><span class=3D"n">a</span><span=
 class=3D"p">,</span><span class=3D"n">n</span><span class=3D"p">)</span><s=
pan class=3D"w"></span>
<span class=3D"w">      </span><span class=3D"kt">real</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"n">device</span><span =
class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><=
span class=3D"n">a</span><span class=3D"p">(</span><span class=3D"n">n</spa=
n><span class=3D"p">,</span><span class=3D"n">n</span><span class=3D"p">)</=
span><span class=3D"w"></span>
<span class=3D"w">      </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">value</span><spa=
n class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span=
><span class=3D"n">n</span><span class=3D"w"></span>
<span class=3D"w">      </span><span class=3D"n">i</span><span class=3D"w">=
 </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"p">(</span><span class=3D"n">blockidx</span><span class=3D"p">%</span><=
span class=3D"n">x</span><span class=3D"o">-</span><span class=3D"mi">1</sp=
an><span class=3D"p">)</span><span class=3D"o">*</span><span class=3D"mi">1=
0</span><span class=3D"w"> </span><span class=3D"o">+</span><span class=3D"=
w"> </span><span class=3D"n">threadidx</span><span class=3D"p">%</span><spa=
n class=3D"n">x</span><span class=3D"w"></span>
<span class=3D"w">      </span><span class=3D"n">j</span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"p">(</span><span class=
=3D"n">blockidx</span><span class=3D"p">%</span><span class=3D"n">y</span><=
span class=3D"o">-</span><span class=3D"mi">1</span><span class=3D"p">)</sp=
an><span class=3D"o">*</span><span class=3D"mi">10</span><span class=3D"w">=
 </span><span class=3D"o">+</span><span class=3D"w"> </span><span class=3D"=
n">threadidx</span><span class=3D"p">%</span><span class=3D"n">y</span><spa=
n class=3D"w"></span>
<span class=3D"w">      </span><span class=3D"k">if</span><span class=3D"w"=
> </span><span class=3D"p">((</span><span class=3D"n">i</span><span class=
=3D"w"> </span><span class=3D"p">.</span><span class=3D"n">le</span><span c=
lass=3D"p">.</span><span class=3D"w"> </span><span class=3D"n">n</span><spa=
n class=3D"p">)</span><span class=3D"w"> </span><span class=3D"p">.</span><=
span class=3D"nb">and</span><span class=3D"p">.</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"n">j</span><span class=3D"w">=
 </span><span class=3D"p">.</span><span class=3D"n">le</span><span class=3D=
"p">.</span><span class=3D"w"> </span><span class=3D"n">n</span><span class=
=3D"p">))</span><span class=3D"w"> </span><span class=3D"k">then</span>
<span class=3D"k">        </span><span class=3D"n">a</span><span class=3D"p=
">(</span><span class=3D"n">i</span><span class=3D"p">,</span><span class=
=3D"n">j</span><span class=3D"p">)</span><span class=3D"w"> </span><span cl=
ass=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">a</span><sp=
an class=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">,</span>=
<span class=3D"n">j</span><span class=3D"p">)</span><span class=3D"w"> </sp=
an><span class=3D"o">+</span><span class=3D"w"> </span><span class=3D"mf">1=
.0</span><span class=3D"w"></span>
<span class=3D"w">      </span><span class=3D"k">endif</span>
<span class=3D"k">      return</span>
<span class=3D"k">    end subroutine</span>
<span class=3D"k">end module</span>

<span class=3D"k">program </span><span class=3D"n">test</span><span class=
=3D"w"></span>
<span class=3D"k">use  </span><span class=3D"n">cudafor</span><span class=
=3D"w"></span>
<span class=3D"k">use  </span><span class=3D"n">atest</span><span class=3D"=
w"></span>
<span class=3D"k">use</span><span class=3D"p">,</span><span class=3D"w"> </=
span><span class=3D"k">intrinsic</span><span class=3D"w"> </span><span clas=
s=3D"kd">::</span><span class=3D"w"> </span><span class=3D"nb">iso_c_bindin=
g</span>

<span class=3D"k">type</span><span class=3D"p">(</span><span class=3D"kt">c=
_ptr</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">a</span><span =
class=3D"w"></span>
<span class=3D"k">type</span><span class=3D"p">(</span><span class=3D"n">c_=
devptr</span><span class=3D"p">)</span><span class=3D"w"> </span><span clas=
s=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">a_d</span><sp=
an class=3D"w"></span>
<span class=3D"kt">real</span><span class=3D"p">,</span><span class=3D"w"> =
</span><span class=3D"k">dimension</span><span class=3D"p">(:,:),</span><sp=
an class=3D"w"> </span><span class=3D"k">pointer</span><span class=3D"w"> <=
/span><span class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"=
n">fa</span><span class=3D"w"></span>
<span class=3D"kt">real</span><span class=3D"p">,</span><span class=3D"w"> =
</span><span class=3D"k">dimension</span><span class=3D"p">(:,:),</span><sp=
an class=3D"w"> </span><span class=3D"k">allocatable</span><span class=3D"p=
">,</span><span class=3D"w"> </span><span class=3D"n">device</span><span cl=
ass=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><sp=
an class=3D"n">fa_d</span><span class=3D"w"></span>
<span class=3D"k">type</span><span class=3D"p">(</span><span class=3D"n">di=
m3</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D=
"kd">::</span><span class=3D"w"> </span><span class=3D"n">blcks</span><span=
 class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">thrds</spa=
n><span class=3D"w"></span>

<span class=3D"n">istat</span><span class=3D"o">=3D</span><span class=3D"w"=
> </span><span class=3D"n">cudaSetDeviceFlags</span><span class=3D"p">(</sp=
an><span class=3D"n">cudadevicemaphost</span><span class=3D"p">)</span><spa=
n class=3D"w"></span>

<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaHostAlloc</span><=
span class=3D"p">(</span><span class=3D"n">a</span><span class=3D"p">,</spa=
n><span class=3D"mi">100</span><span class=3D"o">*</span><span class=3D"mi"=
>100</span><span class=3D"o">*</span><span class=3D"n">sizeof</span><span c=
lass=3D"p">(</span><span class=3D"mf">1.0</span><span class=3D"p">),</span>=
<span class=3D"n">cudaHostAllocMapped</span><span class=3D"p">)</span><span=
 class=3D"w"></span>

<span class=3D"c">! can move the c_ptr to an f90 pointer</span>
<span class=3D"k">call </span><span class=3D"nb">c_f_pointer</span><span cl=
ass=3D"p">(</span><span class=3D"n">a</span><span class=3D"p">,</span><span=
 class=3D"w"> </span><span class=3D"n">fa</span><span class=3D"p">,</span><=
span class=3D"w"> </span><span class=3D"p">(</span><span class=3D"o">/</spa=
n><span class=3D"w"> </span><span class=3D"mi">100</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"mi">100</span><span class=
=3D"w"> </span><span class=3D"o">/</span><span class=3D"p">)</span><span cl=
ass=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"></span>

<span class=3D"c">! update the data on the host</span>
<span class=3D"k">do </span><span class=3D"n">j</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"m=
i">1</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"mi">100</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">do </span><span class=3D"n">i<=
/span><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"=
w"> </span><span class=3D"mi">1</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"mi">100</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">fa</span><span class=3D"p">(=
</span><span class=3D"n">i</span><span class=3D"p">,</span><span class=3D"n=
">j</span><span class=3D"p">)</span><span class=3D"o">=3D</span><span class=
=3D"w"> </span><span class=3D"kt">real</span><span class=3D"p">(</span><spa=
n class=3D"n">i</span><span class=3D"p">)</span><span class=3D"w"> </span><=
span class=3D"o">+</span><span class=3D"w"> </span><span class=3D"n">j</spa=
n><span class=3D"o">*</span><span class=3D"p">;</span><span class=3D"mi">10=
</span><span class=3D"mf">0.0</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">end do</span>
<span class=3D"k">end do</span><span class=3D"w"></span>

<span class=3D"c">! get a device pointer to the same array</span>
<span class=3D"n">istat</span><span class=3D"o">=3D</span><span class=3D"w"=
> </span><span class=3D"n">cudaHostGetDevicePointer</span><span class=3D"p"=
>(</span><span class=3D"n">a_d</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">a</span><span class=3D"p">,</span><span cl=
ass=3D"w"> </span><span class=3D"mi">0</span><span class=3D"p">)</span><spa=
n class=3D"w"></span>

<span class=3D"c">! can move the c_devptr to an device allocatable array</s=
pan>
<span class=3D"k">call </span><span class=3D"nb">c_f_pointer</span><span cl=
ass=3D"p">(</span><span class=3D"n">a_d</span><span class=3D"p">,</span><sp=
an class=3D"w"> </span><span class=3D"n">fa_d</span><span class=3D"p">,</sp=
an><span class=3D"w"> </span><span class=3D"p">(</span><span class=3D"o">/<=
/span><span class=3D"w"> </span><span class=3D"mi">100</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"mi">100</span><span cl=
ass=3D"w"> </span><span class=3D"o">/</span><span class=3D"p">)</span><span=
 class=3D"w"> </span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"c">!</span>
<span class=3D"n">blcks</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">dim3</span><span clas=
s=3D"p">(</span><span class=3D"mi">10</span><span class=3D"p">,</span><span=
 class=3D"mi">10</span><span class=3D"p">,</span><span class=3D"mi">1</span=
><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">thrds</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">dim3</span><span clas=
s=3D"p">(</span><span class=3D"mi">10</span><span class=3D"p">,</span><span=
 class=3D"mi">10</span><span class=3D"p">,</span><span class=3D"mi">1</span=
><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"c">!</span>
<span class=3D"k">call </span><span class=3D"n">matrixinc</span><span class=
=3D"w"> </span><span class=3D"o">&lt;&lt;&lt;</span><span class=3D"n">blcks=
</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n=
">thrds</span><span class=3D"o">&gt;&gt;&gt;</span><span class=3D"p">(</spa=
n><span class=3D"n">fa_d</span><span class=3D"p">,</span><span class=3D"w">=
 </span><span class=3D"mi">100</span><span class=3D"p">)</span><span class=
=3D"w"></span>

<span class=3D"c">! need to synchronize</span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaDeviceSynchronize=
</span><span class=3D"p">()</span><span class=3D"w"></span>
<span class=3D"c">!</span>
<span class=3D"k">do </span><span class=3D"n">j</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"m=
i">1</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"mi">100</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">do </span><span class=3D"n">i<=
/span><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"=
w"> </span><span class=3D"mi">1</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"mi">100</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">if</span><span class=3D"w"> =
</span><span class=3D"p">(</span><span class=3D"n">fa</span><span class=3D"=
p">(</span><span class=3D"n">i</span><span class=3D"p">,</span><span class=
=3D"n">j</span><span class=3D"p">)</span><span class=3D"w"> </span><span cl=
ass=3D"p">.</span><span class=3D"n">ne</span><span class=3D"p">.</span><spa=
n class=3D"w"> </span><span class=3D"p">(</span><span class=3D"kt">real</sp=
an><span class=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">)<=
/span><span class=3D"w"> </span><span class=3D"o">+</span><span class=3D"w"=
> </span><span class=3D"n">j</span><span class=3D"o">*</span><span class=3D=
"mi">10</span><span class=3D"mf">0.0</span><span class=3D"w"> </span><span =
class=3D"o">+</span><span class=3D"w"> </span><span class=3D"mf">1.0</span>=
<span class=3D"p">))</span><span class=3D"w"> </span><span class=3D"k">prin=
t</span><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"=
p">,</span><span class=3D"s2">"failure"</span><span class=3D"p">,</span><sp=
an class=3D"n">i</span><span class=3D"p">,</span><span class=3D"n">j</span>=
<span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">end do</span>
<span class=3D"k">end do</span><span class=3D"w"></span>
<span class=3D"c">!</span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaFreeHost</span><s=
pan class=3D"p">(</span><span class=3D"n">a</span><span class=3D"p">)</span=
><span class=3D"w"></span>
<span class=3D"k">end</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell310">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<span class=3D"target" id=3D"cfexam-cublas-mod"></span></section>
<section id=3D"cublas-module-example">
<h2><span class=3D"section-number">5.3. </span>Cublas Module Example<a clas=
s=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compi=
lers/cuda-fortran-prog-guide/index.html#cublas-module-example" title=3D"Per=
malink to this headline">=EF=83=81</a></h2>
<p>This example demonstrates the use of the cublas module, the <code class=
=3D"docutils literal notranslate"><span class=3D"pre">cublasHandle</span></=
code> type, the three forms of cublas calls, and the use of mapped pinned m=
emory, all within the framework of an multi-threaded OpenMP program.</p>
<p><strong>Cublas Module</strong></p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell311"><span></span><span class=3D"k">program </span><span clas=
s=3D"n">tdot</span><span class=3D"w"></span>
<span class=3D"c">! Compile with "nvfortran -mp tdot.cuf -cudalib=3Dcublas =
-lblas</span>
<span class=3D"c">! Set OMP_NUM_THREADS environment variable to run with</s=
pan>
<span class=3D"c">! up to 2 threads, currently.</span>
<span class=3D"c">!</span>
<span class=3D"k">use </span><span class=3D"n">cublas</span><span class=3D"=
w"></span>
<span class=3D"k">use </span><span class=3D"n">cudafor</span><span class=3D=
"w"></span>
<span class=3D"k">use </span><span class=3D"n">omp_lib</span><span class=3D=
"w"></span>
<span class=3D"c">!</span>
<span class=3D"kt">integer</span><span class=3D"p">,</span><span class=3D"w=
"> </span><span class=3D"k">parameter</span><span class=3D"w"> </span><span=
 class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">N</span>=
<span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </=
span><span class=3D"mi">10000</span><span class=3D"w"></span>
<span class=3D"kt">real</span><span class=3D"o">*</span><span class=3D"mi">=
8</span><span class=3D"w"> </span><span class=3D"n">x</span><span class=3D"=
p">(</span><span class=3D"n">N</span><span class=3D"p">),</span><span class=
=3D"w"> </span><span class=3D"n">y</span><span class=3D"p">(</span><span cl=
ass=3D"n">N</span><span class=3D"p">),</span><span class=3D"w"> </span><spa=
n class=3D"n">z</span><span class=3D"w"></span>
<span class=3D"kt">real</span><span class=3D"o">*</span><span class=3D"mi">=
8</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"=
n">device</span><span class=3D"p">,</span><span class=3D"w"> </span><span c=
lass=3D"k">allocatable</span><span class=3D"w"> </span><span class=3D"kd">:=
:</span><span class=3D"w"> </span><span class=3D"n">xd0</span><span class=
=3D"p">(:),</span><span class=3D"w"> </span><span class=3D"n">yd0</span><sp=
an class=3D"p">(:)</span><span class=3D"w"></span>
<span class=3D"kt">real</span><span class=3D"o">*</span><span class=3D"mi">=
8</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"=
n">device</span><span class=3D"p">,</span><span class=3D"w"> </span><span c=
lass=3D"k">allocatable</span><span class=3D"w"> </span><span class=3D"kd">:=
:</span><span class=3D"w"> </span><span class=3D"n">xd1</span><span class=
=3D"p">(:),</span><span class=3D"w"> </span><span class=3D"n">yd1</span><sp=
an class=3D"p">(:)</span><span class=3D"w"></span>
<span class=3D"kt">real</span><span class=3D"o">*</span><span class=3D"mi">=
8</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"=
k">allocatable</span><span class=3D"w"> </span><span class=3D"kd">::</span>=
<span class=3D"w"> </span><span class=3D"n">zh</span><span class=3D"p">(:)<=
/span><span class=3D"w"></span>
<span class=3D"kt">real</span><span class=3D"o">*</span><span class=3D"mi">=
8</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"=
k">allocatable</span><span class=3D"p">,</span><span class=3D"w"> </span><s=
pan class=3D"n">device</span><span class=3D"w"> </span><span class=3D"kd">:=
:</span><span class=3D"w"> </span><span class=3D"n">zd</span><span class=3D=
"p">(:)</span><span class=3D"w"></span>
<span class=3D"kt">integer</span><span class=3D"p">,</span><span class=3D"w=
"> </span><span class=3D"k">allocatable</span><span class=3D"w"> </span><sp=
an class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">istats=
</span><span class=3D"p">(:),</span><span class=3D"w"> </span><span class=
=3D"n">offs</span><span class=3D"p">(:)</span><span class=3D"w"></span>
<span class=3D"kt">real</span><span class=3D"o">*</span><span class=3D"mi">=
8</span><span class=3D"w"> </span><span class=3D"n">reslt</span><span class=
=3D"p">(</span><span class=3D"mi">3</span><span class=3D"p">)</span><span c=
lass=3D"w"></span>
<span class=3D"k">type</span><span class=3D"p">(</span><span class=3D"n">C_=
DEVPTR</span><span class=3D"p">)</span><span class=3D"w"> </span><span clas=
s=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">zdptr</span><=
span class=3D"w"></span>
<span class=3D"k">type</span><span class=3D"p">(</span><span class=3D"n">cu=
blasHandle</span><span class=3D"p">)</span><span class=3D"w"> </span><span =
class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">h</span><=
span class=3D"w"></span>

<span class=3D"c">! Max at 2 threads for now</span>
<span class=3D"n">nthr</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">omp_get_max_threads</=
span><span class=3D"p">()</span><span class=3D"w"></span>
<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"n">nthr</span><span class=3D"w"> </span><span class=3D"p=
">.</span><span class=3D"n">gt</span><span class=3D"p">.</span><span class=
=3D"w"> </span><span class=3D"mi">2</span><span class=3D"p">)</span><span c=
lass=3D"w"> </span><span class=3D"n">nthr</span><span class=3D"w"> </span><=
span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"mi">2</=
span><span class=3D"w"></span>
<span class=3D"k">call </span><span class=3D"n">omp_set_num_threads</span><=
span class=3D"p">(</span><span class=3D"n">nthr</span><span class=3D"p">)</=
span><span class=3D"w"></span>
<span class=3D"c">! Run on host</span>
<span class=3D"k">call </span><span class=3D"nb">random_number</span><span =
class=3D"p">(</span><span class=3D"n">x</span><span class=3D"p">)</span><sp=
an class=3D"w"></span>
<span class=3D"k">call </span><span class=3D"nb">random_number</span><span =
class=3D"p">(</span><span class=3D"n">y</span><span class=3D"p">)</span><sp=
an class=3D"w"></span>
<span class=3D"n">z</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">ddot</span><span class=3D"=
p">(</span><span class=3D"n">N</span><span class=3D"p">,</span><span class=
=3D"n">x</span><span class=3D"p">,</span><span class=3D"mi">1</span><span c=
lass=3D"p">,</span><span class=3D"n">y</span><span class=3D"p">,</span><spa=
n class=3D"mi">1</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"k">print</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"p">,</span><span class=3D"s2">"HostSerial"</span><spa=
n class=3D"p">,</span><span class=3D"n">z</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell311">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell312"><span></span><span class=3D"c">! Create a pinned memory =
spot</span>
<span class=3D"c">!$omp PARALLEL private(i,istat)</span>
<span class=3D"w">    </span><span class=3D"n">i</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
n">omp_get_thread_num</span><span class=3D"p">()</span><span class=3D"w"></=
span>
<span class=3D"w">    </span><span class=3D"n">istat</span><span class=3D"w=
"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cudaSetDeviceFlags</span><span class=3D"p">(</span><span class=3D"n"=
>cudaDeviceMapHost</span><span class=3D"p">)</span><span class=3D"w"></span=
>
<span class=3D"w">    </span><span class=3D"n">istat</span><span class=3D"w=
"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cudaSetDevice</span><span class=3D"p">(</span><span class=3D"n">i</s=
pan><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"c">!$omp end parallel</span>
<span class=3D"k">allocate</span><span class=3D"p">(</span><span class=3D"n=
">zh</span><span class=3D"p">(</span><span class=3D"mi">512</span><span cla=
ss=3D"p">),</span><span class=3D"n">align</span><span class=3D"o">=3D</span=
><span class=3D"mi">4096</span><span class=3D"p">)</span><span class=3D"w">=
</span>
<span class=3D"n">zh</span><span class=3D"w"> </span><span class=3D"o">=3D<=
/span><span class=3D"w"> </span><span class=3D"mf">0.0d0</span><span class=
=3D"w"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaHostRegister</spa=
n><span class=3D"p">(</span><span class=3D"nb">C_LOC</span><span class=3D"p=
">(</span><span class=3D"n">zh</span><span class=3D"p">(</span><span class=
=3D"mi">1</span><span class=3D"p">)),</span><span class=3D"w"> </span><span=
 class=3D"mi">4096</span><span class=3D"p">,</span><span class=3D"w"> </spa=
n><span class=3D"n">cudaHostRegisterMapped</span><span class=3D"p">)</span>=
<span class=3D"w"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaHostGetDevicePoin=
ter</span><span class=3D"p">(</span><span class=3D"n">zdptr</span><span cla=
ss=3D"p">,</span><span class=3D"w"> </span><span class=3D"nb">C_LOC</span><=
span class=3D"p">(</span><span class=3D"n">zh</span><span class=3D"p">(</sp=
an><span class=3D"mi">1</span><span class=3D"p">)),</span><span class=3D"w"=
> </span><span class=3D"mi">0</span><span class=3D"p">)</span><span class=
=3D"w"></span>
<span class=3D"k">call </span><span class=3D"nb">c_f_pointer</span><span cl=
ass=3D"p">(</span><span class=3D"n">zdptr</span><span class=3D"p">,</span><=
span class=3D"w"> </span><span class=3D"n">zd</span><span class=3D"p">,</sp=
an><span class=3D"w"> </span><span class=3D"mi">512</span><span class=3D"w"=
> </span><span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell312">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell313"><span></span><span class=3D"c">! CUDA data allocation, r=
un on one card, blas interface</span>
<span class=3D"k">allocate</span><span class=3D"p">(</span><span class=3D"n=
">xd0</span><span class=3D"p">(</span><span class=3D"n">N</span><span class=
=3D"p">),</span><span class=3D"n">yd0</span><span class=3D"p">(</span><span=
 class=3D"n">N</span><span class=3D"p">))</span><span class=3D"w"></span>
<span class=3D"n">xd0</span><span class=3D"w"> </span><span class=3D"o">=3D=
</span><span class=3D"w"> </span><span class=3D"n">x</span><span class=3D"w=
"></span>
<span class=3D"n">yd0</span><span class=3D"w"> </span><span class=3D"o">=3D=
</span><span class=3D"w"> </span><span class=3D"n">y</span><span class=3D"w=
"></span>
<span class=3D"n">z</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">ddot</span><span class=3D"=
p">(</span><span class=3D"n">N</span><span class=3D"p">,</span><span class=
=3D"n">xd0</span><span class=3D"p">,</span><span class=3D"mi">1</span><span=
 class=3D"p">,</span><span class=3D"n">yd0</span><span class=3D"p">,</span>=
<span class=3D"mi">1</span><span class=3D"p">)</span><span class=3D"w"></sp=
an>
<span class=3D"n">ii</span><span class=3D"w"> </span><span class=3D"o">=3D<=
/span><span class=3D"w"> </span><span class=3D"mi">1</span><span class=3D"w=
"></span>
<span class=3D"n">reslt</span><span class=3D"p">(</span><span class=3D"n">i=
i</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"=
o">=3D</span><span class=3D"w"> </span><span class=3D"n">z</span><span clas=
s=3D"w"></span>
<span class=3D"n">ii</span><span class=3D"w"> </span><span class=3D"o">=3D<=
/span><span class=3D"w"> </span><span class=3D"n">ii</span><span class=3D"w=
"> </span><span class=3D"o">+</span><span class=3D"w"> </span><span class=
=3D"mi">1</span><span class=3D"w"></span>
<span class=3D"k">deallocate</span><span class=3D"p">(</span><span class=3D=
"n">xd0</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"k">deallocate</span><span class=3D"p">(</span><span class=3D=
"n">yd0</span><span class=3D"p">)</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell313">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell314"><span></span><span class=3D"c">! Break up the array into=
 sections</span>
<span class=3D"n">nsec</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">N</span><span class=
=3D"w"> </span><span class=3D"o">/</span><span class=3D"w"> </span><span cl=
ass=3D"n">nthr</span><span class=3D"w"></span>
<span class=3D"k">allocate</span><span class=3D"p">(</span><span class=3D"n=
">istats</span><span class=3D"p">(</span><span class=3D"n">nthr</span><span=
 class=3D"p">),</span><span class=3D"n">offs</span><span class=3D"p">(</spa=
n><span class=3D"n">nthr</span><span class=3D"p">))</span><span class=3D"w"=
></span>
<span class=3D"n">offs</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"p">(</span><span class=
=3D"o">/</span><span class=3D"w"> </span><span class=3D"p">(</span><span cl=
ass=3D"n">i</span><span class=3D"o">*</span><span class=3D"n">nsec</span><s=
pan class=3D"p">,</span><span class=3D"n">i</span><span class=3D"o">=3D</sp=
an><span class=3D"mi">0</span><span class=3D"p">,</span><span class=3D"n">n=
thr</span><span class=3D"o">-</span><span class=3D"mi">1</span><span class=
=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">/</span><span cl=
ass=3D"p">)</span><span class=3D"w"></span>

<span class=3D"c">! Allocate and initialize the arrays</span>
<span class=3D"c">!$omp PARALLEL private(i,istat)</span>
<span class=3D"w">    </span><span class=3D"n">i</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
n">omp_get_thread_num</span><span class=3D"p">()</span><span class=3D"w"> <=
/span><span class=3D"o">+</span><span class=3D"w"> </span><span class=3D"mi=
">1</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">if</span><span class=3D"w"> =
</span><span class=3D"p">(</span><span class=3D"n">i</span><span class=3D"w=
"> </span><span class=3D"p">.</span><span class=3D"n">eq</span><span class=
=3D"p">.</span><span class=3D"w"> </span><span class=3D"mi">1</span><span c=
lass=3D"p">)</span><span class=3D"w"> </span><span class=3D"k">then</span>
<span class=3D"k">        allocate</span><span class=3D"p">(</span><span cl=
ass=3D"n">xd0</span><span class=3D"p">(</span><span class=3D"n">nsec</span>=
<span class=3D"p">),</span><span class=3D"w"> </span><span class=3D"n">yd0<=
/span><span class=3D"p">(</span><span class=3D"n">nsec</span><span class=3D=
"p">))</span><span class=3D"w"></span>
<span class=3D"w">        </span><span class=3D"n">xd0</span><span class=3D=
"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span cla=
ss=3D"n">x</span><span class=3D"p">(</span><span class=3D"n">offs</span><sp=
an class=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">)</span>=
<span class=3D"o">+</span><span class=3D"mi">1</span><span class=3D"p">:</s=
pan><span class=3D"n">offs</span><span class=3D"p">(</span><span class=3D"n=
">i</span><span class=3D"p">)</span><span class=3D"o">+</span><span class=
=3D"n">nsec</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">        </span><span class=3D"n">yd0</span><span class=3D=
"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span cla=
ss=3D"n">y</span><span class=3D"p">(</span><span class=3D"n">offs</span><sp=
an class=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">)</span>=
<span class=3D"o">+</span><span class=3D"mi">1</span><span class=3D"p">:</s=
pan><span class=3D"n">offs</span><span class=3D"p">(</span><span class=3D"n=
">i</span><span class=3D"p">)</span><span class=3D"o">+</span><span class=
=3D"n">nsec</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">else</span>
<span class=3D"k">        allocate</span><span class=3D"p">(</span><span cl=
ass=3D"n">xd1</span><span class=3D"p">(</span><span class=3D"n">nsec</span>=
<span class=3D"p">),</span><span class=3D"w"> </span><span class=3D"n">yd1<=
/span><span class=3D"p">(</span><span class=3D"n">nsec</span><span class=3D=
"p">))</span><span class=3D"w"></span>
<span class=3D"w">        </span><span class=3D"n">xd1</span><span class=3D=
"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span cla=
ss=3D"n">x</span><span class=3D"p">(</span><span class=3D"n">offs</span><sp=
an class=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">)</span>=
<span class=3D"o">+</span><span class=3D"mi">1</span><span class=3D"p">:</s=
pan><span class=3D"n">offs</span><span class=3D"p">(</span><span class=3D"n=
">i</span><span class=3D"p">)</span><span class=3D"o">+</span><span class=
=3D"n">nsec</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">        </span><span class=3D"n">yd1</span><span class=3D=
"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span cla=
ss=3D"n">y</span><span class=3D"p">(</span><span class=3D"n">offs</span><sp=
an class=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">)</span>=
<span class=3D"o">+</span><span class=3D"mi">1</span><span class=3D"p">:</s=
pan><span class=3D"n">offs</span><span class=3D"p">(</span><span class=3D"n=
">i</span><span class=3D"p">)</span><span class=3D"o">+</span><span class=
=3D"n">nsec</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">endif</span><span class=3D"w=
"></span>
<span class=3D"c">!$omp end parallel</span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell314">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell315"><span></span><span class=3D"c">! Run the blas kernel usi=
ng cublas name</span>
<span class=3D"c">!$omp PARALLEL private(i,istat,z)</span>
<span class=3D"w">    </span><span class=3D"n">i</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
n">omp_get_thread_num</span><span class=3D"p">()</span><span class=3D"w"> <=
/span><span class=3D"o">+</span><span class=3D"w"> </span><span class=3D"mi=
">1</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">if</span><span class=3D"w"> =
</span><span class=3D"p">(</span><span class=3D"n">i</span><span class=3D"w=
"> </span><span class=3D"p">.</span><span class=3D"n">eq</span><span class=
=3D"p">.</span><span class=3D"w"> </span><span class=3D"mi">1</span><span c=
lass=3D"p">)</span><span class=3D"w"> </span><span class=3D"k">then</span>
<span class=3D"k">        </span><span class=3D"n">z</span><span class=3D"w=
"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cublasDdot</span><span class=3D"p">(</span><span class=3D"n">nsec</s=
pan><span class=3D"p">,</span><span class=3D"n">xd0</span><span class=3D"p"=
>,</span><span class=3D"mi">1</span><span class=3D"p">,</span><span class=
=3D"n">yd0</span><span class=3D"p">,</span><span class=3D"mi">1</span><span=
 class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">else</span>
<span class=3D"k">        </span><span class=3D"n">z</span><span class=3D"w=
"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cublasDdot</span><span class=3D"p">(</span><span class=3D"n">nsec</s=
pan><span class=3D"p">,</span><span class=3D"n">xd1</span><span class=3D"p"=
>,</span><span class=3D"mi">1</span><span class=3D"p">,</span><span class=
=3D"n">yd1</span><span class=3D"p">,</span><span class=3D"mi">1</span><span=
 class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">endif</span>
<span class=3D"k">    </span><span class=3D"n">zh</span><span class=3D"p">(=
</span><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"w=
"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">z</span><span class=3D"w"></span>
<span class=3D"c">!$omp end parallel</span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell315">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell316"><span></span><span class=3D"n">z</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">zh</span><span class=3D"p">(</span><span class=3D"mi">1</span><span =
class=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">+</span><sp=
an class=3D"w"> </span><span class=3D"n">zh</span><span class=3D"p">(</span=
><span class=3D"mi">2</span><span class=3D"p">)</span><span class=3D"w"></s=
pan>
<span class=3D"n">reslt</span><span class=3D"p">(</span><span class=3D"n">i=
i</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"=
o">=3D</span><span class=3D"w"> </span><span class=3D"n">z</span><span clas=
s=3D"w"></span>
<span class=3D"n">ii</span><span class=3D"w"> </span><span class=3D"o">=3D<=
/span><span class=3D"w"> </span><span class=3D"n">ii</span><span class=3D"w=
"> </span><span class=3D"o">+</span><span class=3D"w"> </span><span class=
=3D"mi">1</span><span class=3D"w"></span>

<span class=3D"n">zh</span><span class=3D"w"> </span><span class=3D"o">=3D<=
/span><span class=3D"w"> </span><span class=3D"mf">0.0d0</span><span class=
=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell316">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell317"><span></span><span class=3D"c">! Now write to our pinned=
 area with the v2 blas</span>
<span class=3D"c">!$omp PARALLEL private(h,i,istat)</span>
<span class=3D"w">    </span><span class=3D"n">i</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
n">omp_get_thread_num</span><span class=3D"p">()</span><span class=3D"w"> <=
/span><span class=3D"o">+</span><span class=3D"w"> </span><span class=3D"mi=
">1</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">h</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
n">cublasGetHandle</span><span class=3D"p">()</span><span class=3D"w"></spa=
n>
<span class=3D"w">    </span><span class=3D"n">istat</span><span class=3D"w=
"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cublasSetPointerMode</span><span class=3D"p">(</span><span class=3D"=
n">h</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">CUBLAS_POINTER_MODE_DEVICE</span><span class=3D"p">)</span><span cla=
ss=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">if</span><span class=3D"w"> =
</span><span class=3D"p">(</span><span class=3D"n">i</span><span class=3D"w=
"> </span><span class=3D"p">.</span><span class=3D"n">eq</span><span class=
=3D"p">.</span><span class=3D"w"> </span><span class=3D"mi">1</span><span c=
lass=3D"p">)</span><span class=3D"w"> </span><span class=3D"k">then</span>
<span class=3D"k">        </span><span class=3D"n">istats</span><span class=
=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">)</span><span cl=
ass=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><sp=
an class=3D"n">cublasDdot_v2</span><span class=3D"p">(</span><span class=3D=
"n">h</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">nsec</span><span class=3D"p">,</span><span class=3D"w"> </span><span=
 class=3D"n">xd0</span><span class=3D"p">,</span><span class=3D"w"> </span>=
<span class=3D"mi">1</span><span class=3D"p">,</span><span class=3D"w"> </s=
pan><span class=3D"n">yd0</span><span class=3D"p">,</span><span class=3D"w"=
> </span><span class=3D"mi">1</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">zd</span><span class=3D"p">(</span><span c=
lass=3D"mi">1</span><span class=3D"p">))</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">else</span>
<span class=3D"k">        </span><span class=3D"n">istats</span><span class=
=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">)</span><span cl=
ass=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><sp=
an class=3D"n">cublasDdot_v2</span><span class=3D"p">(</span><span class=3D=
"n">h</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">nsec</span><span class=3D"p">,</span><span class=3D"w"> </span><span=
 class=3D"n">xd1</span><span class=3D"p">,</span><span class=3D"w"> </span>=
<span class=3D"mi">1</span><span class=3D"p">,</span><span class=3D"w"> </s=
pan><span class=3D"n">yd1</span><span class=3D"p">,</span><span class=3D"w"=
> </span><span class=3D"mi">1</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">zd</span><span class=3D"p">(</span><span c=
lass=3D"mi">2</span><span class=3D"p">))</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">endif</span>
<span class=3D"k">    </span><span class=3D"n">istat</span><span class=3D"w=
"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cublasSetPointerMode</span><span class=3D"p">(</span><span class=3D"=
n">h</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">CUBLAS_POINTER_MODE_HOST</span><span class=3D"p">)</span><span class=
=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">istat</span><span class=3D"w=
"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cudaDeviceSynchronize</span><span class=3D"p">()</span><span class=
=3D"w"></span>
<span class=3D"c">!$omp end parallel</span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell317">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell318"><span></span><span class=3D"n">z</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">zh</span><span class=3D"p">(</span><span class=3D"mi">1</span><span =
class=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">+</span><sp=
an class=3D"w"> </span><span class=3D"n">zh</span><span class=3D"p">(</span=
><span class=3D"mi">2</span><span class=3D"p">)</span><span class=3D"w"></s=
pan>
<span class=3D"n">reslt</span><span class=3D"p">(</span><span class=3D"n">i=
i</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"=
o">=3D</span><span class=3D"w"> </span><span class=3D"n">z</span><span clas=
s=3D"w"></span>

<span class=3D"k">print</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"p">,</span><span class=3D"s2">"Device, 3 ways:"</span=
><span class=3D"p">,</span><span class=3D"n">reslt</span><span class=3D"w">=
</span>

<span class=3D"c">! Deallocate the arrays</span>
<span class=3D"c">!$omp PARALLEL private(i)</span>
<span class=3D"w">    </span><span class=3D"n">i</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
n">omp_get_thread_num</span><span class=3D"p">()</span><span class=3D"w"> <=
/span><span class=3D"o">+</span><span class=3D"w"> </span><span class=3D"mi=
">1</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">if</span><span class=3D"w"> =
</span><span class=3D"p">(</span><span class=3D"n">i</span><span class=3D"w=
"> </span><span class=3D"p">.</span><span class=3D"n">eq</span><span class=
=3D"p">.</span><span class=3D"w"> </span><span class=3D"mi">1</span><span c=
lass=3D"p">)</span><span class=3D"w"> </span><span class=3D"k">then</span>
<span class=3D"k">        deallocate</span><span class=3D"p">(</span><span =
class=3D"n">xd0</span><span class=3D"p">,</span><span class=3D"n">yd0</span=
><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">else</span>
<span class=3D"k">        deallocate</span><span class=3D"p">(</span><span =
class=3D"n">xd1</span><span class=3D"p">,</span><span class=3D"n">yd1</span=
><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">endif</span><span class=3D"w=
"></span>
<span class=3D"c">!$omp end parallel</span>
<span class=3D"k">deallocate</span><span class=3D"p">(</span><span class=3D=
"n">istats</span><span class=3D"p">,</span><span class=3D"n">offs</span><sp=
an class=3D"p">)</span><span class=3D"w"></span>

<span class=3D"k">end</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell318">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"cuda-device-properties-example">
<h2><span class=3D"section-number">5.4. </span>CUDA Device Properties Examp=
le<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/2=
5.3/compilers/cuda-fortran-prog-guide/index.html#cuda-device-properties-exa=
mple" title=3D"Permalink to this headline">=EF=83=81</a></h2>
<p>This example demonstrates how to access the device properties from CUDA =
Fortran.</p>
<p><strong>CUDA Device Properties</strong></p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell319"><span></span><span class=3D"c">! An example of getting d=
evice properties in CUDA Fortran</span>
<span class=3D"c">! Build with</span>
<span class=3D"c">!   nvfortran cufinfo.cuf</span>
<span class=3D"c">!</span>
<span class=3D"k">program </span><span class=3D"n">cufinfo</span><span clas=
s=3D"w"></span>
<span class=3D"k">use </span><span class=3D"n">cudafor</span><span class=3D=
"w"></span>
<span class=3D"kt">integer </span><span class=3D"n">istat</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">num</span><span =
class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">numdevices<=
/span><span class=3D"w"></span>
<span class=3D"k">type</span><span class=3D"p">(</span><span class=3D"n">cu=
dadeviceprop</span><span class=3D"p">)</span><span class=3D"w"> </span><spa=
n class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">prop</s=
pan><span class=3D"w"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaGetDeviceCount</s=
pan><span class=3D"p">(</span><span class=3D"n">numdevices</span><span clas=
s=3D"p">)</span><span class=3D"w"></span>
<span class=3D"k">do </span><span class=3D"n">num</span><span class=3D"w"> =
</span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D=
"mi">0</span><span class=3D"p">,</span><span class=3D"w"> </span><span clas=
s=3D"n">numdevices</span><span class=3D"o">-</span><span class=3D"mi">1</sp=
an><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">istat</span><span class=3D"w">=
 </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cudaGetDeviceProperties</span><span class=3D"p">(</span><span class=
=3D"n">prop</span><span class=3D"p">,</span><span class=3D"w"> </span><span=
 class=3D"n">num</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">call </span><span class=3D"n">=
printDeviceProperties</span><span class=3D"p">(</span><span class=3D"n">pro=
p</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"=
n">num</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"k">end do</span>
<span class=3D"k">end</span><span class=3D"w"></span>
<span class=3D"c">!</span>
<span class=3D"k">subroutine </span><span class=3D"n">printDeviceProperties=
</span><span class=3D"p">(</span><span class=3D"n">prop</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">num</span><span =
class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"k">use </span><span class=3D"n">cudafor</span><span class=3D=
"w"></span>
<span class=3D"k">type</span><span class=3D"p">(</span><span class=3D"n">cu=
dadeviceprop</span><span class=3D"p">)</span><span class=3D"w"> </span><spa=
n class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">prop</s=
pan><span class=3D"w"></span>
<span class=3D"kt">integer </span><span class=3D"n">num</span><span class=
=3D"w"></span>
<span class=3D"n">ilen</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"nb">verify</span><span c=
lass=3D"p">(</span><span class=3D"n">prop</span><span class=3D"p">%</span><=
span class=3D"n">name</span><span class=3D"p">,</span><span class=3D"w"> </=
span><span class=3D"s1">' '</span><span class=3D"p">,</span><span class=3D"=
w"> </span><span class=3D"p">.</span><span class=3D"n">true</span><span cla=
ss=3D"p">.)</span><span class=3D"w"></span>
<span class=3D"k">write</span><span class=3D"w"> </span><span class=3D"p">(=
</span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D"m=
i">900</span><span class=3D"p">)</span><span class=3D"w"> </span><span clas=
s=3D"s2">"Device Number: "</span><span class=3D"w">      </span><span class=
=3D"p">,</span><span class=3D"n">num</span><span class=3D"w"></span>
<span class=3D"k">write</span><span class=3D"w"> </span><span class=3D"p">(=
</span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D"m=
i">901</span><span class=3D"p">)</span><span class=3D"w"> </span><span clas=
s=3D"s2">"Device Name: "</span><span class=3D"w">        </span><span class=
=3D"p">,</span><span class=3D"n">prop</span><span class=3D"p">%</span><span=
 class=3D"n">name</span><span class=3D"p">(</span><span class=3D"mi">1</spa=
n><span class=3D"p">:</span><span class=3D"n">ilen</span><span class=3D"p">=
)</span><span class=3D"w"></span>
<span class=3D"k">write</span><span class=3D"w"> </span><span class=3D"p">(=
</span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D"m=
i">903</span><span class=3D"p">)</span><span class=3D"w"> </span><span clas=
s=3D"s2">"Total Global Memory: "</span><span class=3D"p">,</span><span clas=
s=3D"kt">real</span><span class=3D"p">(</span><span class=3D"n">prop</span>=
<span class=3D"p">%</span><span class=3D"n">totalGlobalMem</span><span clas=
s=3D"p">)</span><span class=3D"o">/</span><span class=3D"mf">1e9</span><spa=
n class=3D"p">,</span><span class=3D"s2">" Gbytes"</span><span class=3D"w">=
</span>
<span class=3D"k">write</span><span class=3D"w"> </span><span class=3D"p">(=
</span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D"m=
i">902</span><span class=3D"p">)</span><span class=3D"w"> </span><span clas=
s=3D"s2">"sharedMemPerBlock: "</span><span class=3D"w">  </span><span class=
=3D"p">,</span><span class=3D"n">prop</span><span class=3D"p">%</span><span=
 class=3D"n">sharedMemPerBlock</span><span class=3D"p">,</span><span class=
=3D"s2">" bytes"</span><span class=3D"w"></span>
<span class=3D"k">write</span><span class=3D"w"> </span><span class=3D"p">(=
</span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D"m=
i">900</span><span class=3D"p">)</span><span class=3D"w"> </span><span clas=
s=3D"s2">"regsPerBlock: "</span><span class=3D"w">       </span><span class=
=3D"p">,</span><span class=3D"n">prop</span><span class=3D"p">%</span><span=
 class=3D"n">regsPerBlock</span><span class=3D"w"></span>
<span class=3D"k">write</span><span class=3D"w"> </span><span class=3D"p">(=
</span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D"m=
i">900</span><span class=3D"p">)</span><span class=3D"w"> </span><span clas=
s=3D"s2">"warpSize: "</span><span class=3D"w">           </span><span class=
=3D"p">,</span><span class=3D"n">prop</span><span class=3D"p">%</span><span=
 class=3D"n">warpSize</span><span class=3D"w"></span>
<span class=3D"k">write</span><span class=3D"w"> </span><span class=3D"p">(=
</span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D"m=
i">900</span><span class=3D"p">)</span><span class=3D"w"> </span><span clas=
s=3D"s2">"maxThreadsPerBlock: "</span><span class=3D"w"> </span><span class=
=3D"p">,</span><span class=3D"n">prop</span><span class=3D"p">%</span><span=
 class=3D"n">maxThreadsPerBlock</span><span class=3D"w"></span>
<span class=3D"k">write</span><span class=3D"w"> </span><span class=3D"p">(=
</span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D"m=
i">904</span><span class=3D"p">)</span><span class=3D"w"> </span><span clas=
s=3D"s2">"maxThreadsDim: "</span><span class=3D"w">      </span><span class=
=3D"p">,</span><span class=3D"n">prop</span><span class=3D"p">%</span><span=
 class=3D"n">maxThreadsDim</span><span class=3D"w"></span>
<span class=3D"k">write</span><span class=3D"w"> </span><span class=3D"p">(=
</span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D"m=
i">904</span><span class=3D"p">)</span><span class=3D"w"> </span><span clas=
s=3D"s2">"maxGridSize: "</span><span class=3D"w">        </span><span class=
=3D"p">,</span><span class=3D"n">prop</span><span class=3D"p">%</span><span=
 class=3D"n">maxGridSize</span><span class=3D"w"></span>
<span class=3D"k">write</span><span class=3D"w"> </span><span class=3D"p">(=
</span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D"m=
i">903</span><span class=3D"p">)</span><span class=3D"w"> </span><span clas=
s=3D"s2">"ClockRate: "</span><span class=3D"w">          </span><span class=
=3D"p">,</span><span class=3D"kt">real</span><span class=3D"p">(</span><spa=
n class=3D"n">prop</span><span class=3D"p">%</span><span class=3D"n">clockR=
ate</span><span class=3D"p">)</span><span class=3D"o">/</span><span class=
=3D"mf">1e6</span><span class=3D"p">,</span><span class=3D"s2">" GHz"</span=
><span class=3D"w"></span>
<span class=3D"k">write</span><span class=3D"w"> </span><span class=3D"p">(=
</span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D"m=
i">902</span><span class=3D"p">)</span><span class=3D"w"> </span><span clas=
s=3D"s2">"Total Const Memory: "</span><span class=3D"w"> </span><span class=
=3D"p">,</span><span class=3D"n">prop</span><span class=3D"p">%</span><span=
 class=3D"n">totalConstMem</span><span class=3D"p">,</span><span class=3D"s=
2">" bytes"</span><span class=3D"w"></span>
<span class=3D"k">write</span><span class=3D"w"> </span><span class=3D"p">(=
</span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D"m=
i">905</span><span class=3D"p">)</span><span class=3D"w"> </span><span clas=
s=3D"s2">"Compute Capability Revision: "</span><span class=3D"p">,</span><s=
pan class=3D"n">prop</span><span class=3D"p">%</span><span class=3D"n">majo=
r</span><span class=3D"p">,</span><span class=3D"n">prop</span><span class=
=3D"p">%</span><span class=3D"n">minor</span><span class=3D"w"></span>
<span class=3D"k">write</span><span class=3D"w"> </span><span class=3D"p">(=
</span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D"m=
i">902</span><span class=3D"p">)</span><span class=3D"w"> </span><span clas=
s=3D"s2">"TextureAlignment: "</span><span class=3D"w">   </span><span class=
=3D"p">,</span><span class=3D"n">prop</span><span class=3D"p">%</span><span=
 class=3D"n">textureAlignment</span><span class=3D"p">,</span><span class=
=3D"s2">" bytes"</span><span class=3D"w"></span>
<span class=3D"k">write</span><span class=3D"w"> </span><span class=3D"p">(=
</span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D"m=
i">906</span><span class=3D"p">)</span><span class=3D"w"> </span><span clas=
s=3D"s2">"deviceOverlap: "</span><span class=3D"w">      </span><span class=
=3D"p">,</span><span class=3D"n">prop</span><span class=3D"p">%</span><span=
 class=3D"n">deviceOverlap</span><span class=3D"w"></span>
<span class=3D"k">write</span><span class=3D"w"> </span><span class=3D"p">(=
</span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D"m=
i">900</span><span class=3D"p">)</span><span class=3D"w"> </span><span clas=
s=3D"s2">"multiProcessorCount: "</span><span class=3D"p">,</span><span clas=
s=3D"n">prop</span><span class=3D"p">%</span><span class=3D"n">multiProcess=
orCount</span><span class=3D"w"></span>
<span class=3D"k">write</span><span class=3D"w"> </span><span class=3D"p">(=
</span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D"m=
i">906</span><span class=3D"p">)</span><span class=3D"w"> </span><span clas=
s=3D"s2">"integrated: "</span><span class=3D"w">         </span><span class=
=3D"p">,</span><span class=3D"n">prop</span><span class=3D"p">%</span><span=
 class=3D"n">integrated</span><span class=3D"w"></span>
<span class=3D"k">write</span><span class=3D"w"> </span><span class=3D"p">(=
</span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D"m=
i">906</span><span class=3D"p">)</span><span class=3D"w"> </span><span clas=
s=3D"s2">"canMapHostMemory: "</span><span class=3D"w">   </span><span class=
=3D"p">,</span><span class=3D"n">prop</span><span class=3D"p">%</span><span=
 class=3D"n">canMapHostMemory</span><span class=3D"w"></span>
<span class=3D"k">write</span><span class=3D"w"> </span><span class=3D"p">(=
</span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D"m=
i">906</span><span class=3D"p">)</span><span class=3D"w"> </span><span clas=
s=3D"s2">"ECCEnabled: "</span><span class=3D"w">         </span><span class=
=3D"p">,</span><span class=3D"n">prop</span><span class=3D"p">%</span><span=
 class=3D"n">ECCEnabled</span><span class=3D"w"></span>
<span class=3D"k">write</span><span class=3D"w"> </span><span class=3D"p">(=
</span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D"m=
i">906</span><span class=3D"p">)</span><span class=3D"w"> </span><span clas=
s=3D"s2">"UnifiedAddressing: "</span><span class=3D"w">  </span><span class=
=3D"p">,</span><span class=3D"n">prop</span><span class=3D"p">%</span><span=
 class=3D"n">unifiedAddressing</span><span class=3D"w"></span>
<span class=3D"k">write</span><span class=3D"w"> </span><span class=3D"p">(=
</span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D"m=
i">900</span><span class=3D"p">)</span><span class=3D"w"> </span><span clas=
s=3D"s2">"L2 Cache Size: "</span><span class=3D"w">      </span><span class=
=3D"p">,</span><span class=3D"n">prop</span><span class=3D"p">%</span><span=
 class=3D"n">l2CacheSize</span><span class=3D"w"></span>
<span class=3D"k">write</span><span class=3D"w"> </span><span class=3D"p">(=
</span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D"m=
i">900</span><span class=3D"p">)</span><span class=3D"w"> </span><span clas=
s=3D"s2">"maxThreadsPerSMP: "</span><span class=3D"w">   </span><span class=
=3D"p">,</span><span class=3D"n">prop</span><span class=3D"p">%</span><span=
 class=3D"n">maxThreadsPerMultiProcessor</span><span class=3D"w"></span>
<span class=3D"mi">900</span><span class=3D"w"> </span><span class=3D"k">fo=
rmat</span><span class=3D"w"> </span><span class=3D"p">(</span><span class=
=3D"n">a</span><span class=3D"p">,</span><span class=3D"n">i0</span><span c=
lass=3D"p">)</span><span class=3D"w"></span>
<span class=3D"mi">901</span><span class=3D"w"> </span><span class=3D"k">fo=
rmat</span><span class=3D"w"> </span><span class=3D"p">(</span><span class=
=3D"n">a</span><span class=3D"p">,</span><span class=3D"n">a</span><span cl=
ass=3D"p">)</span><span class=3D"w"></span>
<span class=3D"mi">902</span><span class=3D"w"> </span><span class=3D"k">fo=
rmat</span><span class=3D"w"> </span><span class=3D"p">(</span><span class=
=3D"n">a</span><span class=3D"p">,</span><span class=3D"n">i0</span><span c=
lass=3D"p">,</span><span class=3D"n">a</span><span class=3D"p">)</span><spa=
n class=3D"w"></span>
<span class=3D"mi">903</span><span class=3D"w"> </span><span class=3D"k">fo=
rmat</span><span class=3D"w"> </span><span class=3D"p">(</span><span class=
=3D"n">a</span><span class=3D"p">,</span><span class=3D"n">f5</span><span c=
lass=3D"p">.</span><span class=3D"mi">3</span><span class=3D"p">,</span><sp=
an class=3D"n">a</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"mi">904</span><span class=3D"w"> </span><span class=3D"k">fo=
rmat</span><span class=3D"w"> </span><span class=3D"p">(</span><span class=
=3D"n">a</span><span class=3D"p">,</span><span class=3D"mi">2</span><span c=
lass=3D"p">(</span><span class=3D"n">i0</span><span class=3D"p">,</span><sp=
an class=3D"mi">1</span><span class=3D"n">x</span><span class=3D"p">,</span=
><span class=3D"s1">'x'</span><span class=3D"p">,</span><span class=3D"mi">=
1</span><span class=3D"n">x</span><span class=3D"p">),</span><span class=3D=
"n">i0</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"mi">905</span><span class=3D"w"> </span><span class=3D"k">fo=
rmat</span><span class=3D"w"> </span><span class=3D"p">(</span><span class=
=3D"n">a</span><span class=3D"p">,</span><span class=3D"n">i0</span><span c=
lass=3D"p">,</span><span class=3D"s1">'.'</span><span class=3D"p">,</span><=
span class=3D"n">i0</span><span class=3D"p">)</span><span class=3D"w"></spa=
n>
<span class=3D"mi">906</span><span class=3D"w"> </span><span class=3D"k">fo=
rmat</span><span class=3D"w"> </span><span class=3D"p">(</span><span class=
=3D"n">a</span><span class=3D"p">,</span><span class=3D"n">l0</span><span c=
lass=3D"p">)</span><span class=3D"w"></span>
<span class=3D"k">return</span>
<span class=3D"k">end</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell319">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"cuda-asynchronous-memory-transfer-example">
<h2><span class=3D"section-number">5.5. </span>CUDA Asynchronous Memory Tra=
nsfer Example<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sd=
k/archive/25.3/compilers/cuda-fortran-prog-guide/index.html#cuda-asynchrono=
us-memory-transfer-example" title=3D"Permalink to this headline">=EF=83=81<=
/a></h2>
<p>This example demonstrates how to perform asynchronous copies to and from=
 the device using the CUDA API from CUDA Fortran.</p>
<p><strong>CUDA Asynchronous Memory Transfer</strong></p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell320"><span></span><span class=3D"c">! This code demonstrates =
strategies hiding data transfers via</span>
<span class=3D"c">! asynchronous data copies in multiple streams</span>

<span class=3D"k">module </span><span class=3D"n">kernels_m</span><span cla=
ss=3D"w"></span>
<span class=3D"k">contains</span>
<span class=3D"k">  </span><span class=3D"n">attributes</span><span class=
=3D"p">(</span><span class=3D"n">global</span><span class=3D"p">)</span><sp=
an class=3D"w"> </span><span class=3D"k">subroutine </span><span class=3D"n=
">kernel</span><span class=3D"p">(</span><span class=3D"n">a</span><span cl=
ass=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">offset</span>=
<span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"k">implicit none</span>
<span class=3D"k">    </span><span class=3D"kt">real</span><span class=3D"w=
"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span class=
=3D"n">a</span><span class=3D"p">(</span><span class=3D"o">*</span><span cl=
ass=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">value</span><spa=
n class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span=
><span class=3D"n">offset</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">integer</span><span class=
=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span =
class=3D"n">i</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"kt">real</span><span class=3D"w=
"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span class=
=3D"n">c</span><span class=3D"p">,</span><span class=3D"w"> </span><span cl=
ass=3D"n">s</span><span class=3D"p">,</span><span class=3D"w"> </span><span=
 class=3D"n">x</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">i</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
n">offset</span><span class=3D"w"> </span><span class=3D"o">+</span><span c=
lass=3D"w"> </span><span class=3D"n">threadIdx</span><span class=3D"p">%</s=
pan><span class=3D"n">x</span><span class=3D"w"> </span><span class=3D"o">+=
</span><span class=3D"w"> </span><span class=3D"p">(</span><span class=3D"n=
">blockIdx</span><span class=3D"p">%</span><span class=3D"n">x</span><span =
class=3D"o">-</span><span class=3D"mi">1</span><span class=3D"p">)</span><s=
pan class=3D"o">*</span><span class=3D"n">blockDim</span><span class=3D"p">=
%</span><span class=3D"n">x</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">x</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
n">threadIdx</span><span class=3D"p">%</span><span class=3D"n">x</span><spa=
n class=3D"w"> </span><span class=3D"o">+</span><span class=3D"w"> </span><=
span class=3D"p">(</span><span class=3D"n">blockIdx</span><span class=3D"p"=
>%</span><span class=3D"n">x</span><span class=3D"o">-</span><span class=3D=
"mi">1</span><span class=3D"p">)</span><span class=3D"o">*</span><span clas=
s=3D"n">blockDim</span><span class=3D"p">%</span><span class=3D"n">x</span>=
<span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">s</span><span class=3D"w"> <=
/span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"=
nb">sin</span><span class=3D"p">(</span><span class=3D"n">x</span><span cla=
ss=3D"p">);</span><span class=3D"w"> </span><span class=3D"n">c</span><span=
 class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span>=
<span class=3D"nb">cos</span><span class=3D"p">(</span><span class=3D"n">x<=
/span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">    </span><span class=3D"n">a</span><span class=3D"p">(<=
/span><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">a</span><span class=3D"p">(</span><span class=3D"n">i</span><span cl=
ass=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">+</span><span=
 class=3D"w"> </span><span class=3D"nb">sqrt</span><span class=3D"p">(</spa=
n><span class=3D"n">s</span><span class=3D"o">**</span><span class=3D"mi">2=
</span><span class=3D"o">+</span><span class=3D"n">c</span><span class=3D"o=
">**</span><span class=3D"mi">2</span><span class=3D"p">)</span><span class=
=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">end subroutine </span><span cl=
ass=3D"n">kernel</span><span class=3D"w"></span>
<span class=3D"k">end module </span><span class=3D"n">kernels_m</span><span=
 class=3D"w"></span>

<span class=3D"k">program </span><span class=3D"n">testAsync</span><span cl=
ass=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">use </span><span class=3D"n">c=
udafor</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">use </span><span class=3D"n">k=
ernels_m</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">implicit none</span>
<span class=3D"k">  </span><span class=3D"kt">integer</span><span class=3D"=
p">,</span><span class=3D"w"> </span><span class=3D"k">parameter</span><spa=
n class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span=
><span class=3D"n">blockSize</span><span class=3D"w"> </span><span class=3D=
"o">=3D</span><span class=3D"w"> </span><span class=3D"mi">256</span><span =
class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">nStreams</s=
pan><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"=
> </span><span class=3D"mi">8</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">integer</span><span class=3D"=
p">,</span><span class=3D"w"> </span><span class=3D"k">parameter</span><spa=
n class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span=
><span class=3D"n">n</span><span class=3D"w"> </span><span class=3D"o">=3D<=
/span><span class=3D"w"> </span><span class=3D"mi">16</span><span class=3D"=
o">*</span><span class=3D"mi">1024</span><span class=3D"o">*</span><span cl=
ass=3D"n">blockSize</span><span class=3D"o">*</span><span class=3D"n">nStre=
ams</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"n">pinned</span><span clas=
s=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">allocatable</sp=
an><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w">=
 </span><span class=3D"n">a</span><span class=3D"p">(:)</span><span class=
=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"n">device</span><span clas=
s=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span=
 class=3D"n">a_d</span><span class=3D"p">(</span><span class=3D"n">n</span>=
<span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">integer</span><span class=3D"=
p">(</span><span class=3D"nb">kind</span><span class=3D"o">=3D</span><span =
class=3D"n">cuda_Stream_Kind</span><span class=3D"p">)</span><span class=3D=
"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span cla=
ss=3D"n">stream</span><span class=3D"p">(</span><span class=3D"n">nStreams<=
/span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">type</span><span class=3D"w"> =
</span><span class=3D"p">(</span><span class=3D"n">cudaEvent</span><span cl=
ass=3D"p">)</span><span class=3D"w"> </span><span class=3D"kd">::</span><sp=
an class=3D"w"> </span><span class=3D"n">startEvent</span><span class=3D"p"=
>,</span><span class=3D"w"> </span><span class=3D"n">stopEvent</span><span =
class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">dummyEvent<=
/span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"w">=
 </span><span class=3D"kd">::</span><span class=3D"w"> </span><span class=
=3D"nb">time</span>
<span class=3D"nb">  </span><span class=3D"kt">integer</span><span class=3D=
"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span cla=
ss=3D"n">i</span><span class=3D"p">,</span><span class=3D"w"> </span><span =
class=3D"n">istat</span><span class=3D"p">,</span><span class=3D"w"> </span=
><span class=3D"n">offset</span><span class=3D"p">,</span><span class=3D"w"=
> </span><span class=3D"n">streamSize</span><span class=3D"w"> </span><span=
 class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n">n</span>=
<span class=3D"o">/</span><span class=3D"n">nStreams</span><span class=3D"w=
"></span>
<span class=3D"w">  </span><span class=3D"kt">logical</span><span class=3D"=
w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span clas=
s=3D"n">pinnedFlag</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">type</span><span class=3D"w"> =
</span><span class=3D"p">(</span><span class=3D"n">cudaDeviceProp</span><sp=
an class=3D"p">)</span><span class=3D"w"> </span><span class=3D"kd">::</spa=
n><span class=3D"w"> </span><span class=3D"n">prop</span><span class=3D"w">=
</span>

<span class=3D"w">  </span><span class=3D"n">istat</span><span class=3D"w">=
 </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cudaGetDeviceProperties</span><span class=3D"p">(</span><span class=
=3D"n">prop</span><span class=3D"p">,</span><span class=3D"w"> </span><span=
 class=3D"mi">0</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">write</span><span class=3D"p">=
(</span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D"=
s2">"(' Device: ', a,/)"</span><span class=3D"p">)</span><span class=3D"w">=
 </span><span class=3D"nb">trim</span><span class=3D"p">(</span><span class=
=3D"n">prop</span><span class=3D"p">%</span><span class=3D"n">name</span><s=
pan class=3D"p">)</span><span class=3D"w"></span>

<span class=3D"w">  </span><span class=3D"c">! allocate pinned  host memory=
</span>
<span class=3D"w">  </span><span class=3D"k">allocate</span><span class=3D"=
p">(</span><span class=3D"n">a</span><span class=3D"p">(</span><span class=
=3D"n">n</span><span class=3D"p">),</span><span class=3D"w"> </span><span c=
lass=3D"nb">STAT</span><span class=3D"o">=3D</span><span class=3D"n">istat<=
/span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n"=
>PINNED</span><span class=3D"o">=3D</span><span class=3D"n">pinnedFlag</spa=
n><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">if</span><span class=3D"w"> </=
span><span class=3D"p">(</span><span class=3D"n">istat</span><span class=3D=
"w"> </span><span class=3D"o">/=3D</span><span class=3D"w"> </span><span cl=
ass=3D"mi">0</span><span class=3D"p">)</span><span class=3D"w"> </span><spa=
n class=3D"k">then</span>
<span class=3D"k">     write</span><span class=3D"p">(</span><span class=3D=
"o">*</span><span class=3D"p">,</span><span class=3D"o">*</span><span class=
=3D"p">)</span><span class=3D"w"> </span><span class=3D"s1">'Allocation of =
a failed'</span><span class=3D"w"></span>
<span class=3D"w">     </span><span class=3D"k">stop</span>
<span class=3D"k">  else</span>
<span class=3D"k">     if</span><span class=3D"w"> </span><span class=3D"p"=
>(.</span><span class=3D"nb">not</span><span class=3D"p">.</span><span clas=
s=3D"w"> </span><span class=3D"n">pinnedFlag</span><span class=3D"p">)</spa=
n><span class=3D"w"> </span><span class=3D"k">write</span><span class=3D"p"=
>(</span><span class=3D"o">*</span><span class=3D"p">,</span><span class=3D=
"o">*</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"s1">'Pinned allocation failed'</span><span class=3D"w"></span>
<span class=3D"w">     </span><span class=3D"k">end if</span><span class=3D=
"w"></span>

<span class=3D"w">  </span><span class=3D"c">! create events and streams</s=
pan>
<span class=3D"w">  </span><span class=3D"n">istat</span><span class=3D"w">=
 </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cudaEventCreate</span><span class=3D"p">(</span><span class=3D"n">st=
artEvent</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">istat</span><span class=3D"w">=
 </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cudaEventCreate</span><span class=3D"p">(</span><span class=3D"n">st=
opEvent</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">istat</span><span class=3D"w">=
 </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cudaEventCreate</span><span class=3D"p">(</span><span class=3D"n">du=
mmyEvent</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">do </span><span class=3D"n">i<=
/span><span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"=
w"> </span><span class=3D"mi">1</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"n">nStreams</span><span class=3D"w"></span>
<span class=3D"w">     </span><span class=3D"n">istat</span><span class=3D"=
w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span clas=
s=3D"n">cudaStreamCreate</span><span class=3D"p">(</span><span class=3D"n">=
stream</span><span class=3D"p">(</span><span class=3D"n">i</span><span clas=
s=3D"p">))</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">enddo</span><span class=3D"w">=
</span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell320">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell321"><span></span><span class=3D"c">! baseline case - sequent=
ial transfer and execute</span>
<span class=3D"n">a</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"mi">0</span><span class=3D"w"=
></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaEventRecord</span=
><span class=3D"p">(</span><span class=3D"n">startEvent</span><span class=
=3D"p">,</span><span class=3D"mi">0</span><span class=3D"p">)</span><span c=
lass=3D"w"></span>

<span class=3D"n">a_d</span><span class=3D"w"> </span><span class=3D"o">=3D=
</span><span class=3D"w"> </span><span class=3D"n">a</span><span class=3D"w=
"></span>
<span class=3D"k">call </span><span class=3D"n">kernel</span><span class=3D=
"o">&lt;&lt;&lt;</span><span class=3D"n">n</span><span class=3D"o">/</span>=
<span class=3D"n">blockSize</span><span class=3D"p">,</span><span class=3D"=
w"> </span><span class=3D"n">blockSize</span><span class=3D"o">&gt;&gt;&gt;=
</span><span class=3D"p">(</span><span class=3D"n">a_d</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"mi">0</span><span clas=
s=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">a</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">a_d</span><span class=3D"w=
"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaEventRecord</span=
><span class=3D"p">(</span><span class=3D"n">stopEvent</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"mi">0</span><span clas=
s=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaEventSynchronize<=
/span><span class=3D"p">(</span><span class=3D"n">stopEvent</span><span cla=
ss=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaEventElapsedTime<=
/span><span class=3D"p">(</span><span class=3D"nb">time</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">startEvent</span=
><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">stop=
Event</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"k">write</span><span class=3D"p">(</span><span class=3D"o">*=
</span><span class=3D"p">,</span><span class=3D"o">*</span><span class=3D"p=
">)</span><span class=3D"w"> </span><span class=3D"s1">'Time for sequential=
 transfer and execute (ms): '</span><span class=3D"p">,</span><span class=
=3D"w"> </span><span class=3D"nb">time</span>
<span class=3D"k">write</span><span class=3D"p">(</span><span class=3D"o">*=
</span><span class=3D"p">,</span><span class=3D"o">*</span><span class=3D"p=
">)</span><span class=3D"w"> </span><span class=3D"s1">'  max error: '</spa=
n><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"nb">ma=
xval</span><span class=3D"p">(</span><span class=3D"nb">abs</span><span cla=
ss=3D"p">(</span><span class=3D"n">a</span><span class=3D"o">-</span><span =
class=3D"mf">1.0</span><span class=3D"p">))</span><span class=3D"w"></span>

<span class=3D"c">! asynchronous version 1: loop over {copy, kernel, copy}<=
/span>
<span class=3D"n">a</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"mi">0</span><span class=3D"w"=
></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaEventRecord</span=
><span class=3D"p">(</span><span class=3D"n">startEvent</span><span class=
=3D"p">,</span><span class=3D"mi">0</span><span class=3D"p">)</span><span c=
lass=3D"w"></span>

<span class=3D"k">do </span><span class=3D"n">i</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"m=
i">1</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">nStreams</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">offset</span><span class=3D"w=
"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"p">(</span><span class=3D"n">i</span><span class=3D"o">-</span><span cl=
ass=3D"mi">1</span><span class=3D"p">)</span><span class=3D"o">*</span><spa=
n class=3D"n">streamSize</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">istat</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cudaMemcpyAsync</span><span class=3D"p">(</span><span class=3D"n">a_=
d</span><span class=3D"p">(</span><span class=3D"n">offset</span><span clas=
s=3D"o">+</span><span class=3D"mi">1</span><span class=3D"p">),</span><span=
 class=3D"n">a</span><span class=3D"p">(</span><span class=3D"n">offset</sp=
an><span class=3D"o">+</span><span class=3D"mi">1</span><span class=3D"p">)=
,</span><span class=3D"n">streamSize</span><span class=3D"p">,</span><span =
class=3D"n">stream</span><span class=3D"p">(</span><span class=3D"n">i</spa=
n><span class=3D"p">))</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"k">call </span><span class=3D"n"=
>kernel</span><span class=3D"o">&lt;&lt;&lt;</span><span class=3D"n">stream=
Size</span><span class=3D"o">/</span><span class=3D"n">blockSize</span><spa=
n class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">blockSize=
</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"p=
">&amp;</span><span class=3D"w"></span>
<span class=3D"w">                 </span><span class=3D"mi">0</span><span =
class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">stream</spa=
n><span class=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">)</=
span><span class=3D"o">&gt;&gt;&gt;</span><span class=3D"p">(</span><span c=
lass=3D"n">a_d</span><span class=3D"p">,</span><span class=3D"n">offset</sp=
an><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">istat</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cudaMemcpyAsync</span><span class=3D"p">(</span><span class=3D"n">a<=
/span><span class=3D"p">(</span><span class=3D"n">offset</span><span class=
=3D"o">+</span><span class=3D"mi">1</span><span class=3D"p">),</span><span =
class=3D"n">a_d</span><span class=3D"p">(</span><span class=3D"n">offset</s=
pan><span class=3D"o">+</span><span class=3D"mi">1</span><span class=3D"p">=
),</span><span class=3D"n">streamSize</span><span class=3D"p">,</span><span=
 class=3D"n">stream</span><span class=3D"p">(</span><span class=3D"n">i</sp=
an><span class=3D"p">))</span><span class=3D"w"></span>
<span class=3D"k">enddo</span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaEventRecord</span=
><span class=3D"p">(</span><span class=3D"n">stopEvent</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"mi">0</span><span clas=
s=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaEventSynchronize<=
/span><span class=3D"p">(</span><span class=3D"n">stopEvent</span><span cla=
ss=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaEventElapsedTime<=
/span><span class=3D"p">(</span><span class=3D"nb">time</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">startEvent</span=
><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">stop=
Event</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"k">write</span><span class=3D"p">(</span><span class=3D"o">*=
</span><span class=3D"p">,</span><span class=3D"o">*</span><span class=3D"p=
">)</span><span class=3D"w"> </span><span class=3D"s1">'Time for asynchrono=
us V1 transfer and execute (ms): '</span><span class=3D"p">,</span><span cl=
ass=3D"w"> </span><span class=3D"nb">time</span>
<span class=3D"k">write</span><span class=3D"p">(</span><span class=3D"o">*=
</span><span class=3D"p">,</span><span class=3D"o">*</span><span class=3D"p=
">)</span><span class=3D"w"> </span><span class=3D"s1">'  max error: '</spa=
n><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"nb">ma=
xval</span><span class=3D"p">(</span><span class=3D"nb">abs</span><span cla=
ss=3D"p">(</span><span class=3D"n">a</span><span class=3D"o">-</span><span =
class=3D"mf">1.0</span><span class=3D"p">))</span><span class=3D"w"></span>

<span class=3D"c">! asynchronous version 2:</span>
<span class=3D"c">! loop over copy, loop over kernel, loop over copy</span>
<span class=3D"n">a</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"mi">0</span><span class=3D"w"=
></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaEventRecord</span=
><span class=3D"p">(</span><span class=3D"n">startEvent</span><span class=
=3D"p">,</span><span class=3D"mi">0</span><span class=3D"p">)</span><span c=
lass=3D"w"></span>
<span class=3D"k">do </span><span class=3D"n">i</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"m=
i">1</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">nStreams</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">offset</span><span class=3D"w=
"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"p">(</span><span class=3D"n">i</span><span class=3D"o">-</span><span cl=
ass=3D"mi">1</span><span class=3D"p">)</span><span class=3D"o">*</span><spa=
n class=3D"n">streamSize</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">istat</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cudaMemcpyAsync</span><span class=3D"p">(</span><span class=3D"n">a_=
d</span><span class=3D"p">(</span><span class=3D"n">offset</span><span clas=
s=3D"o">+</span><span class=3D"mi">1</span><span class=3D"p">),</span><span=
 class=3D"n">a</span><span class=3D"p">(</span><span class=3D"n">offset</sp=
an><span class=3D"o">+</span><span class=3D"mi">1</span><span class=3D"p">)=
,</span><span class=3D"n">streamSize</span><span class=3D"p">,</span><span =
class=3D"n">stream</span><span class=3D"p">(</span><span class=3D"n">i</spa=
n><span class=3D"p">))</span><span class=3D"w"></span>
<span class=3D"k">enddo</span>
<span class=3D"k">do </span><span class=3D"n">i</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"m=
i">1</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">nStreams</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">offset</span><span class=3D"w=
"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"p">(</span><span class=3D"n">i</span><span class=3D"o">-</span><span cl=
ass=3D"mi">1</span><span class=3D"p">)</span><span class=3D"o">*</span><spa=
n class=3D"n">streamSize</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"k">call </span><span class=3D"n"=
>kernel</span><span class=3D"o">&lt;&lt;&lt;</span><span class=3D"n">stream=
Size</span><span class=3D"o">/</span><span class=3D"n">blockSize</span><spa=
n class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">blockSize=
</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"p=
">&amp;</span><span class=3D"w"></span>
<span class=3D"w">                 </span><span class=3D"mi">0</span><span =
class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">stream</spa=
n><span class=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">)</=
span><span class=3D"o">&gt;&gt;&gt;</span><span class=3D"p">(</span><span c=
lass=3D"n">a_d</span><span class=3D"p">,</span><span class=3D"n">offset</sp=
an><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"k">enddo</span>
<span class=3D"k">do </span><span class=3D"n">i</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"m=
i">1</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">nStreams</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">offset</span><span class=3D"w=
"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"p">(</span><span class=3D"n">i</span><span class=3D"o">-</span><span cl=
ass=3D"mi">1</span><span class=3D"p">)</span><span class=3D"o">*</span><spa=
n class=3D"n">streamSize</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">istat</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cudaMemcpyAsync</span><span class=3D"p">(</span><span class=3D"n">a<=
/span><span class=3D"p">(</span><span class=3D"n">offset</span><span class=
=3D"o">+</span><span class=3D"mi">1</span><span class=3D"p">),</span><span =
class=3D"n">a_d</span><span class=3D"p">(</span><span class=3D"n">offset</s=
pan><span class=3D"o">+</span><span class=3D"mi">1</span><span class=3D"p">=
),</span><span class=3D"n">streamSize</span><span class=3D"p">,</span><span=
 class=3D"n">stream</span><span class=3D"p">(</span><span class=3D"n">i</sp=
an><span class=3D"p">))</span><span class=3D"w"></span>
<span class=3D"k">enddo</span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaEventRecord</span=
><span class=3D"p">(</span><span class=3D"n">stopEvent</span><span class=3D=
"p">,</span><span class=3D"w"> </span><span class=3D"mi">0</span><span clas=
s=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaEventSynchronize<=
/span><span class=3D"p">(</span><span class=3D"n">stopEvent</span><span cla=
ss=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaEventElapsedTime<=
/span><span class=3D"p">(</span><span class=3D"nb">time</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">startEvent</span=
><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">stop=
Event</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"k">write</span><span class=3D"p">(</span><span class=3D"o">*=
</span><span class=3D"p">,</span><span class=3D"o">*</span><span class=3D"p=
">)</span><span class=3D"w"> </span><span class=3D"s1">'Time for asynchrono=
us V2 transfer and execute (ms): '</span><span class=3D"p">,</span><span cl=
ass=3D"w"> </span><span class=3D"nb">time</span>
<span class=3D"k">write</span><span class=3D"p">(</span><span class=3D"o">*=
</span><span class=3D"p">,</span><span class=3D"o">*</span><span class=3D"p=
">)</span><span class=3D"w"> </span><span class=3D"s1">'  max error: '</spa=
n><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"nb">ma=
xval</span><span class=3D"p">(</span><span class=3D"nb">abs</span><span cla=
ss=3D"p">(</span><span class=3D"n">a</span><span class=3D"o">-</span><span =
class=3D"mf">1.0</span><span class=3D"p">))</span><span class=3D"w"></span>

<span class=3D"c">! cleanup</span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaEventDestroy</spa=
n><span class=3D"p">(</span><span class=3D"n">startEvent</span><span class=
=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaEventDestroy</spa=
n><span class=3D"p">(</span><span class=3D"n">stopEvent</span><span class=
=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaEventDestroy</spa=
n><span class=3D"p">(</span><span class=3D"n">dummyEvent</span><span class=
=3D"p">)</span><span class=3D"w"></span>

<span class=3D"k">do </span><span class=3D"n">i</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"m=
i">1</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"n">nStreams</span><span class=3D"w"></span>
<span class=3D"w">   </span><span class=3D"n">istat</span><span class=3D"w"=
> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=
=3D"n">cudaStreamDestroy</span><span class=3D"p">(</span><span class=3D"n">=
stream</span><span class=3D"p">(</span><span class=3D"n">i</span><span clas=
s=3D"p">))</span><span class=3D"w"></span>
<span class=3D"k">enddo</span>
<span class=3D"k">deallocate</span><span class=3D"p">(</span><span class=3D=
"n">a</span><span class=3D"p">)</span><span class=3D"w"></span>

<span class=3D"k">end program </span><span class=3D"n">testAsync</span><spa=
n class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell321">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"managed-memory-example">
<h2><span class=3D"section-number">5.6. </span>Managed Memory Example<a cla=
ss=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/comp=
ilers/cuda-fortran-prog-guide/index.html#managed-memory-example" title=3D"P=
ermalink to this headline">=EF=83=81</a></h2>
<p>This example demonstrates the use of CUDA managed memory in an OpenMP pr=
ogram. In the main program, one stream is created for each OpenMP thread. A=
 call to cudaforSetDefaultStream is made to set that as the default stream =
for all subsequent high-level language constructs. The default stream is us=
ed explicitly in the launch configuration of the CUF kernel, and also as th=
e thread=E2=80=99s input argument for synchronization. Once the cudaStreamS=
ynchronize has occurred, this thread can safely access the managed data on =
the host, in this case in the any() function, even while other threads may =
be in the middle of their kernel launch.</p>
<p><strong>Managed Memory and OpenMP in CUDA Fortran</strong></p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell322"><span></span><span class=3D"k">program </span><span clas=
s=3D"n">ompcuf</span><span class=3D"w"></span>
<span class=3D"k">use </span><span class=3D"n">cudafor</span><span class=3D=
"w"></span>
<span class=3D"k">use </span><span class=3D"n">omp_lib</span><span class=3D=
"w"></span>
<span class=3D"kt">integer</span><span class=3D"p">(</span><span class=3D"n=
b">kind</span><span class=3D"o">=3D</span><span class=3D"n">cuda_stream_kin=
d</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"=
kd">::</span><span class=3D"w"> </span><span class=3D"n">mystream</span><sp=
an class=3D"w"></span>

<span class=3D"c">!$omp parallel private(istat,mystream)</span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaStreamCreate</spa=
n><span class=3D"p">(</span><span class=3D"n">mystream</span><span class=3D=
"p">)</span><span class=3D"w"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaforSetDefaultstre=
am</span><span class=3D"p">(</span><span class=3D"n">mystream</span><span c=
lass=3D"p">)</span><span class=3D"w"></span>
<span class=3D"k">call </span><span class=3D"n">ompworker</span><span class=
=3D"p">()</span><span class=3D"w"></span>
<span class=3D"c">!$omp end parallel</span>
<span class=3D"k">end</span>

<span class=3D"k">subroutine </span><span class=3D"n">ompworker</span><span=
 class=3D"p">()</span><span class=3D"w"></span>
<span class=3D"k">use </span><span class=3D"n">cudafor</span><span class=3D=
"w"></span>
<span class=3D"k">use </span><span class=3D"n">omp_lib</span><span class=3D=
"w"></span>
<span class=3D"kt">real</span><span class=3D"p">,</span><span class=3D"w"> =
</span><span class=3D"n">managed</span><span class=3D"w"> </span><span clas=
s=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">a</span><span=
 class=3D"p">(</span><span class=3D"mi">10000</span><span class=3D"p">)</sp=
an><span class=3D"w"></span>
<span class=3D"n">j</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"n">omp_get_thread_num</span><=
span class=3D"p">()</span><span class=3D"w"></span>
<span class=3D"n">a</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"kt">real</span><span class=3D=
"p">(</span><span class=3D"n">j</span><span class=3D"p">)</span><span class=
=3D"w"></span>

<span class=3D"c">!$cuf kernel do &lt;&lt;&lt; *, *, stream=3DcudaforGetDef=
aultStream() &gt;&gt;&gt;</span>
<span class=3D"k">do </span><span class=3D"n">i</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"m=
i">1</span><span class=3D"p">,</span><span class=3D"w"> </span><span class=
=3D"mi">10000</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">a</span><span class=3D"p">(</s=
pan><span class=3D"n">i</span><span class=3D"p">)</span><span class=3D"w"> =
</span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D=
"n">a</span><span class=3D"p">(</span><span class=3D"n">i</span><span class=
=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">+</span><span cl=
ass=3D"w"> </span><span class=3D"mf">1.0</span><span class=3D"w"></span>
<span class=3D"k">end do</span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaStreamSynchronize=
</span><span class=3D"p">(</span><span class=3D"n">cudaforGetDefaultStream<=
/span><span class=3D"p">())</span><span class=3D"w"></span>

<span class=3D"k">if</span><span class=3D"w"> </span><span class=3D"p">(</s=
pan><span class=3D"nb">any</span><span class=3D"p">(</span><span class=3D"n=
">a</span><span class=3D"p">.</span><span class=3D"n">ne</span><span class=
=3D"p">.</span><span class=3D"kt">real</span><span class=3D"p">(</span><spa=
n class=3D"n">j</span><span class=3D"o">+</span><span class=3D"mi">1</span>=
<span class=3D"p">)))</span><span class=3D"w"> </span><span class=3D"k">the=
n</span>
<span class=3D"k">  print</span><span class=3D"w"> </span><span class=3D"o"=
>*</span><span class=3D"p">,</span><span class=3D"s2">"Found error on "</sp=
an><span class=3D"p">,</span><span class=3D"n">j</span><span class=3D"w"></=
span>
<span class=3D"k">else</span>
<span class=3D"k">  print</span><span class=3D"w"> </span><span class=3D"o"=
>*</span><span class=3D"p">,</span><span class=3D"s2">"Looks good on "</spa=
n><span class=3D"p">,</span><span class=3D"n">j</span><span class=3D"w"></s=
pan>
<span class=3D"k">endif</span>
<span class=3D"k">end</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell322">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"wmma-tensor-core-example">
<h2><span class=3D"section-number">5.7. </span>WMMA Tensor Core Example<a c=
lass=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/co=
mpilers/cuda-fortran-prog-guide/index.html#wmma-tensor-core-example" title=
=3D"Permalink to this headline">=EF=83=81</a></h2>
<p>This example demonstrates the use of NVIDIA Volta tensor cores to perfor=
m real(2) matrix multiply. The result is a real(4) matrix. This example uti=
lizes the definitions in <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">cuf_macros.CUF</span></code>, a file which is shipped in the=
 examples directory of the NVIDIA packages. The actual derived types curren=
tly used in Fortran tensor core programming may change at a later date, but=
 these macros will always be supported. The program shows the use of the Fo=
rtran real(2) data type, both in host and device code. Further examples, hi=
ghlighting overloaded device functions which take the <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">WMMASubMatrix</span></code> typ=
es, and which use a vector of real(2) data for improved performance, can be=
 found in the examples directory of NVIDIA packages.</p>
<p><strong>Tensor Core Programming in CUDA Fortran</strong></p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell323"><span></span><span class=3D"cp">#include "cuf_macros.CUF=
"</span>

<span class=3D"k">module </span><span class=3D"n">params</span><span class=
=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">integer</span><span class=3D"=
p">,</span><span class=3D"w"> </span><span class=3D"k">parameter</span><spa=
n class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span=
><span class=3D"n">m</span><span class=3D"w"> </span><span class=3D"o">=3D<=
/span><span class=3D"w"> </span><span class=3D"mi">16</span><span class=3D"=
w"></span>
<span class=3D"w">  </span><span class=3D"kt">integer</span><span class=3D"=
p">,</span><span class=3D"w"> </span><span class=3D"k">parameter</span><spa=
n class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span=
><span class=3D"n">n</span><span class=3D"w"> </span><span class=3D"o">=3D<=
/span><span class=3D"w"> </span><span class=3D"mi">16</span><span class=3D"=
w"></span>
<span class=3D"w">  </span><span class=3D"kt">integer</span><span class=3D"=
p">,</span><span class=3D"w"> </span><span class=3D"k">parameter</span><spa=
n class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span=
><span class=3D"n">k</span><span class=3D"w"> </span><span class=3D"o">=3D<=
/span><span class=3D"w"> </span><span class=3D"mi">16</span><span class=3D"=
w"></span>
<span class=3D"k">end module</span>

<span class=3D"k">module </span><span class=3D"n">mod1</span><span class=3D=
"w"></span>
<span class=3D"k">use </span><span class=3D"n">params</span><span class=3D"=
w">  </span><span class=3D"c">! Define matrix m, n, k</span>
<span class=3D"k">contains</span>
<span class=3D"k">  </span><span class=3D"n">attributes</span><span class=
=3D"p">(</span><span class=3D"n">global</span><span class=3D"p">)</span><sp=
an class=3D"w"> </span><span class=3D"k">subroutine </span><span class=3D"n=
">test1</span><span class=3D"p">(</span><span class=3D"n">a</span><span cla=
ss=3D"p">,</span><span class=3D"n">b</span><span class=3D"p">,</span><span =
class=3D"n">c</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">use </span><span class=3D"n">w=
mma</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
(</span><span class=3D"mi">2</span><span class=3D"p">),</span><span class=
=3D"w"> </span><span class=3D"n">device</span><span class=3D"w"> </span><sp=
an class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">a</spa=
n><span class=3D"p">(</span><span class=3D"n">m</span><span class=3D"p">,</=
span><span class=3D"n">k</span><span class=3D"p">)</span><span class=3D"w">=
</span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
(</span><span class=3D"mi">2</span><span class=3D"p">),</span><span class=
=3D"w"> </span><span class=3D"n">device</span><span class=3D"w"> </span><sp=
an class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">b</spa=
n><span class=3D"p">(</span><span class=3D"n">k</span><span class=3D"p">,</=
span><span class=3D"n">n</span><span class=3D"p">)</span><span class=3D"w">=
</span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
(</span><span class=3D"mi">4</span><span class=3D"p">),</span><span class=
=3D"w"> </span><span class=3D"n">device</span><span class=3D"w"> </span><sp=
an class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">c</spa=
n><span class=3D"p">(</span><span class=3D"n">m</span><span class=3D"p">,</=
span><span class=3D"n">n</span><span class=3D"p">)</span><span class=3D"w">=
</span>
<span class=3D"w">  </span><span class=3D"n">WMMASubMatrix</span><span clas=
s=3D"p">(</span><span class=3D"n">WMMAMatrixA</span><span class=3D"p">,</sp=
an><span class=3D"w"> </span><span class=3D"mi">16</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"mi">16</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"mi">16</span><span =
class=3D"p">,</span><span class=3D"w"> </span><span class=3D"kt">Real</span=
><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">WMMA=
ColMajor</span><span class=3D"p">)</span><span class=3D"w"> </span><span cl=
ass=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">sa</span><s=
pan class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">WMMASubMatrix</span><span clas=
s=3D"p">(</span><span class=3D"n">WMMAMatrixB</span><span class=3D"p">,</sp=
an><span class=3D"w"> </span><span class=3D"mi">16</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"mi">16</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"mi">16</span><span =
class=3D"p">,</span><span class=3D"w"> </span><span class=3D"kt">Real</span=
><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">WMMA=
ColMajor</span><span class=3D"p">)</span><span class=3D"w"> </span><span cl=
ass=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">sb</span><s=
pan class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">WMMASubMatrix</span><span clas=
s=3D"p">(</span><span class=3D"n">WMMAMatrixC</span><span class=3D"p">,</sp=
an><span class=3D"w"> </span><span class=3D"mi">16</span><span class=3D"p">=
,</span><span class=3D"w"> </span><span class=3D"mi">16</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"mi">16</span><span =
class=3D"p">,</span><span class=3D"w"> </span><span class=3D"kt">Real</span=
><span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">WMMA=
Kind4</span><span class=3D"p">)</span><span class=3D"w">    </span><span cl=
ass=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">sc</span><s=
pan class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">sc</span><span class=3D"w"> </=
span><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"m=
f">0.0</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">call </span><span class=3D"n">=
wmmaLoadMatrix</span><span class=3D"p">(</span><span class=3D"n">sa</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">a</spa=
n><span class=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p">,<=
/span><span class=3D"mi">1</span><span class=3D"p">),</span><span class=3D"=
w"> </span><span class=3D"n">m</span><span class=3D"p">)</span><span class=
=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">call </span><span class=3D"n">=
wmmaLoadMatrix</span><span class=3D"p">(</span><span class=3D"n">sb</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">b</spa=
n><span class=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p">,<=
/span><span class=3D"mi">1</span><span class=3D"p">),</span><span class=3D"=
w"> </span><span class=3D"n">k</span><span class=3D"p">)</span><span class=
=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">call </span><span class=3D"n">=
wmmaMatmul</span><span class=3D"p">(</span><span class=3D"n">sc</span><span=
 class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">sa</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">sb</sp=
an><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">call </span><span class=3D"n">=
wmmaStoreMatrix</span><span class=3D"p">(</span><span class=3D"n">c</span><=
span class=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p">,</sp=
an><span class=3D"mi">1</span><span class=3D"p">),</span><span class=3D"w">=
 </span><span class=3D"n">sc</span><span class=3D"p">,</span><span class=3D=
"w"> </span><span class=3D"n">m</span><span class=3D"p">)</span><span class=
=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">end subroutine</span>
<span class=3D"k">end module</span>

<span class=3D"k">program </span><span class=3D"n">main</span><span class=
=3D"w"></span>
<span class=3D"k">use </span><span class=3D"n">cudafor</span><span class=3D=
"w"></span>
<span class=3D"k">use </span><span class=3D"n">mod1</span><span class=3D"w"=
></span>
<span class=3D"kt">real</span><span class=3D"p">(</span><span class=3D"mi">=
2</span><span class=3D"p">),</span><span class=3D"w"> </span><span class=3D=
"n">managed</span><span class=3D"w"> </span><span class=3D"kd">::</span><sp=
an class=3D"w"> </span><span class=3D"n">a</span><span class=3D"p">(</span>=
<span class=3D"n">m</span><span class=3D"p">,</span><span class=3D"n">k</sp=
an><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"kt">real</span><span class=3D"p">(</span><span class=3D"mi">=
2</span><span class=3D"p">),</span><span class=3D"w"> </span><span class=3D=
"n">managed</span><span class=3D"w"> </span><span class=3D"kd">::</span><sp=
an class=3D"w"> </span><span class=3D"n">b</span><span class=3D"p">(</span>=
<span class=3D"n">k</span><span class=3D"p">,</span><span class=3D"n">n</sp=
an><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"kt">real</span><span class=3D"p">(</span><span class=3D"mi">=
4</span><span class=3D"p">),</span><span class=3D"w"> </span><span class=3D=
"n">managed</span><span class=3D"w"> </span><span class=3D"kd">::</span><sp=
an class=3D"w"> </span><span class=3D"n">c</span><span class=3D"p">(</span>=
<span class=3D"n">m</span><span class=3D"p">,</span><span class=3D"n">n</sp=
an><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">a</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"kt">real</span><span class=3D=
"p">(</span><span class=3D"mf">1.0</span><span class=3D"p">,</span><span cl=
ass=3D"nb">kind</span><span class=3D"o">=3D</span><span class=3D"mi">2</spa=
n><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">b</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"mf">2.0_2</span><span class=
=3D"w"></span>
<span class=3D"n">c</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"mf">0.0</span><span class=3D"=
w"></span>
<span class=3D"k">call </span><span class=3D"n">test1</span><span class=3D"=
w"> </span><span class=3D"o">&lt;&lt;&lt;</span><span class=3D"mi">1</span>=
<span class=3D"p">,</span><span class=3D"mi">32</span><span class=3D"o">&gt=
;&gt;&gt;</span><span class=3D"w"> </span><span class=3D"p">(</span><span c=
lass=3D"n">a</span><span class=3D"p">,</span><span class=3D"n">b</span><spa=
n class=3D"p">,</span><span class=3D"n">c</span><span class=3D"p">)</span><=
span class=3D"w"></span>
<span class=3D"n">istat</span><span class=3D"w"> </span><span class=3D"o">=
=3D</span><span class=3D"w"> </span><span class=3D"n">cudaDeviceSynchronize=
</span><span class=3D"p">()</span><span class=3D"w"></span>
<span class=3D"k">print</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"p">,</span><span class=3D"k">all</span><span class=3D=
"p">(</span><span class=3D"n">c</span><span class=3D"p">.</span><span class=
=3D"n">eq</span><span class=3D"p">.</span><span class=3D"mi">2</span><span =
class=3D"o">*</span><span class=3D"n">k</span><span class=3D"p">)</span><sp=
an class=3D"w"></span>
<span class=3D"k">end program</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell323">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
</section>
<section id=3D"openacc-interoperability-example">
<h2><span class=3D"section-number">5.8. </span>OpenACC Interoperability Exa=
mple<a class=3D"headerlink" href=3D"https://docs.nvidia.com/hpc-sdk/archive=
/25.3/compilers/cuda-fortran-prog-guide/index.html#openacc-interoperability=
-example" title=3D"Permalink to this headline">=EF=83=81</a></h2>
<p>This example demonstrates two ways that CUDA Fortran and OpenACC can be =
used together in the same program, both in sharing data, and in control flo=
w. At the lowest level, we have slightly modified the BLAS daxpy subroutine=
 by inserting it in a module, making it an OpenACC vector routine, and addi=
ng OpenACC vector loop directives. The second file contains pure CUDA Fortr=
an, a global subroutine which calls daxpy with the same arguments for each =
thread block. At the highest level, we have a Fortran main program which us=
es OpenACC for data management, but calls both a CUDA Fortran global functi=
on and overloaded CUDA Fortran reductions via the host_data directive. This=
 directive instructs the compiler to pass the corresponding device pointers=
, which are managed implicitly by the OpenACC runtime, for the x and y argu=
ments.</p>
<p><strong>Mixing CUDA Fortran and OpenACC</strong></p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell324"><span></span><span class=3D"w">      </span><span class=
=3D"k">module </span><span class=3D"n">daxpy_mod</span><span class=3D"w"></=
span>
<span class=3D"w">      </span><span class=3D"k">contains</span>
<span class=3D"k">      subroutine </span><span class=3D"n">daxpy</span><sp=
an class=3D"p">(</span><span class=3D"n">n</span><span class=3D"p">,</span>=
<span class=3D"n">da</span><span class=3D"p">,</span><span class=3D"n">dx</=
span><span class=3D"p">,</span><span class=3D"n">incx</span><span class=3D"=
p">,</span><span class=3D"n">dy</span><span class=3D"p">,</span><span class=
=3D"n">incy</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"c">!$acc routine vector nohost</span>
<span class=3D"c">!</span>
<span class=3D"c">!     constant times a vector plus a vector.</span>
<span class=3D"c">!     uses unrolled loops for increments equal to one.</s=
pan>
<span class=3D"c">!     jack dongarra, linpack, 3/11/78.</span>
<span class=3D"c">!     modified 12/3/93, array(1) declarations changed to =
array(*)</span>
<span class=3D"c">!</span>
<span class=3D"w">      </span><span class=3D"kt">integer</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">value</span><spa=
n class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span=
><span class=3D"n">n</span><span class=3D"p">,</span><span class=3D"w"> </s=
pan><span class=3D"n">incx</span><span class=3D"p">,</span><span class=3D"w=
"> </span><span class=3D"n">incy</span><span class=3D"w"></span>
<span class=3D"w">      </span><span class=3D"kt">double precision</span><s=
pan class=3D"p">,</span><span class=3D"w"> </span><span class=3D"k">value</=
span><span class=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w=
">  </span><span class=3D"n">da</span><span class=3D"w"></span>
<span class=3D"w">      </span><span class=3D"kt">double precision </span><=
span class=3D"n">dx</span><span class=3D"p">(</span><span class=3D"o">*</sp=
an><span class=3D"p">),</span><span class=3D"n">dy</span><span class=3D"p">=
(</span><span class=3D"o">*</span><span class=3D"p">)</span><span class=3D"=
w"></span>
<span class=3D"w">      </span><span class=3D"kt">integer </span><span clas=
s=3D"n">i</span><span class=3D"p">,</span><span class=3D"n">ix</span><span =
class=3D"p">,</span><span class=3D"n">iy</span><span class=3D"w"></span>
<span class=3D"c">!</span>
<span class=3D"w">      </span><span class=3D"k">if</span><span class=3D"p"=
>(</span><span class=3D"n">n</span><span class=3D"p">.</span><span class=3D=
"n">le</span><span class=3D"p">.</span><span class=3D"mi">0</span><span cla=
ss=3D"p">)</span><span class=3D"k">return</span>
<span class=3D"k">      if</span><span class=3D"w"> </span><span class=3D"p=
">(</span><span class=3D"n">da</span><span class=3D"w"> </span><span class=
=3D"p">.</span><span class=3D"n">eq</span><span class=3D"p">.</span><span c=
lass=3D"w"> </span><span class=3D"mf">0.0d0</span><span class=3D"p">)</span=
><span class=3D"w"> </span><span class=3D"k">return</span>
<span class=3D"k">      if</span><span class=3D"p">(</span><span class=3D"n=
">incx</span><span class=3D"p">.</span><span class=3D"n">eq</span><span cla=
ss=3D"p">.</span><span class=3D"mf">1.</span><span class=3D"nb">and</span><=
span class=3D"p">.</span><span class=3D"n">incy</span><span class=3D"p">.</=
span><span class=3D"n">eq</span><span class=3D"p">.</span><span class=3D"mi=
">1</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=
=3D"k">then</span><span class=3D"w"></span>
<span class=3D"c">!</span>
<span class=3D"c">!        code for both increments equal to 1</span>
<span class=3D"c">!</span>
<span class=3D"c">!$acc loop vector</span>
<span class=3D"w">        </span><span class=3D"k">do </span><span class=3D=
"n">i</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span cla=
ss=3D"w"> </span><span class=3D"mi">1</span><span class=3D"p">,</span><span=
 class=3D"w"> </span><span class=3D"n">n</span><span class=3D"w"></span>
<span class=3D"w">          </span><span class=3D"n">dy</span><span class=
=3D"p">(</span><span class=3D"n">i</span><span class=3D"p">)</span><span cl=
ass=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><sp=
an class=3D"n">dy</span><span class=3D"p">(</span><span class=3D"n">i</span=
><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">+</s=
pan><span class=3D"w"> </span><span class=3D"n">da</span><span class=3D"o">=
*</span><span class=3D"n">dx</span><span class=3D"p">(</span><span class=3D=
"n">i</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">        </span><span class=3D"k">end do</span>
<span class=3D"k">      else</span><span class=3D"w"></span>
<span class=3D"c">!</span>
<span class=3D"c">!        code for unequal increments or equal increments<=
/span>
<span class=3D"c">!          not equal to 1</span>
<span class=3D"c">!</span>
<span class=3D"c">!$acc loop vector</span>
<span class=3D"w">        </span><span class=3D"k">do </span><span class=3D=
"n">i</span><span class=3D"w"> </span><span class=3D"o">=3D</span><span cla=
ss=3D"w"> </span><span class=3D"mi">1</span><span class=3D"p">,</span><span=
 class=3D"w"> </span><span class=3D"n">n</span><span class=3D"w"></span>
<span class=3D"w">          </span><span class=3D"k">if</span><span class=
=3D"p">(</span><span class=3D"n">incx</span><span class=3D"p">.</span><span=
 class=3D"n">lt</span><span class=3D"p">.</span><span class=3D"mi">0</span>=
<span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"k">then<=
/span>
<span class=3D"k">            </span><span class=3D"n">ix</span><span class=
=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span =
class=3D"mi">1</span><span class=3D"w"> </span><span class=3D"o">+</span><s=
pan class=3D"w"> </span><span class=3D"p">(</span><span class=3D"o">-</span=
><span class=3D"n">n</span><span class=3D"o">+</span><span class=3D"n">i</s=
pan><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"w"> </span><span class=3D"n">incx</span><span class=
=3D"w"></span>
<span class=3D"w">          </span><span class=3D"k">else</span>
<span class=3D"k">            </span><span class=3D"n">ix</span><span class=
=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span =
class=3D"mi">1</span><span class=3D"w"> </span><span class=3D"o">+</span><s=
pan class=3D"w"> </span><span class=3D"p">(</span><span class=3D"n">i</span=
><span class=3D"o">-</span><span class=3D"mi">1</span><span class=3D"p">)</=
span><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"w">=
 </span><span class=3D"n">incx</span><span class=3D"w"></span>
<span class=3D"w">          </span><span class=3D"k">end if</span>
<span class=3D"k">          if</span><span class=3D"p">(</span><span class=
=3D"n">incy</span><span class=3D"p">.</span><span class=3D"n">lt</span><spa=
n class=3D"p">.</span><span class=3D"mi">0</span><span class=3D"p">)</span>=
<span class=3D"w"> </span><span class=3D"k">then</span>
<span class=3D"k">            </span><span class=3D"n">iy</span><span class=
=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span =
class=3D"mi">1</span><span class=3D"w"> </span><span class=3D"o">+</span><s=
pan class=3D"w"> </span><span class=3D"p">(</span><span class=3D"o">-</span=
><span class=3D"n">n</span><span class=3D"o">+</span><span class=3D"n">i</s=
pan><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"w"> </span><span class=3D"n">incy</span><span class=
=3D"w"></span>
<span class=3D"w">          </span><span class=3D"k">else</span>
<span class=3D"k">            </span><span class=3D"n">iy</span><span class=
=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><span =
class=3D"mi">1</span><span class=3D"w"> </span><span class=3D"o">+</span><s=
pan class=3D"w"> </span><span class=3D"p">(</span><span class=3D"n">i</span=
><span class=3D"o">-</span><span class=3D"mi">1</span><span class=3D"p">)</=
span><span class=3D"w"> </span><span class=3D"o">*</span><span class=3D"w">=
 </span><span class=3D"n">incy</span><span class=3D"w"></span>
<span class=3D"w">          </span><span class=3D"k">end if</span>
<span class=3D"k">          </span><span class=3D"n">dy</span><span class=
=3D"p">(</span><span class=3D"n">iy</span><span class=3D"p">)</span><span c=
lass=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </span><s=
pan class=3D"n">dy</span><span class=3D"p">(</span><span class=3D"n">iy</sp=
an><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"o">+<=
/span><span class=3D"w"> </span><span class=3D"n">da</span><span class=3D"o=
">*</span><span class=3D"n">dx</span><span class=3D"p">(</span><span class=
=3D"n">ix</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">        </span><span class=3D"k">end do</span>
<span class=3D"k">      end if</span>
<span class=3D"k">      return</span>
<span class=3D"k">      end</span>
<span class=3D"k">      end module </span><span class=3D"n">daxpy_mod</span=
><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell324">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell325"><span></span><span class=3D"k">module </span><span class=
=3D"n">mdaxpy</span><span class=3D"w"></span>
<span class=3D"k">use </span><span class=3D"n">daxpy_mod</span><span class=
=3D"w"></span>
<span class=3D"k">contains</span>
<span class=3D"k">  </span><span class=3D"n">attributes</span><span class=
=3D"p">(</span><span class=3D"n">global</span><span class=3D"p">)</span><sp=
an class=3D"w"> </span><span class=3D"k">subroutine </span><span class=3D"n=
">mdaxpy</span><span class=3D"p">(</span><span class=3D"n">x</span><span cl=
ass=3D"p">,</span><span class=3D"n">y</span><span class=3D"p">,</span><span=
 class=3D"n">n</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">integer</span><span class=3D"=
p">,</span><span class=3D"w"> </span><span class=3D"k">value</span><span cl=
ass=3D"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><sp=
an class=3D"n">n</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
(</span><span class=3D"mi">8</span><span class=3D"p">),</span><span class=
=3D"w"> </span><span class=3D"n">device</span><span class=3D"w"> </span><sp=
an class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">x</spa=
n><span class=3D"p">(</span><span class=3D"n">n</span><span class=3D"p">),<=
/span><span class=3D"w"> </span><span class=3D"n">y</span><span class=3D"p"=
>(</span><span class=3D"n">n</span><span class=3D"p">,</span><span class=3D=
"n">n</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"kt">real</span><span class=3D"p">=
(</span><span class=3D"mi">8</span><span class=3D"p">)</span><span class=3D=
"w"> </span><span class=3D"kd">::</span><span class=3D"w"> </span><span cla=
ss=3D"n">a</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">a</span><span class=3D"w"> </s=
pan><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"mf=
">0.5d0</span><span class=3D"w"></span>
<span class=3D"w">  </span><span class=3D"n">j</span><span class=3D"w"> </s=
pan><span class=3D"o">=3D</span><span class=3D"w"> </span><span class=3D"n"=
>blockIdx</span><span class=3D"p">%</span><span class=3D"n">x</span><span c=
lass=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">call </span><span class=3D"n">=
daxpy</span><span class=3D"p">(</span><span class=3D"n">n</span><span class=
=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">a</span><span cl=
ass=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">x</span><span=
 class=3D"p">,</span><span class=3D"w"> </span><span class=3D"mi">1</span><=
span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">y</spa=
n><span class=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p">,<=
/span><span class=3D"n">j</span><span class=3D"p">),</span><span class=3D"w=
"> </span><span class=3D"mi">1</span><span class=3D"p">)</span><span class=
=3D"w"></span>
<span class=3D"w">  </span><span class=3D"k">return</span>
<span class=3D"k">  end subroutine</span>
<span class=3D"k">end module</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell325">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>Care must be taken in the CUDA code, where the programming model allows =
much flexibility in how the threads are applied, to follow what OpenACC exp=
ects when calling into an OpenACC routine. Calling an OpenACC vector routin=
e from every thread in a thread block, passing the same parameters, is usua=
lly safe. Calling OpenACC sequential routines from a CUDA thread is also sa=
fe. This is a generally a new feature and has not yet been thoroughly teste=
d.</p>
<div class=3D"highlight-fortran notranslate"><div class=3D"highlight"><pre =
id=3D"codecell326"><span></span><span class=3D"k">program </span><span clas=
s=3D"n">tdaxpy</span><span class=3D"w"></span>
<span class=3D"c">! Compile with "nvfortran -cuda daxpy.F mdaxpy.CUF tdaxpy=
.F90"</span>
<span class=3D"k">use </span><span class=3D"n">cudafor</span><span class=3D=
"w"></span>
<span class=3D"k">use </span><span class=3D"n">mdaxpy</span><span class=3D"=
w"></span>
<span class=3D"kt">integer</span><span class=3D"p">,</span><span class=3D"w=
"> </span><span class=3D"k">parameter</span><span class=3D"w"> </span><span=
 class=3D"kd">::</span><span class=3D"w"> </span><span class=3D"n">n</span>=
<span class=3D"w"> </span><span class=3D"o">=3D</span><span class=3D"w"> </=
span><span class=3D"mi">100</span><span class=3D"w"></span>
<span class=3D"kt">real</span><span class=3D"p">(</span><span class=3D"mi">=
8</span><span class=3D"p">)</span><span class=3D"w"> </span><span class=3D"=
kd">::</span><span class=3D"w"> </span><span class=3D"n">x</span><span clas=
s=3D"p">(</span><span class=3D"n">n</span><span class=3D"p">),</span><span =
class=3D"w"> </span><span class=3D"n">y</span><span class=3D"p">(</span><sp=
an class=3D"n">n</span><span class=3D"p">,</span><span class=3D"n">n</span>=
<span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"n">x</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"mf">2.0d0</span><span class=
=3D"w"></span>
<span class=3D"n">y</span><span class=3D"w"> </span><span class=3D"o">=3D</=
span><span class=3D"w"> </span><span class=3D"mf">3.0d0</span><span class=
=3D"w"></span>
<span class=3D"c">!$acc data copyin(x), copy(y)</span>
<span class=3D"c">!$acc host_data use_device(x,y)</span>
<span class=3D"k">call </span><span class=3D"n">mdaxpy</span><span class=3D=
"w"> </span><span class=3D"o">&lt;&lt;&lt;</span><span class=3D"n">n</span>=
<span class=3D"p">,</span><span class=3D"w"> </span><span class=3D"n">n</sp=
an><span class=3D"o">&gt;&gt;&gt;</span><span class=3D"w"> </span><span cla=
ss=3D"p">(</span><span class=3D"n">x</span><span class=3D"p">,</span><span =
class=3D"w"> </span><span class=3D"n">y</span><span class=3D"p">,</span><sp=
an class=3D"w"> </span><span class=3D"n">n</span><span class=3D"p">)</span>=
<span class=3D"w"></span>
<span class=3D"k">print</span><span class=3D"w"> </span><span class=3D"o">*=
</span><span class=3D"p">,</span><span class=3D"nb">sum</span><span class=
=3D"p">(</span><span class=3D"n">y</span><span class=3D"p">),</span><span c=
lass=3D"nb">maxval</span><span class=3D"p">(</span><span class=3D"n">y</spa=
n><span class=3D"p">).</span><span class=3D"n">eq</span><span class=3D"p">.=
</span><span class=3D"nb">minval</span><span class=3D"p">(</span><span clas=
s=3D"n">y</span><span class=3D"p">)</span><span class=3D"w"></span>
<span class=3D"c">!$acc end host_data</span>
<span class=3D"c">!$acc end data</span>
<span class=3D"k">end program</span><span class=3D"w"></span>
</pre><button class=3D"copybtn o-tooltip--left" data-tooltip=3D"Copy" data-=
clipboard-target=3D"#codecell326">
      <svg xmlns=3D"http://www.w3.org/2000/svg" class=3D"icon icon-tabler i=
con-tabler-copy" width=3D"44" height=3D"44" viewBox=3D"0 0 24 24" stroke-wi=
dth=3D"1.5" stroke=3D"#000000" fill=3D"none" stroke-linecap=3D"round" strok=
e-linejoin=3D"round">
  <title>Copy to clipboard</title>
  <path stroke=3D"none" d=3D"M0 0h24v24H0z" fill=3D"none"></path>
  <rect x=3D"8" y=3D"8" width=3D"12" height=3D"12" rx=3D"2"></rect>
  <path d=3D"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2">=
</path>
</svg>
    </button></div>
</div>
<p>There are many examples of calling CUDA code from within OpenACC compute=
 regions. The examples directory in the NVIDIA package has several, from Fo=
rtran, C, and C++. There are also many examples of using the OpenACC host_d=
ata directive. More information on that directive, and other directives, ca=
n be found in the OpenACC Specification.</p>
<p class=3D"rubric-h1 rubric">Notices</p>
<p class=3D"rubric-h2 rubric">Notice</p>
<p>ALL NVIDIA DESIGN SPECIFICATIONS, REFERENCE BOARDS, FILES, DRAWINGS, DIA=
GNOSTICS, LISTS, AND OTHER DOCUMENTS (TOGETHER AND SEPARATELY, =E2=80=9CMAT=
ERIALS=E2=80=9D) ARE BEING PROVIDED =E2=80=9CAS IS.=E2=80=9D NVIDIA MAKES N=
O WARRANTIES, EXPRESSED, IMPLIED, STATUTORY, OR OTHERWISE WITH RESPECT TO T=
HE MATERIALS, AND EXPRESSLY DISCLAIMS ALL IMPLIED WARRANTIES OF NONINFRINGE=
MENT, MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE.</p>
<p>Information furnished is believed to be accurate and reliable. However, =
NVIDIA Corporation assumes no responsibility for the consequences of use of=
 such information or for any infringement of patents or other rights of thi=
rd parties that may result from its use. No license is granted by implicati=
on of otherwise under any patent rights of NVIDIA Corporation. Specificatio=
ns mentioned in this publication are subject to change without notice. This=
 publication supersedes and replaces all other information previously suppl=
ied. NVIDIA Corporation products are not authorized as critical components =
in life support devices or systems without express written approval of NVID=
IA Corporation.</p>
<p class=3D"rubric-h2 rubric">Trademarks</p>
<p>NVIDIA, the NVIDIA logo, CUDA, CUDA-X, GPUDirect, HPC SDK, NGC, NVIDIA V=
olta, NVIDIA DGX, NVIDIA Nsight, NVLink, NVSwitch, and Tesla are trademarks=
 and/or registered trademarks of NVIDIA Corporation in the U.S. and other c=
ountries. Other company and product names may be trademarks of the respecti=
ve companies with which they are associated.</p>
</section>
</section>


           </div>
          </div>
          <footer>

  <hr>

  <div role=3D"contentinfo">
<img src=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-for=
tran-prog-guide/_static/NVIDIA-LogoBlack.svg" class=3D"only-light" width=3D=
"110" height=3D"38">
<img src=3D"https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-for=
tran-prog-guide/_static/NVIDIA-LogoWhite.svg" class=3D"only-dark">

<p class=3D"notices">
<a href=3D"https://www.nvidia.com/en-us/about-nvidia/privacy-policy/" targe=
t=3D"_blank">Privacy Policy</a>
|
<a href=3D"https://www.nvidia.com/en-us/about-nvidia/privacy-center/" targe=
t=3D"_blank">Manage My Privacy</a>
|
<a href=3D"https://www.nvidia.com/en-us/preferences/start/" target=3D"_blan=
k">Do Not Sell or Share My Data</a>
|
<a href=3D"https://www.nvidia.com/en-us/about-nvidia/terms-of-service/" tar=
get=3D"_blank">Terms of Service</a>
|
<a href=3D"https://www.nvidia.com/en-us/about-nvidia/accessibility/" target=
=3D"_blank">Accessibility</a>
|
<a href=3D"https://www.nvidia.com/en-us/about-nvidia/company-policies/" tar=
get=3D"_blank">Corporate Policies</a>
|
<a href=3D"https://www.nvidia.com/en-us/product-security/" target=3D"_blank=
">Product Security</a>
|
<a href=3D"https://www.nvidia.com/en-us/contact/" target=3D"_blank">Contact=
</a>
</p>

<p>
  Copyright =C2=A9 2013-2025, NVIDIA Corporation &amp; affiliates. All righ=
ts reserved.
</p>

    <p>
      <span class=3D"lastupdated">Last updated on Mar 25, 2025.
      </span></p>

  </div>

  =20

</footer>
        </div>
      </div>
    </section>
  </div>
 =20
=20

=20



</body><grammarly-desktop-integration data-grammarly-shadow-root=3D"true"><=
template shadowmode=3D"open"><div aria-label=3D"grammarly-integration" role=
=3D"group" tabindex=3D"-1" class=3D"grammarly-desktop-integration" data-con=
tent=3D"{&quot;mode&quot;:&quot;full&quot;,&quot;isActive&quot;:true,&quot;=
isUserDisabled&quot;:false}"></div></template></grammarly-desktop-integrati=
on></html>
------MultipartBoundary--LqhmvZwTEGngQgONNpxZE3xQGOpsvkJLZXDlKAsK95----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/_static/NVIDIA-LogoWhite.svg

<?xml version=3D"1.0" encoding=3D"UTF-8" standalone=3D"no"?>
<svg
   id=3D"NVIDIA_Logo_V"
   data-name=3D"NVIDIA Logo V"
   viewBox=3D"0 0 1211.808 415.949"
   version=3D"1.1"
   sodipodi:docname=3D"NVIDIA-LogoWhite.svg"
   inkscape:version=3D"1.2 (dc2aedaf03, 2022-05-15)"
   xmlns:inkscape=3D"http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi=3D"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns=3D"http://www.w3.org/2000/svg"
   xmlns:svg=3D"http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id=3D"namedview14"
     pagecolor=3D"#505050"
     bordercolor=3D"#eeeeee"
     borderopacity=3D"1"
     inkscape:showpageshadow=3D"0"
     inkscape:pageopacity=3D"0"
     inkscape:pagecheckerboard=3D"0"
     inkscape:deskcolor=3D"#505050"
     showgrid=3D"false"
     inkscape:zoom=3D"0.56737724"
     inkscape:cx=3D"325.18047"
     inkscape:cy=3D"208.85575"
     inkscape:window-width=3D"1920"
     inkscape:window-height=3D"1138"
     inkscape:window-x=3D"-6"
     inkscape:window-y=3D"-6"
     inkscape:window-maximized=3D"1"
     inkscape:current-layer=3D"NVIDIA_Logo_V" />
  <defs
     id=3D"defs4">
    <style
       id=3D"style2">.cls-1{fill:none;}</style>
  </defs>
  <title
     id=3D"title6">NVIDIA-LogoBlack</title>
  <path
     id=3D"Reg"
     d=3D"M1080.665,262.245v-2.692h1.729c.944,0,2.229.07,2.229,1.224,0,1.24=
6-.662,1.468-1.775,1.468h-2.183m0,1.892h1.155l2.68,4.7h2.939l-2.962-4.9a2.6=
58,2.658,0,0,0,2.793-2.905c0-2.563-1.771-3.389-4.762-3.389h-4.328v11.192h2.=
485v-4.7m12.588-.876c0-6.573-5.108-10.386-10.8-10.386-5.73,0-10.833,3.813-1=
0.833,10.386s5.1,10.395,10.833,10.395c5.69,0,10.8-3.826,10.8-10.395m-3.115,=
0a7.672,7.672,0,0,1-7.683,8v-.035a7.984,7.984,0,1,1,7.683-7.968Z"
     style=3D"fill:#ffffff;fill-opacity:1" />
  <path
     id=3D"NVIDIA"
     d=3D"M696.8,152.076l.011,117.957h33.313V152.078Zm-262.063-.16V270.033h=
33.61V178.346l26.218.088c8.625,0,14.586,2.066,18.743,6.5,5.269,5.616,7.42,1=
4.667,7.42,31.233v53.865h32.564v-65.26c0-46.576-29.689-52.857-58.734-52.857=
Zm315.7.164V270.033h54.034c28.789,0,38.183-4.787,48.345-15.521,7.184-7.537,=
11.825-24.08,11.825-42.158,0-16.581-3.928-31.372-10.784-40.583-12.339-16.47=
-30.121-19.691-56.666-19.691Zm33.045,25.684h14.325c20.779,0,34.218,9.332,34=
.218,33.545s-13.439,33.548-34.218,33.548H783.484ZM648.77,152.08l-27.8,93.48=
4-26.641-93.478-35.961-.006,38.047,117.953h48.014L682.771,152.08ZM880.145,2=
70.033h33.318V152.086l-33.326-.006Zm93.386-117.91L927.014,269.992h32.849l7.=
36-20.832h55.05l6.967,20.832H1064.9l-46.873-117.879Zm21.625,21.5,20.18,55.2=
21h-41Z"
     inkscape:label=3D"NVIDIA"
     style=3D"fill:#ffffff;fill-opacity:1" />
  <path
     id=3D"Eye_Mark"
     data-name=3D"Eye Mark"
     d=3D"M219.887,171.742V155.509c1.576-.113,3.168-.2,4.79-.247,44.4-1.4,7=
3.527,38.149,73.527,38.149s-31.46,43.7-65.191,43.7a40.916,40.916,0,0,1-13.1=
26-2.1V185.783c17.285,2.088,20.759,9.723,31.154,27.044l23.111-19.486s-16.87=
-22.127-45.309-22.127a83.962,83.962,0,0,0-8.956.528m0-53.625v24.248c1.593-.=
126,3.189-.227,4.79-.285,61.744-2.08,101.968,50.637,101.968,50.637s-46.2,56=
.183-94.337,56.183a71.1,71.1,0,0,1-12.421-1.093V262.8a81.731,81.731,0,0,0,1=
0.343.67c44.795,0,77.188-22.874,108.557-49.949,5.2,4.164,26.49,14.294,30.86=
9,18.734-29.827,24.967-99.333,45.091-138.737,45.091-3.8,0-7.449-.23-11.032-=
.573v21.064H390.141V118.117Zm0,116.892v12.8c-41.43-7.387-52.929-50.454-52.9=
29-50.454s19.892-22.04,52.929-25.611v14.041c-.026,0-.042-.007-.065-.007-17.=
336-2.082-30.882,14.117-30.882,14.117s7.589,27.268,30.947,35.116M146.3,195.=
487s24.555-36.232,73.584-39.978V142.365c-54.305,4.359-101.332,50.352-101.33=
2,50.352s26.634,77,101.332,84.051V262.8C165.071,255.9,146.3,195.487,146.3,1=
95.487Z"
     style=3D"fill:#ffffff;fill-opacity:1" />
  <rect
     class=3D"cls-1"
     width=3D"1211.808"
     height=3D"415.949"
     id=3D"rect11" />
</svg>=0A
------MultipartBoundary--LqhmvZwTEGngQgONNpxZE3xQGOpsvkJLZXDlKAsK95----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/_static/NVIDIA-LogoBlack.svg

<svg id=3D"NVIDIA_Logo_V" data-name=3D"NVIDIA Logo V" xmlns=3D"http://www.w=
3.org/2000/svg" viewBox=3D"0 0 1211.808 415.949"><defs><style>.cls-1{fill:n=
one;}</style></defs><title>NVIDIA-LogoBlack</title><path id=3D"Reg" d=3D"M1=
080.665,262.245v-2.692h1.729c.944,0,2.229.07,2.229,1.224,0,1.246-.662,1.468=
-1.775,1.468h-2.183m0,1.892h1.155l2.68,4.7h2.939l-2.962-4.9a2.658,2.658,0,0=
,0,2.793-2.905c0-2.563-1.771-3.389-4.762-3.389h-4.328v11.192h2.485v-4.7m12.=
588-.876c0-6.573-5.108-10.386-10.8-10.386-5.73,0-10.833,3.813-10.833,10.386=
s5.1,10.395,10.833,10.395c5.69,0,10.8-3.826,10.8-10.395m-3.115,0a7.672,7.67=
2,0,0,1-7.683,8v-.035a7.984,7.984,0,1,1,7.683-7.968Z"/><path id=3D"NVIDIA" =
d=3D"M696.8,152.076l.011,117.957h33.313V152.078Zm-262.063-.16V270.033h33.61=
V178.346l26.218.088c8.625,0,14.586,2.066,18.743,6.5,5.269,5.616,7.42,14.667=
,7.42,31.233v53.865h32.564v-65.26c0-46.576-29.689-52.857-58.734-52.857Zm315=
.7.164V270.033h54.034c28.789,0,38.183-4.787,48.345-15.521,7.184-7.537,11.82=
5-24.08,11.825-42.158,0-16.581-3.928-31.372-10.784-40.583-12.339-16.47-30.1=
21-19.691-56.666-19.691Zm33.045,25.684h14.325c20.779,0,34.218,9.332,34.218,=
33.545s-13.439,33.548-34.218,33.548H783.484ZM648.77,152.08l-27.8,93.484-26.=
641-93.478-35.961-.006,38.047,117.953h48.014L682.771,152.08ZM880.145,270.03=
3h33.318V152.086l-33.326-.006Zm93.386-117.91L927.014,269.992h32.849l7.36-20=
.832h55.05l6.967,20.832H1064.9l-46.873-117.879Zm21.625,21.5,20.18,55.221h-4=
1Z"/><path id=3D"Eye_Mark" data-name=3D"Eye Mark" d=3D"M219.887,171.742V155=
.509c1.576-.113,3.168-.2,4.79-.247,44.4-1.4,73.527,38.149,73.527,38.149s-31=
.46,43.7-65.191,43.7a40.916,40.916,0,0,1-13.126-2.1V185.783c17.285,2.088,20=
.759,9.723,31.154,27.044l23.111-19.486s-16.87-22.127-45.309-22.127a83.962,8=
3.962,0,0,0-8.956.528m0-53.625v24.248c1.593-.126,3.189-.227,4.79-.285,61.74=
4-2.08,101.968,50.637,101.968,50.637s-46.2,56.183-94.337,56.183a71.1,71.1,0=
,0,1-12.421-1.093V262.8a81.731,81.731,0,0,0,10.343.67c44.795,0,77.188-22.87=
4,108.557-49.949,5.2,4.164,26.49,14.294,30.869,18.734-29.827,24.967-99.333,=
45.091-138.737,45.091-3.8,0-7.449-.23-11.032-.573v21.064H390.141V118.117Zm0=
,116.892v12.8c-41.43-7.387-52.929-50.454-52.929-50.454s19.892-22.04,52.929-=
25.611v14.041c-.026,0-.042-.007-.065-.007-17.336-2.082-30.882,14.117-30.882=
,14.117s7.589,27.268,30.947,35.116M146.3,195.487s24.555-36.232,73.584-39.97=
8V142.365c-54.305,4.359-101.332,50.352-101.332,50.352s26.634,77,101.332,84.=
051V262.8C165.071,255.9,146.3,195.487,146.3,195.487Z"/><rect class=3D"cls-1=
" width=3D"1211.808" height=3D"415.949"/></svg>
------MultipartBoundary--LqhmvZwTEGngQgONNpxZE3xQGOpsvkJLZXDlKAsK95----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/_static/acc-comp-logo.png

iVBORw0KGgoAAAANSUhEUgAAALUAAAAfCAYAAACh1IwhAAAgAElEQVR4nO18CXxU5bn+c2bJNjPZ
E7MSspEVUiYIhCRAIJEGNAo2llrBi1pQEaxLgXu1arW3lwiiFewVN6yARVyDstgELGRiCJAgkJAE
ZIkDWUgy+5pZzv29J+fEyTCh1tr/9f+7vPzyy+Scb77lPc/3fs/3vc+BKV2cCIYBtN0uTJ0vx9gc
f9wgTYX5SjBOH7Vh2vR0JKfEIijMH42H2vCr+X9E0byUoHc+e/AufyjggAMs908KEQAx3HCD4f6W
cNfpqmAM5AjAsRMdN165pM853nw+QSS3zgXQwoLBtazqkT3XvH/d/m8aw1yNG8l39YTb7YZMEQA/
kQRWg3trAlIXMAiEDU6wcMEMC2ywwQEXWO4bDNwA/xn8FaAfZkzIS0dEXjDK5inxn2u3LpBIJS2+
Onfdrtv3se8MapfLBeegG48+e1foyfamCc9u/QOCgxVQKIKRMjYdqUnpiBWPxSBY6KCBm3VzMGYY
AdYsH7elMMINF2wY6LNBHhCmFUsYnzPuul23HxTUIhEDu30Qg3Y3QhShCS6Jozwl44b5MeP8pqq3
fKF4bvFXYIIBkQS4YQyQMykU00smY27pT5EbPRlWxgYd9BBBxMVslnXDxbi5usVUPyQQS8RQKPwg
koiuCWqW/X6Az5sw4Vq3wwBs5n972h0AtN+rwev2ozCfoCZAa/rNuCEyZkHauLjVZseltF21u8N7
urtxsrkHwf4KvPvBH6DtteL4kfM4cKgJNW9cwIH3/ort0/6Kn99Vigfv+hViEYtu9FK8BsOIOYAD
bp6IiCEWSREkD4JIfO1IzYhGvfXP2FqGYcp+s2pVW0REhD/Vs2b16hSWZfMB1F6H5/+/NgLUBJ5B
mxsa/eANs8qU79ps0lk1R/6C6o+/xOWvRLhyljaACkwrC0FgWgeCUxSYsWgiHjVNwZ6PTmFTVQO+
qdXgxbZaqFTH8NtVK5CfMgX90MAFO0dB3BzndnO/LSILxHIrRCLfhF8wVmL9oR28lH6WLFlSt3Dh
wmLhYtXatc0ajcYb1GF8+VIA+V6RvQnA+wBe46M7lanky+V7lNPydb7G/z7mdX80qwKw2uveMr4e
T1vro5wv81Wfp53n+1fFfxYsn++zp1GZNf/AWP4Ru1Y/BV++z/9cZRyoCU8uJ2DSsIguki2LCWGe
H5A2B298YT9UH9uAy7GIT47ErU+FICNPgs8+Po6fzfwzwuKAsCgGN9+eiyX3T8HEm7LwzPIOdKjC
cPTDb7D8m+fw77+vQIEyDVfQCyc7CDfrhIsZhJhhYWVcsEiMXPujY5qBW6L7IR1GD2Btbm5u3UMr
VhR73sjOzjaqVCrPB0QArmEYJrWwsPDELRUVFyZPnsyEhISEHm9ubtuyZYupvr5+DcuypbyDN4eH
hzffdttt5sLCwraJSmWWXq/X7d27t/2N119P1Wg0NQDKqA9vvvkmd39Ez1h+EQNwa0VFg1qtrqy4
9daDzzzzzAy6tnjRorqWlhZfYxpRzpc988wzB3dVV1Pw0DU1N4d6F+ns7FR/umvX5a1bt5Y7HA4a
T6qHD3YGBQW1qerruf7ydQ1PcJ9j8Xa6Usk9RF9te5djWdbneARf/uXddxPUavVOnipeBWwJWAYu
Jwv/IFFmWLTkTznZ/iWHG1vx+h8uoOdYIAINuZizUorZ9wMa42V8fawfjL8NY0PHwXQxANYBM157
+ix2fXAKT7ychSf3hOGluw3o2J+BK8c68R8P7cKy5xIxYWY0jMZBiF0sd+Qn8RfDbnbB7LByz3E0
ULMiJ8Qu/2v54R8x4QH1bNy0abxHKxyaphUW+nmBmihK6htvvNE9UankHExgDo+IMNJDpJ+amprm
1atW0a3NNFHe2bq1WHgAdK+srEy5cOHCgoULF6J09mxaCVKkUqlaAAGVO3LkyHnvMajV6gL6vWTJ
EqlwrbW1dbx3OQAp9ONZjtodMUMotNXURNP4c3JyTgHg+khAPnPmTN+4ceOikpKSEh9asSLxlooK
9fzbbkvxqH8zwzDh29991yhcKCwsVOyqrlbSZ7FYLO4fGLBSm5EREYG+xlVfX29kWXYG+ce7bc+B
COUAhF49HsDTl/yk9+znsEkCQhwYtAJjJohenHS7s+TkRTXefekiNEfDECZJwO2v2pBXYcFnm7pR
9xcr+trCMHV+FJ5QufDR00a07FZgTGQ2LhzqwwfbLmDVOhY3LhlA66EgRPml4dJxKVqb+jBW6Qfj
AAu4WbAMC5EYsFtZmMyDQ9RjFFAzYifcdrfvm/+4DT8girb07R07djSQo+hzQUFBAoBED4rBUZSJ
SiX3IFauWHFQpVJx4F61enWDwMXJCKgCoOmBLZg/X8GyrHJTYmLDQytWcOXi4uLMGo2mNCMj4+JQ
OyxefPHFE7uqqyfwVMbTaqVSaQaBDfxkYlk2y0dkqqS2PcutXrVKOcq+oHLy5MnDof7ee+7p02g0
5IfEL/72Nx35RKiHN6IAlb9ZtaohKSmpQLhI4OK5QYrL5ernJ3VYbm5u/ztbt3I3fIxLO3ny5OGK
V65YcUmtVt/gRXPIqqRS6Z0+xoN6j+idlJQ0qFarfQJAcu4oA6edgV8g+3F22cBP43NYxCVLcWlf
JJhQF8IyBtBzeRANOxxATwZiw+Sw6fvBBOlQ/qQbl9vc6DoejjnLRahYHQJVoxqfvWSFCOEwGWyY
9ksxiu6QQ2fQw+Vk4HCw3ImKVMJg0MbCbOPTLqOAWiR2wfXDgPqqB0QR4PmqKm7m845KpOWZ3yym
0GeBohBQeUATj8x/vqqKgG/m604pnzv3PD8h8Nsnn7zIsmw8TQq1Wr109apVZo9+lM6dN6996COD
yIgIUVFR0UmaF3w7fmq1upramDJlynCdW7ZsuQLA4uNkZkQ5ippFRUUHWUAquFSlUl3heeqxRYsX
j4j24eHhuuzs7IMhISHDKxGALH5/sJbqWrhw4QzBXwRo+kx0xGKx5PN0ikzz7bgAVV2dguf+awRO
7tk2gTIpKUktjLu5uTnaYrEsouc02rg1AwNSfAeTWPpd3EqluYDXDm1xPVy53pY9odwN9VEdLtQm
4q8b3Vj4RzNuvC0AX27yhySQBRgHLp0xQBYmxeQlGuhmG3HTYzZ802rHB0+50NeYBikjx0/u6kT5
kyYM2hjUv2tHUIgbmcWBEPmJYLOxsFkBu010TVC7WDskksHvjNxRLN/7AdHySKcdwmchcoeFhZ3n
N4spnkv1li1byNEOHhyeRnWc80ETVvvYzBBQasrLy4f5pzevp9WAj0CV0woLG4Trp0+fJpDs9DG8
EeUIdGVlpcMOpZVIpVJxbRMQQ0JChtuu3b9f6VkRgfbJJ56I4qPrTtofvLxxI+cv4tEE1LKyIQyn
pKT0t7S0CMs/x6+FcZE/NRqN0mOzd1XbQr2CFRUWtvkaj8e4195SUdEsXKdJMNrDlsA9NPigYKBl
d9CzY6fadvzkVhdyb+3HQFs42j+NRv1kPYoetKK77RLaP0hBRJYYkDqh73cjuQCQzHDj8McsDr4m
gfbEOAQFB2LSPWdRdJ8B2l5g/5/EOL0rFEHRdlzuMCOzCAhPEGHQJcIggZoZHdQIcGCwM2G0/n8X
43h0YGBg29q1VTMsFgv3ld6eHuOzzz7LcTqr1Uo8l7uekZFhbGhoIFRg4sSJEMo3NzX58QDd6X22
Tct/VFRkotViwVdfnRBoAocTr/41hYWFNUulUiXV+8WBA80bNmwYUUCn0+UB2EufKyoqCqicwWDw
Bolgld7lfnnnnSOWc5PJRM67RMDKy8u7YrFYuL598MH7DbSf+lnlz7hVa/Orr9ZtHaJPHG1hGIbZ
tn17ilBv3aFDitjYWDONkR2KtO6WlhZh/1FK/pVKpVlUvrr6EwJopgcFqhxumwX+67/+cPDLL79U
ePbTYrEo+QCBiopbuPEYvx03bdZ1hYWFnN/UarWaH4fPo1cJ6xJzHxgRC9Yl/vhvr8hfDYkbvD9j
BoueVjVO/DkDX6yPRWBEF376HxqIXAHQdruh6aHyLnSdAc43Ah2fh8DyTSIS8hyYdO9ZjL/ZggvH
AdWbYlxWxSE0JAJusxOndmhxsbEfM+63IyrJDYdNes1IrdcDs5MrviN+fRrHo19++WWj3qCH0JQi
ODhRmZ+fyHDJHRYGvZ57WDNnzlQ0NDQkEwATEhJkdB28TIBARc5dtmxZW1hYGMeT169fb5TJZH16
vYFbLs1mk9CHzRkZGXULFiyQ0R+1tbXGo0ePlk6aNMko1Llr1y6jVquVe1EKDU2auLi4BoNeX8CX
E0Cy2gvYTd7ltFptphc/1/B/r505c2aznm9708ZNXKQou2ko8t58883jtw7xYSq7es2aNc1gWSXv
l9Dt27dzUV2n13P+mzBhgmL37t1CpK/Mzc29YtDruQlTr6of9AAcBYD8+fPntwltHzhwINpqtV72
elhUPp/Go9cbuPF86jHu0tLSgwa9fgY9o7feelNYNb33IZxJIKSxGSAw2D1oGBA9UPdnkavkV67l
kxdZYNVeRPuHyah+CJi0tAtTH+xC4zYJPngkDEEhLIxdfrBckSMs1g/T7u1H9u09CAwHVH8GmnfI
YO+JQ0S0DCIRC4s+EDL5IFImaSCPYGDqA+x68TUjtdvlQE+P9/i/s3E8etHixQ2yIFmBXqdFe3tH
20svvTTi4HtmSYn553fcUUwdSR6bTNGCoyJvvfWWffz4XK5z69evL2g8fLg5Jyc3RSaXFdC1p576
bZ3D4XDodDpl4+HDbZmZmVkJCQlZ69evVxsMBlNGZmYxcbuO9o625uZmSiH9pKCgoE2n04FlgfLy
8uiCadOsYNlwoS/vvfeevbe3tzI9PV2t1Wk5apiWnpaw8uGVF4gCc45igd27PzOfO3eOK6fTabn6
0tPTE1Y+/PAFBmz4kOiGwcFDB41fffUVd5Q3fnyuksr2dPeonU5nIt9ew5ybbipgGISmpqbWnTt3
bvWMGTMOjs8dP0On1dH9us5vOoc3NYvuuislJi42cfz48QKgufP78vLyNp1WyzV7/PjxFGG1If9T
2/EJCVl0nxJxS3+1lI68wrkucoc0LP70yp+inE5nCo1Hr9Vxkor09LSEh1euvDBmzBhTTFzcDK1W
i46Ojrbamto8Phvs0yTsUAQCw6ejg4IY9DSFPLSv33530f1m+ZQlWgTIWLR9kgDVC3Kc298PRawF
oaGBYF0SJOW5EJ2hQ0yeHvIbXFC3AB21fug+GY4ARCI41A9WkxOBIXYkFl7C2OlaBMe5MWhiYDXQ
D64BagYWFzAY+P05dW5u7sGCqVNncFGCAaqqqmC321l+A8M5/eSJE1nlc+YMdYRlQyUSCT3013p7
e3cuW3Z/c3l5uX3y5MlZmVlZyo4z7W2tradP1dbWjnU6ncV8MiTsueeeS83JyTk456abotPS0rNY
sLq/ffFFc01NjfnixYtUronqjY2JpbNr7lnGxsZmxcbGDj1ZTgrAYmBggAi1o6SkJMWgN3DlZEGy
xKzMzESuGK+n2bz5VY6DUjm93sANJCgoKDErMyNR8B2Vrt5VTcdoiIyMbNPr9AV0uaam5qIQ6fbu
2ZNQMGUqV3zRokVj3377bUpIzaBVrbm5ubl6V3Uxv+Gj6Lj0xhtv7AuSybi+KBSKZqPRyE0YblwG
A3p7e4UJM7yXSEpKOmXQ64uFU8bMzEzl8JEjA+E7juHxGHTc7aAgWWJGVlaixWTmfNnQ0GBsbW3N
Y1n2nI+9zbeoiYoMgcVshkwuR2BgINxON1xOEexm8ZyQZPOuSXfq/RJ+4kZfuwTnamNx7lAIQtL6
MfPRHjjM4Cg5JW76zwFdJwPQ3xEKhyaEq08ss0MWbUBUhgk35OoRGu+CywFYjQwkEhaDVhG6Wv1X
Mgw2+gQ14wLrlEBhmoZP3vOmp3/f8iZMWM1n27xtksfStXSUWZ/Kczwhm+idSWzyyLwJWcdKH5lE
IetIy+u579j18wK//IHKLfMxRiG76Wvz6Wm1HiccNbwvPK3Mx97hvEfyZjT/+hozrjEewZe1Hhlc
nDx16qqCzGOPPYq+Kz345JOPYLHYEB0dCYlEBLdbArtFksoEGFYmT7XenVlqDwkdA7jMYpz4VIpv
jgXCX8bAaWZg0QTBqvEHXH6ISGQQPNaC8HgjInOMCE6wQxEKWEzAoAVg3EOzU+zPwm4Q40KThAO1
r+QLZR6lziik+i/A66//93fwy0j7O4KmH9J8pcbBPygB1NdFUv8C8wVqSWJiEu6+ewkKphVh92e7
8OWXKrCsCzJZGAJDneecLPPwN40BL15qCvpVeIrjofg8E9EUmdipEMMqRqDMjagkF8LH6BAcb4c8
xoLgeBckgQDrApw2wGEFJH4MJFJAxLCUf4GUzhJIiuoWc5tUAdNDPIvlgC9xB4AJ1ODMpYM/Vp/m
85EuJTExsWGiUjlI2Ta60dHebj5y5EhWa2vrHSzLLuUj2nVg/z8wiclkRE9PN7KycpCbOx6Nhxuw
4y/bcObMeYj9GbgkRuLZF6XiqCe6jos3dDYBKZOkh+/7oCeNdYm47KA0wAlpIAuJPwunVQybSQq3
kxmiqLySmox1s3BTNtEN+AcyMPYx6AxgwIgZiMUiWCxmOF1uSMRiDtcEbKnYjS5z2/+ym3waLZM1
lHLf/u676qQxSQWeFEo4z6Vkxn333ZfKsuxangZ4iqM8l1pvSuNLpLTGg0tu5uvyNLpXeg2BkdZD
sFQ5ilgqzAdla/onREvn+ZXKuy1hknsLpZp4ejian0YTXQ0bJ2gSiUQYGOiHv78/MrNysOD2hfj6
669xSPUFohNSodf14sKFboQqQgdEDhllAlv0lyVp9F3nIKHPn44D4XK5SSjNbzqHmmC4zDg7tBca
1iPQRHDDohXDohOHsSI3LncbkTImEtOzFsI1yHDCJ8Gm3RzwPf35L7W1UqnUtHvPnlghcUNZxxfW
rz8fHhEBIZ1LWghKtb/11lsQgEgaiLnz5vUWFBRIKYtJwK+vr7fwYqJKno+OEPXwKfql/MPk6rnn
nnuGRVmCYGk0sZQgBtq0cWOuxWIhDnx+FLFUPiWpPJMuu6qr5d9HtET+mH/bbfAeC6+BoTG85imU
Ij/ce++94Fe/Sm8/eYmuKnnwXwXsYekp6S/o7RbazQ5oNZh38zyMTU7GuPRxsFhN2L5jK058dQxO
kR1XutnFbzxmW6wIGpKrGoyAQgZIJP7Qmu3Dp4RksgDAn7gGS68KOKE3ujhVdbDcj6MhgzpRncMx
iOmF8zGn5BY47SLQUZZYPHR+TvNA5P7RvRVD0azykUcfbQgJCeHOVD30HrTzT9EMDBy8paKCoyL9
AwPCkdgIINJ36EHy4igsWrxYN6ukBEKa3jNL+djjj6eoVKpEX4DGt2lpLhHkS1QkiIHKy8t1N5WV
GR0OR/6tFRXDS2BHR8dY/uO3GT12SAglFovt30e0xGdhE73H8uZbb0XNv+22xKF5oLzCp+WFlDid
21eStkaQBVM7gp9IdEV+EsZwTVALRuB2u1wwm81wuZyg45WoyCgsqFgIhUyO9rNtiI6NMqaOi36l
7etjcLsZzJo2Ba1nGnFFdxllhaUcleAis5vB2Qsn0dndDZkMCPKToSyvCPZBC06018E2OAiL1YKC
/NlY+cBqWG1mHDl6GE6nE2JW/G2nXP8M/v4lxp29CkIoMorQPKC5pVOlUpWqVCqNR+P5gtyV5vx7
O3Y0kO6EblQ9/zynqaCITxlHStN7ipTA61KIt5OWxBvQZHzm7dy3YqkRoqKwgSGQFFAbCoXiPAUv
AZwEGIfDkSUARBiX3qDXCZm77yNaOt7czGVhPQVKwlhoNVCpVCNS4nzq299TzrBp40Za5WisoXRd
CBQxMTH2UQVNFJ259w+dTi6zRr8HBwe5DBoBnK7RmaXeoEF2Vh4C/YORlDQWt877GbbueB1GowlL
bv81Pt//Ecx2LUoKbkVgUAAH6osX1Zg9dRB+cmBX9cfQ9BlROefXsDusiA3PwomvD6LXaUVSfBb6
NT10fsx1iujQj/ydxXxPXQhZY2Mj8b5XeJ5Y5XWOyulDHnnkES4y0she3LAhgeea3kdk8BYpCfaL
O+9Ef1/fVYAmfQeJDEeKpQDNwAAJli7ExcW1lJeXc2IiinparVbQtXD1V+/aJYiGSknvAYBLrOzd
u1fI6H0v0RIvn73kayzP/f73ebNKSoYDA/VLSOE/9vjjw1F969atY2mCKxSKPtKBnD59mruu1WpH
pUISPz+/dQEBAYEikYgRwCSXy60ul+txq9Ua4efntykoKGjAZrOtNpmMZkWwnN4ef9Ro60uRSgKO
i8V2q8ZwaZpcFrovPjb5r2a7dgMjlXP83DI4gKyU3KbE+DFbm1SnnWZtR5HB2rtQBPFg2pgJTwVJ
w037u2sZg0FbFBAQ8HM/Pz/4+fkdMBqNH0kk3/md4P8NS/GMSEQjHA6HkHBY6uO9xxG0wCMyPsbL
QRmMFAIpPSOYILjyXBk8RVhf1nNpaWq70lMs5S0aon6S3JRl2eS58+YNO5gHJ3cGXVRcPKyb3rN7
t9Mj3f0PiZY8JtqIaEx9oEhNfX/jjTfahOzt1nfeoUmWS/sUT9kp+cnXysTzd9/aj5ycnMfpATkc
Di46U6SeNWsWjh07FtfQ0LA4PT193tSpUxWffPKJuqurq6qoqAgLFix4PDU1Nfa1115/OD8/f1FZ
2U0z9HqDSKFQfDF58uTlcrmci7rTp08nkBLf+nV0bHhRnyY4vmDqtOUkHmpubn6+u/eSKTIygs3K
zvqorKwsklYFPz+/ua+++mp9TExML/WHJgdNth+bJScnyzixEwu0nDrVJ3BB2kBmZ2fXhYSEDKeW
Gxoa9qanp1+0WCzcw/roo4+EyLg0ISGhQSqVFgwJgaqFyBgmiJSMer3uzl/+8vynn32qFNKuJD6a
WlAQmZeXxwGCXyX2hoWFpUolkmGx1J49e4YB2t7ertBqtUo+kxhWMmNmliDW4sFJXD1/zpw5bcJ1
nmdvE0D7rWjJjOpPqr1FSx6CKRZ1hw4NTzRPwRXtO3bv2a0LDg4JJVmB4MPDhw9THe+np6dnefup
ra3N/eKGDXXL7r+/mPZrJ06MEI1dDWqJRKLr7+8PXb58+ed33HHH2tmzZ8fY7fZXMjIyfhEREfHM
mTNnNuTk5Dw9c+bM+1tbW6taW1vLlixZEkadaGpqai4sLCwm/m02mwdoa0GAbWxsxMMPP4zo6Gg8
/vjjmDdv3oRTp07dbTQaT9psNlLFmU0mkzs0NARpaWljKyoq5J9++il6enowf/785Llz58b4+fn1
0mbRYDBwE+3HZpcvX7breXHPuHHjUuLi4ggMd6Snpx/83e9+N0M457nvvvu4KCWTydxCeaJ3BCDi
5YsWLTovCJze3rKFRFK1oaGhqQa9Xsnyoh6tVlvw8h9frktNTZUdO3bMWFtbm/eLX/wi1GDQ4/Kl
y8IqUZmWlmakVDW1sW3bNnNHR4fDK5qt5v9mWbCh1J+uy5fVPDXYPC4joy557Nhiuq6qq2t2OBye
LxuMFC3Vq7xFS6WCYIraP3r0KE20w6Ghoc00FvCCK5ZlM59+6umT5CN4vMHW1tZGtGW3TCbL8PZT
Q0MDEhMT6wRB1Esv/7Gf5/E+z/0l9EWK0nV1deckEsnflEolzpw5Uzhx4sSHrFbrKyqV6ulZs2Y9
nZuba21sbJROmDAhJyYmJmD79u3vMAzT5HA4IqkxiswEQgItgbO9vZ20sOjr68ONN96I+Pj4Bx0O
x9u0QSFqYbVa3SqViklOTn4qNTU1YM2aNQQUWgXoDZHFbW1tj4WEhJDAnfgTHnzwwR8TrLVvv/12
/MSJE3UKhTyUZRG6bt26AuG4UscLctatW3ewq6uLHl41iXwuqdU6hVwe+m9L/m0GCZviExJiFTKZ
UkvCoZ3v1el0Olpi2by8PFLvcef8NTU1NKPf37lzJwGH23Skpqae0mm1xdTetm3bBMUaLyrSceeo
586doyj7ex8v6XK27/PPm6dMmaIkvcj6F9arDXqDKTMzs5hOnswmk27dunVRPGgFGQBXP9evq0VL
pZxgKne8Uq/Tobu7S9B/lHJj0em4EzF+LLVHjx6tbDt9Wh0TG5dIOhYSmQmRl+q9rL6kk8vl9ErX
t36Sy4qp7h073qs709EhaG58moSiIIFy4cKFB6KiorB//34CJ9ES0oIE6vX6Ly9evGiPj4/PPHbs
2KLU1NS5FD11Ol3NlClTrA6HQyYcv3lu7sLDwznaYLVaSaRDPD2QlgVqLzg4mCKwxul0ymfPnn1n
Z2cn0RGuH0ePHiWhz0Pbtm17QyaTDcsVf2RWZbPZapYvX24sLS09NXXq1LHRN9zAyVjPnj3bdrr1
dH/tfk7wJLwp877T6Vy9cuXK7pKZJaemFkwdS2Km7q4u9ceHD5+qr6+XGY1GQTiUP2nSpGgSMxES
Ojs7BQoggHMzLdGcjJZlKHBwJwwMwyyLjYnJMhh0lGNoczqdo+qN6frGl1+edCAn52BBQYFCqVQq
ZYFB+OKLA80NDYcF0ZDcEzicaCk2NotWh97eK1eJljjBlF5XQDOxpqZWEExhUv6kaAOpEhnGcyz5
a6uqep999llvOsb5acXKFd0lJSWcX2lM5Kf9p0+37d2719/DTz4nK5mEoiPx1vDw8AgCYW9vLwIC
Ahi6LhaLpRRZjx8/vj46OvqJu++++z+TkpLCjxw50qnX6+kdOqIdLipLkZr+pihNn4mSyGQyErBT
fWhpaTkjEokGSHZptVoZt9vtLi4uzo2Pj/c/e/Ysli5dykVw4lg6nc5v4sSJM8+cOcPJNCMjI39s
oOayXvQA9u3bV7pv3z7PnX0Wf3+vV9arzG63L933+b7SfZ8Pl0/kH36tBzU49sILL3jyxURvcO7b
t6943759wp+0GXuRZdnQB75dzYQ++My40eHnlNIAAAGPSURBVFvYlLpvaWkpbWlp8Xz7RaAbaz1F
QxjSnIc+8MADnn0671l/X19fgUf7wxP0hQ0+x6Lt6+vb6VGfMPnPD/tppF8TPfTTq68xWTljli5d
yo4bN45A+Buz2byeQCSRSD5MTk5e0NXV1WcymaJFItEtcXFxu7Kzszk6cfbs2Uan0zmVJkBwcLA6
Ozs7QavV/kkmk60Si8Um2hwSuIOCgohKcJTk0qVLxRcvXgyYMGFCDYG8s7MzOiYm5nOWZSeazebO
6dOnv4ChzUmJ0WicT/ufkydPFvf09DwQHh6+58MPP/z6WgO5bv83zed/EGkymTabzeaggICAJoqu
RBckEsmnGo3GLJFILhDn7urqqpFKpb8/fPhwEkXjgYGBDUQL6LPT6Xy9v78/jWGYA26326HX67cS
xYiJieGibnt7u+j06dMZDofjeEJCwvjOzs6ukJCQ93p6enIkEkmEzWbb+f77738il8v/kpWVhUOH
Du3x9/fPDg8Pz/X394+PiIjIcrvd9JbAdVBft79vAP4HHEMbZ8aett8AAAAASUVORK5CYII=

------MultipartBoundary--LqhmvZwTEGngQgONNpxZE3xQGOpsvkJLZXDlKAsK95----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/_static/api-styles.css

@charset "utf-8";

:root { --api-signature-font-style-light: 300; --api-signature-parameter-na=
me-color: var(--sd-color-secondary); --api-signature-parameter-name-font-st=
yle: normal; --api-signature-parameter-symbol-color: var(--sd-color-tabs-la=
bel-inactive); --api-signature-parameter-default-value-color: var(--sd-colo=
r-tabs-label-inactive); }

dl.py code.sig-prename.descclassname > span.pre { font-weight: var(--api-si=
gnature-font-style-light); }

dl.py span.sig-paren { font-weight: var(--api-signature-font-style-light); =
}

div > dl.py > dt > em.sig-param > span.n > span.pre, div > dl.py > dt > spa=
n.pre { color: var(--api-signature-parameter-name-color); font-style: var(-=
-api-signature-parameter-name-font-style); }

dl.py em.sig-param > span.n > a { font-style: normal; }

dl.py em.sig-param > span.o > span.pre { color: var(--api-signature-paramet=
er-symbol-color); font-weight: var(--api-signature-font-style-light); }

dl.py em.sig-param > span.default_value > span.pre { color: var(--api-signa=
ture-parameter-default-value-color); font-weight: var(--api-signature-font-=
style-light); }

dl.py span.sig-return-typehint > span.pre { color: var(--api-signature-para=
meter-name-color); font-weight: var(--api-signature-font-style-light); }
------MultipartBoundary--LqhmvZwTEGngQgONNpxZE3xQGOpsvkJLZXDlKAsK95----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/_static/omni-style.css

@charset "utf-8";

@supports not (font-variation-settings: normal) {
  @font-face { font-family: NVIDIA; src: url("https://images.nvidia.com/etc=
/designs/nvidiaGDC/clientlibs_base/fonts/nvidia-sans/GLOBAL/NVIDIASans_W_Lt=
.woff") format("woff"), url("https://images.nvidia.com/etc/designs/nvidiaGD=
C/clientlibs_base/fonts/nvidia-sans/GLOBAL/NVIDIASans_W_Lt.woff2") format("=
woff2"); font-weight: 300; font-style: normal; }
  @font-face { font-family: NVIDIA; src: url("https://images.nvidia.com/etc=
/designs/nvidiaGDC/clientlibs_base/fonts/nvidia-sans/GLOBAL/NVIDIASans_W_Rg=
.woff") format("woff"), url("https://images.nvidia.com/etc/designs/nvidiaGD=
C/clientlibs_base/fonts/nvidia-sans/GLOBAL/NVIDIASans_W_Rg.woff2") format("=
woff2"); font-weight: 400; font-style: normal; }
  @font-face { font-family: NVIDIA; src: url("https://images.nvidia.com/etc=
/designs/nvidiaGDC/clientlibs_base/fonts/nvidia-sans/GLOBAL/NVIDIASans_W_Md=
.woff") format("woff"), url("https://images.nvidia.com/etc/designs/nvidiaGD=
C/clientlibs_base/fonts/nvidia-sans/GLOBAL/NVIDIASans_W_Md.woff2") format("=
woff2"); font-weight: 500; font-style: normal; }
  @font-face { font-family: NVIDIA; src: url("https://images.nvidia.com/etc=
/designs/nvidiaGDC/clientlibs_base/fonts/nvidia-sans/GLOBAL/NVIDIASans_W_Bd=
.woff") format("woff"), url("https://images.nvidia.com/etc/designs/nvidiaGD=
C/clientlibs_base/fonts/nvidia-sans/GLOBAL/NVIDIASans_W_Bd.woff2") format("=
woff2"); font-weight: 700; font-style: normal; }
}

@supports (font-variation-settings: normal) {
  @font-face { font-family: NVIDIA; src: url("https://images.nvidia.com/etc=
/designs/nvidiaGDC/clientlibs_base/fonts/nvidia-sans/GLOBAL/var/NVIDIASansV=
F_W_Wght.woff2") format("woff2-variations"); font-weight: 100 1000; font-st=
retch: 25% 151%; font-style: normal; }
  @font-face { font-family: NVIDIA; src: url("https://images.nvidia.com/etc=
/designs/nvidiaGDC/clientlibs_base/fonts/nvidia-sans/GLOBAL/var/NVIDIASansV=
F_Wght_W_Italic.woff2") format("woff2-variations"); font-weight: 100 1000; =
font-stretch: 25% 151%; font-style: italic; }
}

@supports not (font-variation-settings: normal) {
  @font-face { font-family: RobotoMono; src: url("https://images.nvidia.com=
/etc/designs/nvidiaGDC/clientlibs_base/fonts/Roboto_Mono/static/RobotoMono-=
Light.ttf") format("truetype"); font-weight: 300; font-style: normal; }
  @font-face { font-family: RobotoMono; src: url("https://images.nvidia.com=
/etc/designs/nvidiaGDC/clientlibs_base/fonts/Roboto_Mono/static/RobotoMono-=
Regular.ttf") format("truetype"); font-weight: 400; font-style: normal; }
  @font-face { font-family: RobotoMono; src: url("https://images.nvidia.com=
/etc/designs/nvidiaGDC/clientlibs_base/fonts/Roboto_Mono/static/RobotoMono-=
Medium.ttf") format("truetype"); font-weight: 500; font-style: normal; }
  @font-face { font-family: RobotoMono; src: url("https://images.nvidia.com=
/etc/designs/nvidiaGDC/clientlibs_base/fonts/Roboto_Mono/static/RobotoMono-=
Bold.ttf") format("truetype"); font-weight: 700; font-style: normal; }
}

@supports (font-variation-settings: normal) {
  @font-face { font-family: RobotoMono; src: url("https://images.nvidia.com=
/etc/designs/nvidiaGDC/clientlibs_base/fonts/Roboto_Mono/RobotoMono-Variabl=
eFont_wght.ttf") format("truetype-variations"); font-weight: 100 1000; font=
-stretch: 25% 151%; font-style: normal; }
  @font-face { font-family: RobotoMono; src: url("https://images.nvidia.com=
/etc/designs/nvidiaGDC/clientlibs_base/fonts/Roboto_Mono/RobotoMono-Italic-=
VariableFont_wght.ttf") format("truetype-variations"); font-weight: 100 100=
0; font-stretch: 25% 151%; font-style: italic; }
}

:root { --nv-green: #76b900; --nv-green-illuminate: #76d300; --nv-black: #0=
00000; --nv-white: #ffffff; --nv-green-2: #004831; --nv-success: var(--nv-g=
reen); --nv-error: #f44336; --nv-font-face: NVIDIA,Arial,Helvetica,Sans-Ser=
if; --nv-font-face-mono: RobotoMono,SFMono-Regular,Menlo,Monaco,Consolas,Li=
beration Mono,Courier New,Courier,monospace; --text: #1a1a1a; --background-=
default: #ffffff; --background-alternate: #eeeeee; --ui-and-graphics: #9999=
99; --white: #ffffff; --gray-1: #f7f7f7; --gray-2: #eeeeee; --gray-3: #dddd=
dd; --gray-4: #cccccc; --h1-color: var(--nv-green); --h1-font-weight: 100; =
--h1-letter-spacing: -0.02em; --h1-font-size: 36px; --h1-line-height: 1em; =
--h2-color: var(--nv-green); --h2-font-weight: 100; --h2-letter-spacing: -0=
.02em; --h2-font-size: 24px; --h2-line-height: 1em; --h3-color: var(--nv-gr=
een); --h3-font-weight: 100; --h3-letter-spacing: -0.02em; --h3-font-size: =
21px; --h3-line-height: 1em; --h4-color: var(--nv-green); --h4-font-weight:=
 100; --h4-letter-spacing: -0.02em; --h4-font-size: 18px; --h4-line-height:=
 1em; --h5-color: var(--nv-green); --h5-font-size: var(--body-font-size); -=
-h6-color: var(--nv-green); --h6-font-weight: 400; --body-font-color: var(-=
-text); --body-font-weight: normal; --body-font-size: 16px; --body-line-hei=
ght: 1.5em; --small-font-color: var(--ui-and-graphics); --small-font-weight=
: normal; --small-font-size: 12px; --small-line-height: 1.25em; --ul-font-c=
olor: var(--text); --ul-font-weight: normal; --ul-font-size: 16px; --ul-lin=
e-height: 2em; --ul-marker-font-face: FontAwesome; --ul-marker-content: '\f=
105 \00a0 \00a0'; --ol-font-color: var(--text); --ol-font-weight: normal; -=
-ol-font-size: 16px; --ol-line-height: 2em; --ol-list-style-type: decimal; =
--ol-ol-list-style-type: upper-alpha; --ol-ol-ol-list-style-type: decimal; =
--disabled-font-color: var(--gray-4); --disabled-font-weight: normal; --dis=
abled-font-size: 16px; --disabled-line-height: 1em; --error-font-color: var=
(--nv-error); --error-font-weight: normal; --error-font-size: 16px; --error=
-line-height: 1em; --success-font-color: var(--nv-success); --success-font-=
weight: normal; --success-font-size: 16px; --success-line-height: 1em; --si=
debar-color: #000000; --sidebar-alt-color: #333333; --sidebar-headline-colo=
r: var(--nv-green); --sidebar-text-color: #cccccc; --table-background-heade=
r: var(--nv-black); --table-background-alternate: var(--background-alternat=
e); --table-text: var(--text); --table-border: var(--ui-and-graphics); --ta=
ble-border-header: var(--gray-3); --h1-text-transform: none; --h2-text-tran=
sform: none; --h3-text-transform: none; --h4-text-transform: none; --note-b=
ackground-color: var(--nv-green); --note-background-alt-color: #cccccc; --i=
mportant-background-color: #f44336; --important-background-alt-color: #cccc=
cc; --link-color: var(--nv-green); --link-visited-color: var(--nv-green); -=
-link-hover-color: var(--nv-green-illuminate); --background-color: var(--ba=
ckground-default); --api-member-header-background-color: var(--gray-2); --a=
pi-member-header-border-color: var(--sidebar-headline-color); --api-member-=
header-text-color: var(--text); --api-member-header-link-color: var(--link-=
color); --api-member-background-color: var(--gray-1); --api-header-text-col=
or: var(--nv-green); --api-header-border-color: var(--ui-and-graphics); --s=
d-color-tabs-label-active: var(--nv-green); --sd-color-tabs-underline-activ=
e: var(--nv-green); --sd-color-tabs-label-hover: var(--nv-green-illuminate)=
; --sd-color-tabs-underline-hover: var(--nv-green-illuminate); }

.wy-nav-content { max-width: 1200px !important; background-color: var(--bac=
kground-color); }

#rtd-search-form, #rtd-search-form > input:nth-child(1) { color-scheme: lig=
ht; }

.rst-content .admonition-todo, .rst-content .attention, .rst-content .cauti=
on, .rst-content .warning, .rst-content .wy-alert-warning.admonition, .rst-=
content .wy-alert-warning.danger, .rst-content .wy-alert-warning.error, .rs=
t-content .wy-alert-warning.hint, .rst-content .wy-alert-warning.important,=
 .rst-content .wy-alert-warning.note, .rst-content .wy-alert-warning.seeals=
o, .rst-content .wy-alert-warning.tip, .wy-alert.wy-alert-warning { backgro=
und: rgb(255, 244, 224); }

.rst-content .admonition-todo .admonition-title, .rst-content .admonition-t=
odo .wy-alert-title, .rst-content .attention .admonition-title, .rst-conten=
t .attention .wy-alert-title, .rst-content .caution .admonition-title, .rst=
-content .caution .wy-alert-title, .rst-content .warning .admonition-title,=
 .rst-content .warning .wy-alert-title, .rst-content .wy-alert-warning.admo=
nition .admonition-title, .rst-content .wy-alert-warning.admonition .wy-ale=
rt-title, .rst-content .wy-alert-warning.danger .admonition-title, .rst-con=
tent .wy-alert-warning.danger .wy-alert-title, .rst-content .wy-alert-warni=
ng.error .admonition-title, .rst-content .wy-alert-warning.error .wy-alert-=
title, .rst-content .wy-alert-warning.hint .admonition-title, .rst-content =
.wy-alert-warning.hint .wy-alert-title, .rst-content .wy-alert-warning.impo=
rtant .admonition-title, .rst-content .wy-alert-warning.important .wy-alert=
-title, .rst-content .wy-alert-warning.note .admonition-title, .rst-content=
 .wy-alert-warning.note .wy-alert-title, .rst-content .wy-alert-warning.see=
also .admonition-title, .rst-content .wy-alert-warning.seealso .wy-alert-ti=
tle, .rst-content .wy-alert-warning.tip .admonition-title, .rst-content .wy=
-alert-warning.tip .wy-alert-title, .rst-content .wy-alert.wy-alert-warning=
 .admonition-title, .wy-alert.wy-alert-warning .rst-content .admonition-tit=
le, .wy-alert.wy-alert-warning .wy-alert-title { background: rgb(241, 169, =
47); }

.rst-content .danger, .rst-content .error, .rst-content .wy-alert-danger.ad=
monition, .rst-content .wy-alert-danger.admonition-todo, .rst-content .wy-a=
lert-danger.attention, .rst-content .wy-alert-danger.caution, .rst-content =
.wy-alert-danger.hint, .rst-content .wy-alert-danger.important, .rst-conten=
t .wy-alert-danger.note, .rst-content .wy-alert-danger.seealso, .rst-conten=
t .wy-alert-danger.tip, .rst-content .wy-alert-danger.warning, .wy-alert.wy=
-alert-danger { background: rgb(254, 240, 237); }

.rst-content .danger .admonition-title, .rst-content .danger .wy-alert-titl=
e, .rst-content .error .admonition-title, .rst-content .error .wy-alert-tit=
le, .rst-content .wy-alert-danger.admonition-todo .admonition-title, .rst-c=
ontent .wy-alert-danger.admonition-todo .wy-alert-title, .rst-content .wy-a=
lert-danger.admonition .admonition-title, .rst-content .wy-alert-danger.adm=
onition .wy-alert-title, .rst-content .wy-alert-danger.attention .admonitio=
n-title, .rst-content .wy-alert-danger.attention .wy-alert-title, .rst-cont=
ent .wy-alert-danger.caution .admonition-title, .rst-content .wy-alert-dang=
er.caution .wy-alert-title, .rst-content .wy-alert-danger.hint .admonition-=
title, .rst-content .wy-alert-danger.hint .wy-alert-title, .rst-content .wy=
-alert-danger.important .admonition-title, .rst-content .wy-alert-danger.im=
portant .wy-alert-title, .rst-content .wy-alert-danger.note .admonition-tit=
le, .rst-content .wy-alert-danger.note .wy-alert-title, .rst-content .wy-al=
ert-danger.seealso .admonition-title, .rst-content .wy-alert-danger.seealso=
 .wy-alert-title, .rst-content .wy-alert-danger.tip .admonition-title, .rst=
-content .wy-alert-danger.tip .wy-alert-title, .rst-content .wy-alert-dange=
r.warning .admonition-title, .rst-content .wy-alert-danger.warning .wy-aler=
t-title, .rst-content .wy-alert.wy-alert-danger .admonition-title, .wy-aler=
t.wy-alert-danger .rst-content .admonition-title, .wy-alert.wy-alert-danger=
 .wy-alert-title { background: var(--nv-error); }

.rst-content .hint, .rst-content .important, .rst-content .tip, .rst-conten=
t .wy-alert-success.admonition, .rst-content .wy-alert-success.admonition-t=
odo, .rst-content .wy-alert-success.attention, .rst-content .wy-alert-succe=
ss.caution, .rst-content .wy-alert-success.danger, .rst-content .wy-alert-s=
uccess.error, .rst-content .wy-alert-success.note, .rst-content .wy-alert-s=
uccess.seealso, .rst-content .wy-alert-success.warning, .wy-alert.wy-alert-=
success, .rst-content .note, .rst-content .seealso, .rst-content .wy-alert-=
info.admonition, .rst-content .wy-alert-info.admonition-todo, .rst-content =
.wy-alert-info.attention, .rst-content .wy-alert-info.caution, .rst-content=
 .wy-alert-info.danger, .rst-content .wy-alert-info.error, .rst-content .wy=
-alert-info.hint, .rst-content .wy-alert-info.important, .rst-content .wy-a=
lert-info.tip, .rst-content .wy-alert-info.warning, .wy-alert.wy-alert-info=
 { background: rgb(231, 250, 223); }

.rst-content .hint .admonition-title, .rst-content .hint .wy-alert-title, .=
rst-content .important .admonition-title, .rst-content .important .wy-alert=
-title, .rst-content .tip .admonition-title, .rst-content .tip .wy-alert-ti=
tle, .rst-content .wy-alert-success.admonition-todo .admonition-title, .rst=
-content .wy-alert-success.admonition-todo .wy-alert-title, .rst-content .w=
y-alert-success.admonition .admonition-title, .rst-content .wy-alert-succes=
s.admonition .wy-alert-title, .rst-content .wy-alert-success.attention .adm=
onition-title, .rst-content .wy-alert-success.attention .wy-alert-title, .r=
st-content .wy-alert-success.caution .admonition-title, .rst-content .wy-al=
ert-success.caution .wy-alert-title, .rst-content .wy-alert-success.danger =
.admonition-title, .rst-content .wy-alert-success.danger .wy-alert-title, .=
rst-content .wy-alert-success.error .admonition-title, .rst-content .wy-ale=
rt-success.error .wy-alert-title, .rst-content .wy-alert-success.note .admo=
nition-title, .rst-content .wy-alert-success.note .wy-alert-title, .rst-con=
tent .wy-alert-success.seealso .admonition-title, .rst-content .wy-alert-su=
ccess.seealso .wy-alert-title, .rst-content .wy-alert-success.warning .admo=
nition-title, .rst-content .wy-alert-success.warning .wy-alert-title, .rst-=
content .wy-alert.wy-alert-success .admonition-title, .wy-alert.wy-alert-su=
ccess .rst-content .admonition-title, .wy-alert.wy-alert-success .wy-alert-=
title, .rst-content .note .admonition-title, .rst-content .note .wy-alert-t=
itle, .rst-content .seealso .admonition-title, .rst-content .seealso .wy-al=
ert-title, .rst-content .wy-alert-info.admonition-todo .admonition-title, .=
rst-content .wy-alert-info.admonition-todo .wy-alert-title, .rst-content .w=
y-alert-info.admonition .admonition-title, .rst-content .wy-alert-info.admo=
nition .wy-alert-title, .rst-content .wy-alert-info.attention .admonition-t=
itle, .rst-content .wy-alert-info.attention .wy-alert-title, .rst-content .=
wy-alert-info.caution .admonition-title, .rst-content .wy-alert-info.cautio=
n .wy-alert-title, .rst-content .wy-alert-info.danger .admonition-title, .r=
st-content .wy-alert-info.danger .wy-alert-title, .rst-content .wy-alert-in=
fo.error .admonition-title, .rst-content .wy-alert-info.error .wy-alert-tit=
le, .rst-content .wy-alert-info.hint .admonition-title, .rst-content .wy-al=
ert-info.hint .wy-alert-title, .rst-content .wy-alert-info.important .admon=
ition-title, .rst-content .wy-alert-info.important .wy-alert-title, .rst-co=
ntent .wy-alert-info.tip .admonition-title, .rst-content .wy-alert-info.tip=
 .wy-alert-title, .rst-content .wy-alert-info.warning .admonition-title, .r=
st-content .wy-alert-info.warning .wy-alert-title, .rst-content .wy-alert.w=
y-alert-info .admonition-title, .wy-alert.wy-alert-info .rst-content .admon=
ition-title, .wy-alert.wy-alert-info .wy-alert-title { background: var(--nv=
-success); }

body { font-family: var(--nv-font-face); color: var(--body-font-color); fon=
t-weight: var(--body-font-weight); font-size: var(--body-font-size); line-h=
eight: var(--body-line-height); }

h1, p.rubric.rubric-h1 { color: var(--h1-color); font-family: var(--nv-font=
-face); font-weight: var(--h1-font-weight); font-size: var(--h1-font-size);=
 font-style: normal; line-height: var(--h1-line-height); margin-top: 0.75em=
; text-transform: var(--h1-text-transform); margin-bottom: 0.75em !importan=
t; }

h2, p.rubric.rubric-h2 { color: var(--h2-color); font-family: var(--nv-font=
-face); font-weight: var(--h2-font-weight); font-size: var(--h2-font-size);=
 font-style: normal; line-height: var(--h2-line-height); margin-top: 1.25em=
; text-transform: var(--h2-text-transform); margin-bottom: 0.5em !important=
; }

h3, p.rubric.rubric-h3 { color: var(--h3-color); font-family: var(--nv-font=
-face); font-weight: var(--h3-font-weight); font-size: var(--h3-font-size);=
 font-style: normal; line-height: var(--h3-line-height); margin-top: 1.25em=
; text-transform: var(--h3-text-transform); margin-bottom: 0.5em !important=
; }

h4, p.rubric.rubric-h4 { color: var(--h4-color); font-family: var(--nv-font=
-face); font-weight: var(--h4-font-weight); font-size: var(--h4-font-size);=
 font-style: normal; line-height: var(--h4-line-height); margin-top: 1.25em=
; text-transform: var(--h4-text-transform); margin-bottom: 0.5em !important=
; }

h5, p.rubric.rubric-h5 { color: var(--h5-color); font-family: var(--nv-font=
-face); font-size: var(--h5-font-size); }

h6, p.rubric.rubric-h6 { color: var(--h6-color); font-family: var(--nv-font=
-face); font-weight: var(--h6-font-weight); }

p { margin: 15px 5px 15px 0px; font-size: var(--body-font-size); line-heigh=
t: var(--body-line-height); color: var(--text); }

span[id*=3D"MathJax-Span"] { color: inherit; }

.rst-content .highlighted { background: rgba(241, 196, 15, 0.23); box-shado=
w: rgb(241, 196, 15) 0px 0px 0px 1px; display: inline; font-weight: inherit=
; }

.rst-content .toc-backref { color: inherit; }

.rst-content code.xref, .rst-content tt.xref, a .rst-content code, a .rst-c=
ontent tt { color: rgb(231, 76, 60); font-weight: inherit; }

a { color: var(--link-color); }

a:visited { color: var(--link-visited-color); }

a:hover { color: var(--link-hover-color); }

.rst-content a code.xref, .rst-content a tt.xref { color: var(--link-color)=
; border: none; }

a.external::after { font-family: FontAwesome; content: "=EF=82=8E"; margin-=
left: 0.3em; font-size: 0.75em; }

footer p { color: var(--small-font-color); font-weight: var(--small-font-we=
ight); font-size: var(--small-font-size); line-height: var(--small-line-hei=
ght); }

footer p:not(.notices) { display: inline; margin: 0px; }

footer p a, footer p a:visited { color: var(--small-font-color); }

footer p a:hover { color: var(--text); }

footer img { width: 110px; position: relative; left: -9px; margin: 0px 0px =
15px; }

footer img.only-light { display: block; }

footer img.only-dark { display: none; }

.asterisks { color: var(--nv-green); font-size: 0.9em; font-weight: 400; }

.rst-content a code.download, .rst-content a tt.download { font-family: var=
(--nv-font-face); color: var(--nv-green); font-weight: var(--body-font-weig=
ht); font-size: var(--body-font-size); line-height: var(--body-line-height)=
; }

.rst-content pre.literal-block, .rst-content .linenodiv pre, .rst-content d=
iv[class^=3D"highlight"] pre, .rst-content tt, .rst-content code, .rst-cont=
ent pre, .rst-content kbd, .rst-content samp, html.writer-html5 .rst-conten=
t dl[class]:not(.option-list):not(.field-list):not(.footnote):not(.glossary=
):not(.simple) .descname, html.writer-html5 .rst-content dl[class]:not(.opt=
ion-list):not(.field-list):not(.footnote):not(.glossary):not(.simple) .desc=
classname, html.writer-html5 .rst-content dl[class]:not(.option-list):not(.=
field-list):not(.footnote):not(.glossary):not(.simple) .sig-name, html.writ=
er-html5 .rst-content dl[class]:not(.option-list):not(.field-list):not(.foo=
tnote):not(.glossary):not(.simple) > dt:first-child { font-family: var(--nv=
-font-face-mono); }

.rst-content table.docutils, .wy-table-bordered-all { border-color: var(--t=
able-border); }

.rst-content table.docutils td, .rst-content table.field-list td, .wy-table=
 td { vertical-align: top; font-size: var(--body-font-size); line-height: v=
ar(--body-line-height); border-color: var(--table-border); white-space: nor=
mal !important; }

.rst-content table.docutils td:first-child, .rst-content table.docutils th:=
first-child, .rst-content table.field-list td:first-child, .rst-content tab=
le.field-list th:first-child, .wy-table td:first-child, .wy-table th:first-=
child { border-left-width: 1px; }

.rst-content table.docutils:not(.field-list) tr:nth-child(2n-1) td, .wy-tab=
le-backed, .wy-table-odd td, .wy-table-striped tr:nth-child(2n-1) td { back=
ground-color: var(--table-background-alternate); }

.rst-content table.docutils.table-no-stripes:not(.field-list) tr:nth-child(=
2n-1) td { background-color: var(--table-background); }

.rst-content table.docutils.table-no-borders:not(.field-list), .rst-content=
 table.docutils.table-no-borders:not(.field-list) td { border: none; }

.rst-content table.docutils.table-right-align-first-column:not(.field-list)=
 tr td:first-of-type { text-align: right; }

.rst-content table.docutils.table-compact-cells td, .rst-content table.docu=
tils.table-compact-cells th { padding: 4px; }

.rst-content table.docutils.table-compact-cells td p, .rst-content table.do=
cutils.table-compact-cells th p { margin-top: 0px; }

html.writer-html5 .rst-content table.docutils th, .rst-content table.docuti=
ls thead th, .rst-content table.field-list thead th, .wy-table thead th, .r=
st-content table.docutils thead th p, .rst-content table.field-list thead t=
h p, .wy-table thead th p { background-color: var(--table-background-header=
); color: var(--sidebar-text-color); border-color: var(--table-border-heade=
r); }

html.writer-html5 .rst-content table.docutils th > p { color: var(--sidebar=
-text-color); font-size: var(--body-font-size); line-height: var(--body-lin=
e-height); }

html.writer-html5 .rst-content table.docutils td > p, html.writer-html5 .rs=
t-content table.docutils th > p { font-size: var(--body-font-size); line-he=
ight: var(--body-line-height); }

.rst-content table.docutils caption, .rst-content table.field-list caption,=
 .wy-table caption { color: var(--text); }

.wy-table td p:first-child, .rst-content table.docutils td p:first-child, .=
rst-content table.field-list td p:first-child, .wy-table th p:first-child, =
.rst-content table.docutils th p:first-child, .rst-content table.field-list=
 th p:first-child { margin-top: 0px; }

.wy-table td p:last-child, .rst-content table.docutils td p:last-child, .rs=
t-content table.field-list td p:last-child, .wy-table th p:last-child, .rst=
-content table.docutils th p:last-child, .rst-content table.field-list th p=
:last-child { margin-bottom: 0px; }

.rst-content table.docutils.table-compact td, .rst-content table.docutils.t=
able-compact th { padding: 8px; }

html.writer-html5 .rst-content table.docutils.table-compact td > p, html.wr=
iter-html5 .rst-content table.docutils.table-compact th > p { font-size: va=
r(--small-font-size); line-height: var(--small-line-height); }

.rst-content section ul li::marker, .rst-content .toctree-wrapper ul li::ma=
rker, .wy-plain-list-disc li::marker, article ul li::marker { font-family: =
var(--ul-marker-font-face); content: var(--ul-marker-content); color: var(-=
-nv-green); font-weight: 600; }

.rst-content section ol li::marker, .rst-content ol.arabic li::marker, .wy-=
plain-list-decimal li::marker, article ol li::marker { font-family: inherit=
; content: inherit; color: var(--nv-green); font-weight: 600; list-style: v=
ar(--ol-list-style-type); }

.rst-content section ol ol li, .rst-content ol.arabic ol.arabic li, .wy-pla=
in-list-decimal ol ol li, article ol ol li { list-style: var(--ol-ol-list-s=
tyle-type); }

.rst-content section ol ol ol li, .rst-content ol.arabic ol.arabic ol li, .=
wy-plain-list-decimal ol ol ol li, article ol ol ol li { list-style: var(--=
ol-ol-ol-list-style-type); }

.rst-content section .treeView li::marker { content: url("collapsible-lists=
/css/button.png") !important; }

.rst-content section .treeView li.collapsibleListClosed::marker { content: =
url("collapsible-lists/css/button-closed.png") !important; }

.rst-content section .treeView li.collapsibleListOpen::marker { content: ur=
l("collapsible-lists/css/button-open.png") !important; }

dd p:first-child { margin-top: 0px; }

.wy-side-nav-search { width: unset; }

.wy-side-nav-search, .wy-nav-top { background-color: var(--sidebar-color); =
}

.wy-side-nav-search > a { padding: 0px; margin: 0px; }

.wy-side-nav-search > a:visited { color: rgb(252, 252, 252); }

.wy-side-nav-project { margin-top: 0.6em; margin-bottom: 0.6em; }

.wy-side-nav-search input[type=3D"text"] { border-radius: 0px; }

.wy-nav-side { color: var(--sidebar-headline-color); background: var(--side=
bar-color); }

@media screen and (min-width: 1500px) {
  .wy-nav-side { margin-left: calc(50% - 750px); }
}

.wy-side-nav-search, .wy-side-nav-search img { padding: 0px; }

.wy-menu-vertical { width: unset; }

.wy-menu-vertical p.caption { color: var(--sidebar-headline-color); backgro=
und-color: var(--sidebar-alt-color); }

.wy-menu-vertical a { color: var(--sidebar-text-color); }

.wy-menu-vertical li.toctree-l1.current li.toctree-l2 > a, .wy-menu-vertica=
l li.toctree-l2.current li.toctree-l3 > a, .wy-menu-vertical li.toctree-l3.=
current li.toctree-l4 > a, .wy-menu-vertical li.toctree-l4.current li.toctr=
ee-l5 > a, .wy-menu-vertical li.toctree-l5.current li.toctree-l6 > a, .wy-m=
enu-vertical li.toctree-l6.current li.toctree-l7 > a, .wy-menu-vertical li.=
toctree-l7.current li.toctree-l8 > a, .wy-menu-vertical li.toctree-l8.curre=
nt li.toctree-l9 > a, .wy-menu-vertical li.toctree-l9.current li.toctree-l1=
0 > a { color: rgb(32, 32, 32); border: none; }

.wy-menu-vertical li.toctree-l1.current li.toctree-l2 > a { background-colo=
r: rgb(240, 240, 240); }

.wy-menu-vertical li.toctree-l2.current li.toctree-l3 > a { background-colo=
r: rgb(232, 232, 232); }

.wy-menu-vertical li.toctree-l3.current li.toctree-l4 > a { background-colo=
r: rgb(224, 224, 224); }

.wy-menu-vertical li.toctree-l4.current li.toctree-l5 > a { background-colo=
r: rgb(216, 216, 216); }

.wy-menu-vertical li.toctree-l5.current li.toctree-l6 > a { background-colo=
r: rgb(208, 208, 208); }

.wy-menu-vertical li.toctree-l6.current li.toctree-l7 > a { background-colo=
r: rgb(200, 200, 200); }

.wy-menu-vertical li.toctree-l7.current li.toctree-l8 > a { background-colo=
r: rgb(192, 192, 192); }

.wy-menu-vertical li.toctree-l8.current li.toctree-l9 > a { background-colo=
r: rgb(184, 184, 184); }

.wy-menu-vertical li.toctree-l9.current li.toctree-l10 > a { background-col=
or: rgb(176, 176, 176); }

.wy-menu-vertical li.toctree-l1.current:hover li.toctree-l2 > a:hover { bac=
kground-color: rgb(232, 232, 232); }

.wy-menu-vertical li.toctree-l2.current:hover li.toctree-l3 > a:hover { bac=
kground-color: rgb(224, 224, 224); }

.wy-menu-vertical li.toctree-l3.current:hover li.toctree-l4 > a:hover { bac=
kground-color: rgb(216, 216, 216); }

.wy-menu-vertical li.toctree-l4.current:hover li.toctree-l5 > a:hover { bac=
kground-color: rgb(208, 208, 208); }

.wy-menu-vertical li.toctree-l5.current:hover li.toctree-l6 > a:hover { bac=
kground-color: rgb(200, 200, 200); }

.wy-menu-vertical li.toctree-l6.current:hover li.toctree-l7 > a:hover { bac=
kground-color: rgb(192, 192, 192); }

.wy-menu-vertical li.toctree-l7.current:hover li.toctree-l8 > a:hover { bac=
kground-color: rgb(184, 184, 184); }

.wy-menu-vertical li.toctree-l8.current:hover li.toctree-l9 > a:hover { bac=
kground-color: rgb(176, 176, 176); }

.wy-menu-vertical li.toctree-l9.current:hover li.toctree-l10 > a:hover { ba=
ckground-color: rgb(168, 168, 168); }

.wy-menu-vertical li.toctree-l1 a:hover, .wy-menu-vertical li.toctree-l2 a:=
hover, .wy-menu-vertical li.toctree-l3 a:hover, .wy-menu-vertical li.toctre=
e-l4 a:hover, .wy-menu-vertical li.toctree-l5 a:hover, .wy-menu-vertical li=
.toctree-l6 a:hover, .wy-menu-vertical li.toctree-l7 a:hover, .wy-menu-vert=
ical li.toctree-l8 a:hover, .wy-menu-vertical li.toctree-l9 a:hover, .wy-me=
nu-vertical li.toctree-l10 a:hover { color: rgb(32, 32, 32); background-col=
or: rgb(221, 221, 221); }

.wy-menu-vertical .toctree-l1 a:hover, .wy-menu-vertical .toctree-l2 a:hove=
r, .wy-menu-vertical .toctree-l3 a:hover, .wy-menu-vertical .toctree-l4 a:h=
over, .wy-menu-vertical .toctree-l5 a:hover, .wy-menu-vertical .toctree-l6 =
a:hover, .wy-menu-vertical .toctree-l7 a:hover, .wy-menu-vertical .toctree-=
l8 a:hover, .wy-menu-vertical .toctree-l9 a:hover, .wy-menu-vertical .toctr=
ee-l10 a:hover { color: rgb(0, 0, 0); background-color: rgb(238, 238, 238);=
 }

.wy-menu-vertical .toctree-l1.current a:hover, .wy-menu-vertical .toctree-l=
2.current a:hover, .wy-menu-vertical .toctree-l3.current a:hover, .wy-menu-=
vertical .toctree-l4.current a:hover, .wy-menu-vertical .toctree-l5.current=
 a:hover, .wy-menu-vertical .toctree-l6.current a:hover, .wy-menu-vertical =
.toctree-l7.current a:hover, .wy-menu-vertical .toctree-l8.current a:hover,=
 .wy-menu-vertical .toctree-l9.current a:hover, .wy-menu-vertical .toctree-=
l10.current a:hover { color: rgb(32, 32, 32); }

.wy-menu-vertical .toctree-l1.current, .wy-menu-vertical .toctree-l2.curren=
t, .wy-menu-vertical .toctree-l3.current, .wy-menu-vertical .toctree-l4.cur=
rent, .wy-menu-vertical .toctree-l5.current, .wy-menu-vertical .toctree-l6.=
current, .wy-menu-vertical .toctree-l7.current, .wy-menu-vertical .toctree-=
l8.current, .wy-menu-vertical .toctree-l9.current, .wy-menu-vertical .toctr=
ee-l10.current { color: rgb(32, 32, 32); }

.wy-menu-vertical .toctree-l1.current a, .wy-menu-vertical .toctree-l2.curr=
ent a, .wy-menu-vertical .toctree-l3.current a, .wy-menu-vertical .toctree-=
l4.current a, .wy-menu-vertical .toctree-l5.current a, .wy-menu-vertical .t=
octree-l6.current a, .wy-menu-vertical .toctree-l7.current a, .wy-menu-vert=
ical .toctree-l8.current a, .wy-menu-vertical .toctree-l9.current a, .wy-me=
nu-vertical .toctree-l10.current a, .wy-menu-vertical .toctree-l1.on a, .wy=
-menu-vertical .toctree-l2.on a, .wy-menu-vertical .toctree-l3.on a, .wy-me=
nu-vertical .toctree-l4.on a, .wy-menu-vertical .toctree-l5.on a, .wy-menu-=
vertical .toctree-l6.on a, .wy-menu-vertical .toctree-l7.on a, .wy-menu-ver=
tical .toctree-l8.on a, .wy-menu-vertical .toctree-l9.on a, .wy-menu-vertic=
al .toctree-l10.on a { color: rgb(32, 32, 32); background-color: rgb(238, 2=
38, 238); }

.wy-menu-vertical li span.toctree-expand, .wy-menu-vertical li.current > a =
span.toctree-expand, .wy-menu-vertical li.current > a:hover span.toctree-ex=
pand, .wy-menu-vertical li.current > a button.toctree-expand, .wy-menu-vert=
ical li.current > a:hover button.toctree-expand, .wy-menu-vertical li.on > =
a span.toctree-expand, .wy-menu-vertical li.on > a:hover span.toctree-expan=
d, .wy-menu-vertical li.on a button.toctree-expand { color: rgb(32, 32, 32)=
; }

.cpp.struct .cpp.function, .cpp.class .cpp.function, .cpp.struct .cpp.enum,=
 .cpp.class .cpp.enum, .cpp.struct .cpp.var, .cpp.class .cpp.var, .py.class=
 .py.method { background: var(--api-member-background-color); }

html.writer-html5 .rst-content dl[class]:not(.option-list):not(.field-list)=
:not(.footnote):not(.glossary):not(.simple).cpp.struct > dt:first-child, ht=
ml.writer-html5 .rst-content dl[class]:not(.option-list):not(.field-list):n=
ot(.footnote):not(.glossary):not(.simple).cpp.type > dt:first-child, html.w=
riter-html5 .rst-content dl[class]:not(.option-list):not(.field-list):not(.=
footnote):not(.glossary):not(.simple).cpp.function > dt:first-child, html.w=
riter-html5 .rst-content dl[class]:not(.option-list):not(.field-list):not(.=
footnote):not(.glossary):not(.simple).cpp.macro > dt:first-child, html.writ=
er-html5 .rst-content dl[class]:not(.option-list):not(.field-list):not(.foo=
tnote):not(.glossary):not(.simple).cpp.enum > dt:first-child, html.writer-h=
tml5 .rst-content dl[class]:not(.option-list):not(.field-list):not(.footnot=
e):not(.glossary):not(.simple).cpp.class > dt:first-child, html.writer-html=
5 .rst-content dl[class]:not(.option-list):not(.field-list):not(.footnote):=
not(.glossary):not(.simple).py.function > dt:first-child, html.writer-html5=
 .rst-content dl[class]:not(.option-list):not(.field-list):not(.footnote):n=
ot(.glossary):not(.simple).py.class > dt:first-child { color: var(--api-hea=
der-text-color); border-top-width: 1px; border-top-style: solid; border-bot=
tom-width: 1px; border-bottom-style: solid; background-color: transparent; =
padding: 5px 0px; margin: 15px 0px; letter-spacing: -0.5px; font-weight: 50=
0; font-style: normal; font-size: 20px; width: 100%; border-color: var(--ap=
i-header-border-color) !important; }

dl.py { font-style: normal; }

dl.py .sig.sig-object.py { font-weight: 400; }

dl.py .sig.sig-object.py span.sig-name.descname { font-weight: 800; }

dl.py .sig-param::before { content: "\a     "; white-space: pre; }

dl.py dt em.sig-param:last-of-type::after { content: "\a "; white-space: pr=
e; }

dl.class > dt:first-of-type { display: block !important; }

.sig-param span.p, .sig-param span.o, .sig-param span.default_value { font-=
style: normal; }

html.writer-html5 .rst-content dl[class]:not(.option-list):not(.field-list)=
:not(.footnote):not(.glossary):not(.simple).cpp.struct > dt:first-child cod=
e, html.writer-html5 .rst-content dl[class]:not(.option-list):not(.field-li=
st):not(.footnote):not(.glossary):not(.simple).cpp.type > dt:first-child co=
de, html.writer-html5 .rst-content dl[class]:not(.option-list):not(.field-l=
ist):not(.footnote):not(.glossary):not(.simple).cpp.function > dt:first-chi=
ld code, html.writer-html5 .rst-content dl[class]:not(.option-list):not(.fi=
eld-list):not(.footnote):not(.glossary):not(.simple).cpp.macro > dt:first-c=
hild code, html.writer-html5 .rst-content dl[class]:not(.option-list):not(.=
field-list):not(.footnote):not(.glossary):not(.simple).cpp.enum > dt:first-=
child code, html.writer-html5 .rst-content dl[class]:not(.option-list):not(=
.field-list):not(.footnote):not(.glossary):not(.simple).cpp.class > dt:firs=
t-child code, html.writer-html5 .rst-content dl[class]:not(.option-list):no=
t(.field-list):not(.footnote):not(.glossary):not(.simple).py.function > dt:=
first-child code, html.writer-html5 .rst-content dl[class]:not(.option-list=
):not(.field-list):not(.footnote):not(.glossary):not(.simple).py.class > dt=
:first-child code { color: var(--api-header-text-color); padding: 0px; }

html.writer-html5 .rst-content dl[class]:not(.option-list):not(.field-list)=
:not(.footnote):not(.glossary):not(.simple) > dt .headerlink { color: var(-=
-api-header-text-color); font-size: 14px !important; }

html.writer-html5 .rst-content dl[class]:not(.option-list):not(.field-list)=
:not(.footnote):not(.citation):not(.glossary):not(.simple) dl:not(.option-l=
ist):not(.field-list):not(.footnote):not(.citation):not(.glossary):not(.sim=
ple) > dt { border-top: none; border-right: none; border-left: none; border=
-image: initial; background: var(--api-member-header-background-color); col=
or: var(--api-member-header-text-color); width: 100%; font-size: 100%; padd=
ing: 6px; margin: 0px 0px 6px; border-bottom: 2px solid var(--api-member-he=
ader-border-color) !important; display: inline-block !important; }

html.writer-html4 .rst-content dl:not(.docutils) .property, html.writer-htm=
l5 .rst-content dl[class]:not(.option-list):not(.field-list):not(.footnote)=
:not(.glossary):not(.simple) .property { display: unset; }

html.writer-html4 .rst-content dl:not(.docutils) .descclassname, html.write=
r-html4 .rst-content dl:not(.docutils) .descname, html.writer-html4 .rst-co=
ntent dl:not(.docutils) .sig-name, html.writer-html5 .rst-content dl[class]=
:not(.option-list):not(.field-list):not(.footnote):not(.citation):not(.glos=
sary):not(.simple) .descclassname, html.writer-html5 .rst-content dl[class]=
:not(.option-list):not(.field-list):not(.footnote):not(.citation):not(.glos=
sary):not(.simple) .descname, html.writer-html5 .rst-content dl[class]:not(=
.option-list):not(.field-list):not(.footnote):not(.citation):not(.glossary)=
:not(.simple) .sig-name { color: var(--api-member-header-text-color); }

html.writer-html5 .rst-content dl[class]:not(.option-list):not(.field-list)=
:not(.footnote):not(.glossary):not(.simple) dl:not(.field-list):not(.simple=
):not(.enumerator) > dt .sig-name { color: var(--api-member-header-text-col=
or); }

html.writer-html5 .rst-content dl[class]:not(.option-list):not(.field-list)=
:not(.footnote):not(.glossary):not(.simple) dl:not(.field-list):not(.simple=
):not(.enumerator) > dt .headerlink { color: var(--api-member-header-link-c=
olor); }

html.writer-html5 .rst-content dl[class]:not(.option-list):not(.field-list)=
:not(.footnote):not(.glossary):not(.simple) dl:not(.field-list):not(.simple=
):not(.enumerator) > dt > code { color: var(--api-member-header-text-color)=
; }

html.writer-html5 .rst-content dl[class]:not(.option-list):not(.field-list)=
:not(.footnote):not(.glossary):not(.simple) dl.simple > dt { border: none; =
background: transparent; color: var(--api-member-header-text-color); }

html.writer-html5 .rst-content dl[class]:not(.option-list):not(.field-list)=
:not(.footnote):not(.glossary):not(.simple) > dt { margin-bottom: 6px; bord=
er-top: none; border-right: none; border-left: none; border-image: initial;=
 border-bottom: 2px solid var(--api-member-header-border-color); background=
: var(--api-member-header-background-color); color: var(--api-member-header=
-text-color); width: 100%; font-size: 100%; display: inline-block !importan=
t; }

html.writer-html5 .rst-content dl[class]:not(.option-list):not(.field-list)=
:not(.footnote):not(.glossary):not(.simple):not(.enumerator) > dt .headerli=
nk { color: var(--api-member-header-link-color); }

html.writer-html5 .rst-content dl[class]:not(.option-list):not(.field-list)=
:not(.footnote):not(.glossary):not(.simple):not(.enumerator) > dt > code { =
color: var(--api-member-header-text-color); font-family: var(--nv-font-face=
); }

html.writer-html5 .rst-content dl[class]:not(.option-list):not(.field-list)=
:not(.footnote):not(.glossary):not(.simple):not(.enumerator) > dt > code > =
code { color: var(--api-member-header-text-color); }

html.writer-html5 .rst-content dl[class]:not(.option-list):not(.field-list)=
:not(.footnote):not(.glossary):not(.simple) dl.cpp.enumerator > dt { border=
: none; background: transparent; }

.wy-grid-for-nav { max-width: 1500px; margin: 0px auto; position: static; b=
order-left: 1px solid rgb(201, 201, 201); border-right: 1px solid rgb(201, =
201, 201); min-height: 100vh; background-color: var(--background-default); =
}

.wy-side-scroll { background-color: var(--sidebar-color); width: unset; ove=
rflow-y: auto; }

.wy-nav-content-wrap { background-color: var(--background-default); }

@media screen and (min-width: 1100px) {
  .wy-nav-content-wrap { background: inherit; }
}

.wy-breadcrumbs li.wy-breadcrumbs-aside > a { padding: 0px; }

.omni-version { position: fixed; bottom: 0px; background-color: var(--sideb=
ar-alt-color); width: 300px; line-height: 32px; padding-right: 1.618em; col=
or: var(--sidebar-text-color); text-align: center; }

.omni-version-content::before { font-family: var(--ul-marker-font-face); co=
ntent: "=EF=84=A6"; padding-left: 10px; padding-right: 3px; color: var(--si=
debar-text-color); }

div .wy-menu.wy-menu-vertical { margin-bottom: 2.5em; }

.omni-version-select { padding: inherit; background-color: var(--sidebar-al=
t-color); border: inherit; box-shadow: none; font-size: inherit; font-famil=
y: inherit; color: var(--sidebar-text-color); }

.omni-version-warning-content { padding: 8px; text-align: center; border-ra=
dius: 4px; color: rgb(133, 100, 4); border-color: rgb(255, 238, 186); borde=
r-style: solid; border-width: 1px; background: repeating-linear-gradient(13=
5deg, transparent, transparent 56px, rgba(255, 255, 255, 0.2) 56px, rgba(25=
5, 255, 255, 0.2) 112px) rgb(255, 243, 205); margin: 0px 0px 24px; }

@media screen and (max-width: 768px) {
  .omni-version-warning-content { width: 100%; }
}

.omni-version-warning-content a { color: rgb(83, 63, 3); font-weight: 700; =
text-decoration: none; }

.omni-version-warning-content::before { font-family: var(--ul-marker-font-f=
ace); content: "=EF=81=B1"; padding-left: 5px; }

.fa { font-family: var(--ul-marker-font-face); }

.social-media-icon a, .social-media-icon a:visited { color: rgb(201, 201, 2=
01); }

.social-media-icon a:hover { color: var(--sidebar-alt-color); }

details.sd-dropdown .sd-summary-up svg, details.sd-dropdown .sd-summary-dow=
n svg { stroke: var(--nv-green); fill: var(--nv-green); opacity: 1; stroke-=
width: 1px; }

.rebreather.hierarchy details.sd-dropdown { border: none; margin-bottom: 0p=
x !important; }

.rebreather.hierarchy div.rebreather.hierarchy ul, .rebreather.hierarchy de=
tails.sd-dropdown ul { margin-bottom: 0px; }

.rebreather.hierarchy details.sd-dropdown div.sd-summary-content { padding-=
top: 0px; padding-bottom: 0px; }

.rebreather.hierarchy details.sd-dropdown > .sd-card-header { border: none;=
 padding-left: 1.5em; padding-top: 0px; padding-bottom: 0px; }

.rebreather.hierarchy details.sd-dropdown:not([open]) > .sd-card-header { b=
order: none; padding-left: 1.5em; padding-top: 0px; padding-bottom: 0px; }

.rebreather.hierarchy details.sd-dropdown > .sd-summary-title .sd-summary-u=
p { right: unset; left: 0.35em; top: 0.35em; font-size: 0.7em; }

.rebreather.hierarchy details.sd-dropdown:not([open]) > .sd-summary-title .=
sd-summary-down { right: unset; left: 0.35em; top: 0.35em; font-size: 0.7em=
; }

.caption-number::after { content: ": "; margin-left: -0.25rem; }

.text-rotate-90 { writing-mode: vertical-rl; }

.text-rotate-270 { writing-mode: vertical-rl; transform: rotate(180deg); }

.dl-as-table { display: table; }

.dl-as-table > dl { display: table-row-group; }

.dl-as-table > dl > dt, .dl-as-table > dl > dd { display: table-row; }

.dl-as-table > dl > dd > p { display: table-cell; }

.dl-as-table > dl > dd::before { content: ""; }

.tag-as-table-cell { display: table-cell; width: auto; text-align: right; w=
hite-space: nowrap; padding-right: 0.5em; }
------MultipartBoundary--LqhmvZwTEGngQgONNpxZE3xQGOpsvkJLZXDlKAsK95----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/_static/design-style.b7bb847fb20b106c3d81b95245e65545.min.css

@charset "utf-8";

.sd-bg-primary { background-color: var(--sd-color-primary) !important; }

.sd-bg-text-primary { color: var(--sd-color-primary-text) !important; }

button.sd-bg-primary:focus, button.sd-bg-primary:hover { background-color: =
var(--sd-color-primary-highlight) !important; }

a.sd-bg-primary:focus, a.sd-bg-primary:hover { background-color: var(--sd-c=
olor-primary-highlight) !important; }

.sd-bg-secondary { background-color: var(--sd-color-secondary) !important; =
}

.sd-bg-text-secondary { color: var(--sd-color-secondary-text) !important; }

button.sd-bg-secondary:focus, button.sd-bg-secondary:hover { background-col=
or: var(--sd-color-secondary-highlight) !important; }

a.sd-bg-secondary:focus, a.sd-bg-secondary:hover { background-color: var(--=
sd-color-secondary-highlight) !important; }

.sd-bg-success { background-color: var(--sd-color-success) !important; }

.sd-bg-text-success { color: var(--sd-color-success-text) !important; }

button.sd-bg-success:focus, button.sd-bg-success:hover { background-color: =
var(--sd-color-success-highlight) !important; }

a.sd-bg-success:focus, a.sd-bg-success:hover { background-color: var(--sd-c=
olor-success-highlight) !important; }

.sd-bg-info { background-color: var(--sd-color-info) !important; }

.sd-bg-text-info { color: var(--sd-color-info-text) !important; }

button.sd-bg-info:focus, button.sd-bg-info:hover { background-color: var(--=
sd-color-info-highlight) !important; }

a.sd-bg-info:focus, a.sd-bg-info:hover { background-color: var(--sd-color-i=
nfo-highlight) !important; }

.sd-bg-warning { background-color: var(--sd-color-warning) !important; }

.sd-bg-text-warning { color: var(--sd-color-warning-text) !important; }

button.sd-bg-warning:focus, button.sd-bg-warning:hover { background-color: =
var(--sd-color-warning-highlight) !important; }

a.sd-bg-warning:focus, a.sd-bg-warning:hover { background-color: var(--sd-c=
olor-warning-highlight) !important; }

.sd-bg-danger { background-color: var(--sd-color-danger) !important; }

.sd-bg-text-danger { color: var(--sd-color-danger-text) !important; }

button.sd-bg-danger:focus, button.sd-bg-danger:hover { background-color: va=
r(--sd-color-danger-highlight) !important; }

a.sd-bg-danger:focus, a.sd-bg-danger:hover { background-color: var(--sd-col=
or-danger-highlight) !important; }

.sd-bg-light { background-color: var(--sd-color-light) !important; }

.sd-bg-text-light { color: var(--sd-color-light-text) !important; }

button.sd-bg-light:focus, button.sd-bg-light:hover { background-color: var(=
--sd-color-light-highlight) !important; }

a.sd-bg-light:focus, a.sd-bg-light:hover { background-color: var(--sd-color=
-light-highlight) !important; }

.sd-bg-muted { background-color: var(--sd-color-muted) !important; }

.sd-bg-text-muted { color: var(--sd-color-muted-text) !important; }

button.sd-bg-muted:focus, button.sd-bg-muted:hover { background-color: var(=
--sd-color-muted-highlight) !important; }

a.sd-bg-muted:focus, a.sd-bg-muted:hover { background-color: var(--sd-color=
-muted-highlight) !important; }

.sd-bg-dark { background-color: var(--sd-color-dark) !important; }

.sd-bg-text-dark { color: var(--sd-color-dark-text) !important; }

button.sd-bg-dark:focus, button.sd-bg-dark:hover { background-color: var(--=
sd-color-dark-highlight) !important; }

a.sd-bg-dark:focus, a.sd-bg-dark:hover { background-color: var(--sd-color-d=
ark-highlight) !important; }

.sd-bg-black { background-color: var(--sd-color-black) !important; }

.sd-bg-text-black { color: var(--sd-color-black-text) !important; }

button.sd-bg-black:focus, button.sd-bg-black:hover { background-color: var(=
--sd-color-black-highlight) !important; }

a.sd-bg-black:focus, a.sd-bg-black:hover { background-color: var(--sd-color=
-black-highlight) !important; }

.sd-bg-white { background-color: var(--sd-color-white) !important; }

.sd-bg-text-white { color: var(--sd-color-white-text) !important; }

button.sd-bg-white:focus, button.sd-bg-white:hover { background-color: var(=
--sd-color-white-highlight) !important; }

a.sd-bg-white:focus, a.sd-bg-white:hover { background-color: var(--sd-color=
-white-highlight) !important; }

.sd-text-primary, .sd-text-primary > p { color: var(--sd-color-primary) !im=
portant; }

a.sd-text-primary:focus, a.sd-text-primary:hover { color: var(--sd-color-pr=
imary-highlight) !important; }

.sd-text-secondary, .sd-text-secondary > p { color: var(--sd-color-secondar=
y) !important; }

a.sd-text-secondary:focus, a.sd-text-secondary:hover { color: var(--sd-colo=
r-secondary-highlight) !important; }

.sd-text-success, .sd-text-success > p { color: var(--sd-color-success) !im=
portant; }

a.sd-text-success:focus, a.sd-text-success:hover { color: var(--sd-color-su=
ccess-highlight) !important; }

.sd-text-info, .sd-text-info > p { color: var(--sd-color-info) !important; =
}

a.sd-text-info:focus, a.sd-text-info:hover { color: var(--sd-color-info-hig=
hlight) !important; }

.sd-text-warning, .sd-text-warning > p { color: var(--sd-color-warning) !im=
portant; }

a.sd-text-warning:focus, a.sd-text-warning:hover { color: var(--sd-color-wa=
rning-highlight) !important; }

.sd-text-danger, .sd-text-danger > p { color: var(--sd-color-danger) !impor=
tant; }

a.sd-text-danger:focus, a.sd-text-danger:hover { color: var(--sd-color-dang=
er-highlight) !important; }

.sd-text-light, .sd-text-light > p { color: var(--sd-color-light) !importan=
t; }

a.sd-text-light:focus, a.sd-text-light:hover { color: var(--sd-color-light-=
highlight) !important; }

.sd-text-muted, .sd-text-muted > p { color: var(--sd-color-muted) !importan=
t; }

a.sd-text-muted:focus, a.sd-text-muted:hover { color: var(--sd-color-muted-=
highlight) !important; }

.sd-text-dark, .sd-text-dark > p { color: var(--sd-color-dark) !important; =
}

a.sd-text-dark:focus, a.sd-text-dark:hover { color: var(--sd-color-dark-hig=
hlight) !important; }

.sd-text-black, .sd-text-black > p { color: var(--sd-color-black) !importan=
t; }

a.sd-text-black:focus, a.sd-text-black:hover { color: var(--sd-color-black-=
highlight) !important; }

.sd-text-white, .sd-text-white > p { color: var(--sd-color-white) !importan=
t; }

a.sd-text-white:focus, a.sd-text-white:hover { color: var(--sd-color-white-=
highlight) !important; }

.sd-outline-primary { border-color: var(--sd-color-primary) !important; bor=
der-style: solid !important; border-width: 1px !important; }

a.sd-outline-primary:focus, a.sd-outline-primary:hover { border-color: var(=
--sd-color-primary-highlight) !important; }

.sd-outline-secondary { border-color: var(--sd-color-secondary) !important;=
 border-style: solid !important; border-width: 1px !important; }

a.sd-outline-secondary:focus, a.sd-outline-secondary:hover { border-color: =
var(--sd-color-secondary-highlight) !important; }

.sd-outline-success { border-color: var(--sd-color-success) !important; bor=
der-style: solid !important; border-width: 1px !important; }

a.sd-outline-success:focus, a.sd-outline-success:hover { border-color: var(=
--sd-color-success-highlight) !important; }

.sd-outline-info { border-color: var(--sd-color-info) !important; border-st=
yle: solid !important; border-width: 1px !important; }

a.sd-outline-info:focus, a.sd-outline-info:hover { border-color: var(--sd-c=
olor-info-highlight) !important; }

.sd-outline-warning { border-color: var(--sd-color-warning) !important; bor=
der-style: solid !important; border-width: 1px !important; }

a.sd-outline-warning:focus, a.sd-outline-warning:hover { border-color: var(=
--sd-color-warning-highlight) !important; }

.sd-outline-danger { border-color: var(--sd-color-danger) !important; borde=
r-style: solid !important; border-width: 1px !important; }

a.sd-outline-danger:focus, a.sd-outline-danger:hover { border-color: var(--=
sd-color-danger-highlight) !important; }

.sd-outline-light { border-color: var(--sd-color-light) !important; border-=
style: solid !important; border-width: 1px !important; }

a.sd-outline-light:focus, a.sd-outline-light:hover { border-color: var(--sd=
-color-light-highlight) !important; }

.sd-outline-muted { border-color: var(--sd-color-muted) !important; border-=
style: solid !important; border-width: 1px !important; }

a.sd-outline-muted:focus, a.sd-outline-muted:hover { border-color: var(--sd=
-color-muted-highlight) !important; }

.sd-outline-dark { border-color: var(--sd-color-dark) !important; border-st=
yle: solid !important; border-width: 1px !important; }

a.sd-outline-dark:focus, a.sd-outline-dark:hover { border-color: var(--sd-c=
olor-dark-highlight) !important; }

.sd-outline-black { border-color: var(--sd-color-black) !important; border-=
style: solid !important; border-width: 1px !important; }

a.sd-outline-black:focus, a.sd-outline-black:hover { border-color: var(--sd=
-color-black-highlight) !important; }

.sd-outline-white { border-color: var(--sd-color-white) !important; border-=
style: solid !important; border-width: 1px !important; }

a.sd-outline-white:focus, a.sd-outline-white:hover { border-color: var(--sd=
-color-white-highlight) !important; }

.sd-bg-transparent { background-color: transparent !important; }

.sd-outline-transparent { border-color: transparent !important; }

.sd-text-transparent { color: transparent !important; }

.sd-p-0 { padding: 0px !important; }

.sd-pt-0, .sd-py-0 { padding-top: 0px !important; }

.sd-pr-0, .sd-px-0 { padding-right: 0px !important; }

.sd-pb-0, .sd-py-0 { padding-bottom: 0px !important; }

.sd-pl-0, .sd-px-0 { padding-left: 0px !important; }

.sd-p-1 { padding: 0.25rem !important; }

.sd-pt-1, .sd-py-1 { padding-top: 0.25rem !important; }

.sd-pr-1, .sd-px-1 { padding-right: 0.25rem !important; }

.sd-pb-1, .sd-py-1 { padding-bottom: 0.25rem !important; }

.sd-pl-1, .sd-px-1 { padding-left: 0.25rem !important; }

.sd-p-2 { padding: 0.5rem !important; }

.sd-pt-2, .sd-py-2 { padding-top: 0.5rem !important; }

.sd-pr-2, .sd-px-2 { padding-right: 0.5rem !important; }

.sd-pb-2, .sd-py-2 { padding-bottom: 0.5rem !important; }

.sd-pl-2, .sd-px-2 { padding-left: 0.5rem !important; }

.sd-p-3 { padding: 1rem !important; }

.sd-pt-3, .sd-py-3 { padding-top: 1rem !important; }

.sd-pr-3, .sd-px-3 { padding-right: 1rem !important; }

.sd-pb-3, .sd-py-3 { padding-bottom: 1rem !important; }

.sd-pl-3, .sd-px-3 { padding-left: 1rem !important; }

.sd-p-4 { padding: 1.5rem !important; }

.sd-pt-4, .sd-py-4 { padding-top: 1.5rem !important; }

.sd-pr-4, .sd-px-4 { padding-right: 1.5rem !important; }

.sd-pb-4, .sd-py-4 { padding-bottom: 1.5rem !important; }

.sd-pl-4, .sd-px-4 { padding-left: 1.5rem !important; }

.sd-p-5 { padding: 3rem !important; }

.sd-pt-5, .sd-py-5 { padding-top: 3rem !important; }

.sd-pr-5, .sd-px-5 { padding-right: 3rem !important; }

.sd-pb-5, .sd-py-5 { padding-bottom: 3rem !important; }

.sd-pl-5, .sd-px-5 { padding-left: 3rem !important; }

.sd-m-auto { margin: auto !important; }

.sd-mt-auto, .sd-my-auto { margin-top: auto !important; }

.sd-mr-auto, .sd-mx-auto { margin-right: auto !important; }

.sd-mb-auto, .sd-my-auto { margin-bottom: auto !important; }

.sd-ml-auto, .sd-mx-auto { margin-left: auto !important; }

.sd-m-0 { margin: 0px !important; }

.sd-mt-0, .sd-my-0 { margin-top: 0px !important; }

.sd-mr-0, .sd-mx-0 { margin-right: 0px !important; }

.sd-mb-0, .sd-my-0 { margin-bottom: 0px !important; }

.sd-ml-0, .sd-mx-0 { margin-left: 0px !important; }

.sd-m-1 { margin: 0.25rem !important; }

.sd-mt-1, .sd-my-1 { margin-top: 0.25rem !important; }

.sd-mr-1, .sd-mx-1 { margin-right: 0.25rem !important; }

.sd-mb-1, .sd-my-1 { margin-bottom: 0.25rem !important; }

.sd-ml-1, .sd-mx-1 { margin-left: 0.25rem !important; }

.sd-m-2 { margin: 0.5rem !important; }

.sd-mt-2, .sd-my-2 { margin-top: 0.5rem !important; }

.sd-mr-2, .sd-mx-2 { margin-right: 0.5rem !important; }

.sd-mb-2, .sd-my-2 { margin-bottom: 0.5rem !important; }

.sd-ml-2, .sd-mx-2 { margin-left: 0.5rem !important; }

.sd-m-3 { margin: 1rem !important; }

.sd-mt-3, .sd-my-3 { margin-top: 1rem !important; }

.sd-mr-3, .sd-mx-3 { margin-right: 1rem !important; }

.sd-mb-3, .sd-my-3 { margin-bottom: 1rem !important; }

.sd-ml-3, .sd-mx-3 { margin-left: 1rem !important; }

.sd-m-4 { margin: 1.5rem !important; }

.sd-mt-4, .sd-my-4 { margin-top: 1.5rem !important; }

.sd-mr-4, .sd-mx-4 { margin-right: 1.5rem !important; }

.sd-mb-4, .sd-my-4 { margin-bottom: 1.5rem !important; }

.sd-ml-4, .sd-mx-4 { margin-left: 1.5rem !important; }

.sd-m-5 { margin: 3rem !important; }

.sd-mt-5, .sd-my-5 { margin-top: 3rem !important; }

.sd-mr-5, .sd-mx-5 { margin-right: 3rem !important; }

.sd-mb-5, .sd-my-5 { margin-bottom: 3rem !important; }

.sd-ml-5, .sd-mx-5 { margin-left: 3rem !important; }

.sd-w-25 { width: 25% !important; }

.sd-w-50 { width: 50% !important; }

.sd-w-75 { width: 75% !important; }

.sd-w-100 { width: 100% !important; }

.sd-w-auto { width: auto !important; }

.sd-h-25 { height: 25% !important; }

.sd-h-50 { height: 50% !important; }

.sd-h-75 { height: 75% !important; }

.sd-h-100 { height: 100% !important; }

.sd-h-auto { height: auto !important; }

.sd-d-none { display: none !important; }

.sd-d-inline { display: inline !important; }

.sd-d-inline-block { display: inline-block !important; }

.sd-d-block { display: block !important; }

.sd-d-grid { display: grid !important; }

.sd-d-flex-row { display: flex !important; flex-direction: row !important; =
}

.sd-d-flex-column { display: flex !important; flex-direction: column !impor=
tant; }

.sd-d-inline-flex { display: inline-flex !important; }

@media (min-width: 576px) {
  .sd-d-sm-none { display: none !important; }
  .sd-d-sm-inline { display: inline !important; }
  .sd-d-sm-inline-block { display: inline-block !important; }
  .sd-d-sm-block { display: block !important; }
  .sd-d-sm-grid { display: grid !important; }
  .sd-d-sm-flex { display: flex !important; }
  .sd-d-sm-inline-flex { display: inline-flex !important; }
}

@media (min-width: 768px) {
  .sd-d-md-none { display: none !important; }
  .sd-d-md-inline { display: inline !important; }
  .sd-d-md-inline-block { display: inline-block !important; }
  .sd-d-md-block { display: block !important; }
  .sd-d-md-grid { display: grid !important; }
  .sd-d-md-flex { display: flex !important; }
  .sd-d-md-inline-flex { display: inline-flex !important; }
}

@media (min-width: 992px) {
  .sd-d-lg-none { display: none !important; }
  .sd-d-lg-inline { display: inline !important; }
  .sd-d-lg-inline-block { display: inline-block !important; }
  .sd-d-lg-block { display: block !important; }
  .sd-d-lg-grid { display: grid !important; }
  .sd-d-lg-flex { display: flex !important; }
  .sd-d-lg-inline-flex { display: inline-flex !important; }
}

@media (min-width: 1200px) {
  .sd-d-xl-none { display: none !important; }
  .sd-d-xl-inline { display: inline !important; }
  .sd-d-xl-inline-block { display: inline-block !important; }
  .sd-d-xl-block { display: block !important; }
  .sd-d-xl-grid { display: grid !important; }
  .sd-d-xl-flex { display: flex !important; }
  .sd-d-xl-inline-flex { display: inline-flex !important; }
}

.sd-align-major-start { justify-content: flex-start !important; }

.sd-align-major-end { justify-content: flex-end !important; }

.sd-align-major-center { justify-content: center !important; }

.sd-align-major-justify { justify-content: space-between !important; }

.sd-align-major-spaced { justify-content: space-evenly !important; }

.sd-align-minor-start { align-items: flex-start !important; }

.sd-align-minor-end { align-items: flex-end !important; }

.sd-align-minor-center { align-items: center !important; }

.sd-align-minor-stretch { align-items: stretch !important; }

.sd-text-justify { text-align: justify !important; }

.sd-text-left { text-align: left !important; }

.sd-text-right { text-align: right !important; }

.sd-text-center { text-align: center !important; }

.sd-font-weight-light { font-weight: 300 !important; }

.sd-font-weight-lighter { font-weight: lighter !important; }

.sd-font-weight-normal { font-weight: 400 !important; }

.sd-font-weight-bold { font-weight: 700 !important; }

.sd-font-weight-bolder { font-weight: bolder !important; }

.sd-font-italic { font-style: italic !important; }

.sd-text-decoration-none { text-decoration: none !important; }

.sd-text-lowercase { text-transform: lowercase !important; }

.sd-text-uppercase { text-transform: uppercase !important; }

.sd-text-capitalize { text-transform: capitalize !important; }

.sd-text-wrap { white-space: normal !important; }

.sd-text-nowrap { white-space: nowrap !important; }

.sd-text-truncate { overflow: hidden; text-overflow: ellipsis; white-space:=
 nowrap; }

.sd-fs-1, .sd-fs-1 > p { font-size: calc(1.375rem + 1.5vw) !important; line=
-height: unset !important; }

.sd-fs-2, .sd-fs-2 > p { font-size: calc(1.325rem + 0.9vw) !important; line=
-height: unset !important; }

.sd-fs-3, .sd-fs-3 > p { font-size: calc(1.3rem + 0.6vw) !important; line-h=
eight: unset !important; }

.sd-fs-4, .sd-fs-4 > p { font-size: calc(1.275rem + 0.3vw) !important; line=
-height: unset !important; }

.sd-fs-5, .sd-fs-5 > p { font-size: 1.25rem !important; line-height: unset =
!important; }

.sd-fs-6, .sd-fs-6 > p { font-size: 1rem !important; line-height: unset !im=
portant; }

.sd-border-0 { border: 0px solid !important; }

.sd-border-top-0 { border-top: 0px solid !important; }

.sd-border-bottom-0 { border-bottom: 0px solid !important; }

.sd-border-right-0 { border-right: 0px solid !important; }

.sd-border-left-0 { border-left: 0px solid !important; }

.sd-border-1 { border: 1px solid !important; }

.sd-border-top-1 { border-top: 1px solid !important; }

.sd-border-bottom-1 { border-bottom: 1px solid !important; }

.sd-border-right-1 { border-right: 1px solid !important; }

.sd-border-left-1 { border-left: 1px solid !important; }

.sd-border-2 { border: 2px solid !important; }

.sd-border-top-2 { border-top: 2px solid !important; }

.sd-border-bottom-2 { border-bottom: 2px solid !important; }

.sd-border-right-2 { border-right: 2px solid !important; }

.sd-border-left-2 { border-left: 2px solid !important; }

.sd-border-3 { border: 3px solid !important; }

.sd-border-top-3 { border-top: 3px solid !important; }

.sd-border-bottom-3 { border-bottom: 3px solid !important; }

.sd-border-right-3 { border-right: 3px solid !important; }

.sd-border-left-3 { border-left: 3px solid !important; }

.sd-border-4 { border: 4px solid !important; }

.sd-border-top-4 { border-top: 4px solid !important; }

.sd-border-bottom-4 { border-bottom: 4px solid !important; }

.sd-border-right-4 { border-right: 4px solid !important; }

.sd-border-left-4 { border-left: 4px solid !important; }

.sd-border-5 { border: 5px solid !important; }

.sd-border-top-5 { border-top: 5px solid !important; }

.sd-border-bottom-5 { border-bottom: 5px solid !important; }

.sd-border-right-5 { border-right: 5px solid !important; }

.sd-border-left-5 { border-left: 5px solid !important; }

.sd-rounded-0 { border-radius: 0px !important; }

.sd-rounded-1 { border-radius: 0.2rem !important; }

.sd-rounded-2 { border-radius: 0.3rem !important; }

.sd-rounded-3 { border-radius: 0.5rem !important; }

.sd-rounded-pill { border-radius: 50rem !important; }

.sd-rounded-circle { border-radius: 50% !important; }

.shadow-none { box-shadow: none !important; }

.sd-shadow-sm { box-shadow: 0 .125rem .25rem var(--sd-color-shadow) !import=
ant; }

.sd-shadow-md { box-shadow: 0 .5rem 1rem var(--sd-color-shadow) !important;=
 }

.sd-shadow-lg { box-shadow: 0 1rem 3rem var(--sd-color-shadow) !important; =
}

@keyframes sd-slide-from-left {=20
  0% { transform: translateX(-100%); }
  100% { transform: translateX(0px); }
}

@keyframes sd-slide-from-right {=20
  0% { transform: translateX(200%); }
  100% { transform: translateX(0px); }
}

@keyframes sd-grow100 {=20
  0% { transform: scale(0); opacity: 0.5; }
  100% { transform: scale(1); opacity: 1; }
}

@keyframes sd-grow50 {=20
  0% { transform: scale(0.5); opacity: 0.5; }
  100% { transform: scale(1); opacity: 1; }
}

@keyframes sd-grow50-rot20 {=20
  0% { transform: scale(0.5) rotateZ(-20deg); opacity: 0.5; }
  75% { transform: scale(1) rotateZ(5deg); opacity: 1; }
  95% { transform: scale(1) rotateZ(-1deg); opacity: 1; }
  100% { transform: scale(1) rotateZ(0deg); opacity: 1; }
}

.sd-animate-slide-from-left { animation: 1s ease-out 0s 1 normal none runni=
ng sd-slide-from-left; }

.sd-animate-slide-from-right { animation: 1s ease-out 0s 1 normal none runn=
ing sd-slide-from-right; }

.sd-animate-grow100 { animation: 1s ease-out 0s 1 normal none running sd-gr=
ow100; }

.sd-animate-grow50 { animation: 1s ease-out 0s 1 normal none running sd-gro=
w50; }

.sd-animate-grow50-rot20 { animation: 1s ease-out 0s 1 normal none running =
sd-grow50-rot20; }

.sd-badge { display: inline-block; padding: 0.35em 0.65em; font-size: 0.75e=
m; font-weight: 700; line-height: 1; text-align: center; white-space: nowra=
p; vertical-align: baseline; border-radius: 0.25rem; }

.sd-badge:empty { display: none; }

a.sd-badge { text-decoration: none; }

.sd-btn .sd-badge { position: relative; top: -1px; }

.sd-btn { background-color: transparent; border: 1px solid transparent; bor=
der-radius: 0.25rem; cursor: pointer; display: inline-block; font-weight: 4=
00; font-size: 1rem; line-height: 1.5; padding: 0.375rem 0.75rem; text-alig=
n: center; text-decoration: none; transition: color 0.15s ease-in-out, back=
ground-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow =
0.15s ease-in-out; vertical-align: middle; user-select: none; }

.sd-btn:hover { text-decoration: none; }

@media (prefers-reduced-motion: reduce) {
  .sd-btn { transition: none; }
}

.sd-btn-primary, .sd-btn-outline-primary:hover, .sd-btn-outline-primary:foc=
us { color: var(--sd-color-primary-text) !important; background-color: var(=
--sd-color-primary) !important; border-color: var(--sd-color-primary) !impo=
rtant; border-width: 1px !important; border-style: solid !important; }

.sd-btn-primary:hover, .sd-btn-primary:focus { color: var(--sd-color-primar=
y-text) !important; background-color: var(--sd-color-primary-highlight) !im=
portant; border-color: var(--sd-color-primary-highlight) !important; border=
-width: 1px !important; border-style: solid !important; }

.sd-btn-outline-primary { color: var(--sd-color-primary) !important; border=
-color: var(--sd-color-primary) !important; border-width: 1px !important; b=
order-style: solid !important; }

.sd-btn-secondary, .sd-btn-outline-secondary:hover, .sd-btn-outline-seconda=
ry:focus { color: var(--sd-color-secondary-text) !important; background-col=
or: var(--sd-color-secondary) !important; border-color: var(--sd-color-seco=
ndary) !important; border-width: 1px !important; border-style: solid !impor=
tant; }

.sd-btn-secondary:hover, .sd-btn-secondary:focus { color: var(--sd-color-se=
condary-text) !important; background-color: var(--sd-color-secondary-highli=
ght) !important; border-color: var(--sd-color-secondary-highlight) !importa=
nt; border-width: 1px !important; border-style: solid !important; }

.sd-btn-outline-secondary { color: var(--sd-color-secondary) !important; bo=
rder-color: var(--sd-color-secondary) !important; border-width: 1px !import=
ant; border-style: solid !important; }

.sd-btn-success, .sd-btn-outline-success:hover, .sd-btn-outline-success:foc=
us { color: var(--sd-color-success-text) !important; background-color: var(=
--sd-color-success) !important; border-color: var(--sd-color-success) !impo=
rtant; border-width: 1px !important; border-style: solid !important; }

.sd-btn-success:hover, .sd-btn-success:focus { color: var(--sd-color-succes=
s-text) !important; background-color: var(--sd-color-success-highlight) !im=
portant; border-color: var(--sd-color-success-highlight) !important; border=
-width: 1px !important; border-style: solid !important; }

.sd-btn-outline-success { color: var(--sd-color-success) !important; border=
-color: var(--sd-color-success) !important; border-width: 1px !important; b=
order-style: solid !important; }

.sd-btn-info, .sd-btn-outline-info:hover, .sd-btn-outline-info:focus { colo=
r: var(--sd-color-info-text) !important; background-color: var(--sd-color-i=
nfo) !important; border-color: var(--sd-color-info) !important; border-widt=
h: 1px !important; border-style: solid !important; }

.sd-btn-info:hover, .sd-btn-info:focus { color: var(--sd-color-info-text) !=
important; background-color: var(--sd-color-info-highlight) !important; bor=
der-color: var(--sd-color-info-highlight) !important; border-width: 1px !im=
portant; border-style: solid !important; }

.sd-btn-outline-info { color: var(--sd-color-info) !important; border-color=
: var(--sd-color-info) !important; border-width: 1px !important; border-sty=
le: solid !important; }

.sd-btn-warning, .sd-btn-outline-warning:hover, .sd-btn-outline-warning:foc=
us { color: var(--sd-color-warning-text) !important; background-color: var(=
--sd-color-warning) !important; border-color: var(--sd-color-warning) !impo=
rtant; border-width: 1px !important; border-style: solid !important; }

.sd-btn-warning:hover, .sd-btn-warning:focus { color: var(--sd-color-warnin=
g-text) !important; background-color: var(--sd-color-warning-highlight) !im=
portant; border-color: var(--sd-color-warning-highlight) !important; border=
-width: 1px !important; border-style: solid !important; }

.sd-btn-outline-warning { color: var(--sd-color-warning) !important; border=
-color: var(--sd-color-warning) !important; border-width: 1px !important; b=
order-style: solid !important; }

.sd-btn-danger, .sd-btn-outline-danger:hover, .sd-btn-outline-danger:focus =
{ color: var(--sd-color-danger-text) !important; background-color: var(--sd=
-color-danger) !important; border-color: var(--sd-color-danger) !important;=
 border-width: 1px !important; border-style: solid !important; }

.sd-btn-danger:hover, .sd-btn-danger:focus { color: var(--sd-color-danger-t=
ext) !important; background-color: var(--sd-color-danger-highlight) !import=
ant; border-color: var(--sd-color-danger-highlight) !important; border-widt=
h: 1px !important; border-style: solid !important; }

.sd-btn-outline-danger { color: var(--sd-color-danger) !important; border-c=
olor: var(--sd-color-danger) !important; border-width: 1px !important; bord=
er-style: solid !important; }

.sd-btn-light, .sd-btn-outline-light:hover, .sd-btn-outline-light:focus { c=
olor: var(--sd-color-light-text) !important; background-color: var(--sd-col=
or-light) !important; border-color: var(--sd-color-light) !important; borde=
r-width: 1px !important; border-style: solid !important; }

.sd-btn-light:hover, .sd-btn-light:focus { color: var(--sd-color-light-text=
) !important; background-color: var(--sd-color-light-highlight) !important;=
 border-color: var(--sd-color-light-highlight) !important; border-width: 1p=
x !important; border-style: solid !important; }

.sd-btn-outline-light { color: var(--sd-color-light) !important; border-col=
or: var(--sd-color-light) !important; border-width: 1px !important; border-=
style: solid !important; }

.sd-btn-muted, .sd-btn-outline-muted:hover, .sd-btn-outline-muted:focus { c=
olor: var(--sd-color-muted-text) !important; background-color: var(--sd-col=
or-muted) !important; border-color: var(--sd-color-muted) !important; borde=
r-width: 1px !important; border-style: solid !important; }

.sd-btn-muted:hover, .sd-btn-muted:focus { color: var(--sd-color-muted-text=
) !important; background-color: var(--sd-color-muted-highlight) !important;=
 border-color: var(--sd-color-muted-highlight) !important; border-width: 1p=
x !important; border-style: solid !important; }

.sd-btn-outline-muted { color: var(--sd-color-muted) !important; border-col=
or: var(--sd-color-muted) !important; border-width: 1px !important; border-=
style: solid !important; }

.sd-btn-dark, .sd-btn-outline-dark:hover, .sd-btn-outline-dark:focus { colo=
r: var(--sd-color-dark-text) !important; background-color: var(--sd-color-d=
ark) !important; border-color: var(--sd-color-dark) !important; border-widt=
h: 1px !important; border-style: solid !important; }

.sd-btn-dark:hover, .sd-btn-dark:focus { color: var(--sd-color-dark-text) !=
important; background-color: var(--sd-color-dark-highlight) !important; bor=
der-color: var(--sd-color-dark-highlight) !important; border-width: 1px !im=
portant; border-style: solid !important; }

.sd-btn-outline-dark { color: var(--sd-color-dark) !important; border-color=
: var(--sd-color-dark) !important; border-width: 1px !important; border-sty=
le: solid !important; }

.sd-btn-black, .sd-btn-outline-black:hover, .sd-btn-outline-black:focus { c=
olor: var(--sd-color-black-text) !important; background-color: var(--sd-col=
or-black) !important; border-color: var(--sd-color-black) !important; borde=
r-width: 1px !important; border-style: solid !important; }

.sd-btn-black:hover, .sd-btn-black:focus { color: var(--sd-color-black-text=
) !important; background-color: var(--sd-color-black-highlight) !important;=
 border-color: var(--sd-color-black-highlight) !important; border-width: 1p=
x !important; border-style: solid !important; }

.sd-btn-outline-black { color: var(--sd-color-black) !important; border-col=
or: var(--sd-color-black) !important; border-width: 1px !important; border-=
style: solid !important; }

.sd-btn-white, .sd-btn-outline-white:hover, .sd-btn-outline-white:focus { c=
olor: var(--sd-color-white-text) !important; background-color: var(--sd-col=
or-white) !important; border-color: var(--sd-color-white) !important; borde=
r-width: 1px !important; border-style: solid !important; }

.sd-btn-white:hover, .sd-btn-white:focus { color: var(--sd-color-white-text=
) !important; background-color: var(--sd-color-white-highlight) !important;=
 border-color: var(--sd-color-white-highlight) !important; border-width: 1p=
x !important; border-style: solid !important; }

.sd-btn-outline-white { color: var(--sd-color-white) !important; border-col=
or: var(--sd-color-white) !important; border-width: 1px !important; border-=
style: solid !important; }

.sd-stretched-link::after { position: absolute; inset: 0px; z-index: 1; con=
tent: ""; }

.sd-octicon, .sd-material-icon { display: inline-block; fill: currentcolor;=
 vertical-align: middle; }

.sd-avatar-xs { border-radius: 50%; object-fit: cover; object-position: cen=
ter center; width: 1rem; height: 1rem; }

.sd-avatar-sm { border-radius: 50%; object-fit: cover; object-position: cen=
ter center; width: 3rem; height: 3rem; }

.sd-avatar-md { border-radius: 50%; object-fit: cover; object-position: cen=
ter center; width: 5rem; height: 5rem; }

.sd-avatar-lg { border-radius: 50%; object-fit: cover; object-position: cen=
ter center; width: 7rem; height: 7rem; }

.sd-avatar-xl { border-radius: 50%; object-fit: cover; object-position: cen=
ter center; width: 10rem; height: 10rem; }

.sd-avatar-inherit { border-radius: 50%; object-fit: cover; object-position=
: center center; width: inherit; height: inherit; }

.sd-avatar-initial { border-radius: 50%; object-fit: cover; object-position=
: center center; width: initial; height: initial; }

.sd-card { background-clip: border-box; background-color: var(--sd-color-ca=
rd-background); border: 1px solid var(--sd-color-card-border); border-radiu=
s: 0.25rem; color: var(--sd-color-card-text); display: flex; flex-direction=
: column; min-width: 0px; position: relative; overflow-wrap: break-word; }

.sd-card > hr { margin-left: 0px; margin-right: 0px; }

.sd-card-hover:hover { border-color: var(--sd-color-card-border-hover); tra=
nsform: scale(1.01); }

.sd-card-body { flex: 1 1 auto; padding: 1rem; }

.sd-card-title { margin-bottom: 0.5rem; }

.sd-card-subtitle { margin-top: -0.25rem; margin-bottom: 0px; }

.sd-card-text:last-child { margin-bottom: 0px; }

.sd-card-link:hover { text-decoration: none; }

.sd-card-link + .card-link { margin-left: 1rem; }

.sd-card-header { padding: 0.5rem 1rem; margin-bottom: 0px; background-colo=
r: var(--sd-color-card-header); border-bottom: 1px solid var(--sd-color-car=
d-border); }

.sd-card-header:first-child { border-radius: calc(-1px + 0.25rem) calc(-1px=
 + 0.25rem) 0px 0px; }

.sd-card-footer { padding: 0.5rem 1rem; background-color: var(--sd-color-ca=
rd-footer); border-top: 1px solid var(--sd-color-card-border); }

.sd-card-footer:last-child { border-radius: 0px 0px calc(-1px + 0.25rem) ca=
lc(-1px + 0.25rem); }

.sd-card-header-tabs { margin-right: -0.5rem; margin-bottom: -0.5rem; margi=
n-left: -0.5rem; border-bottom: 0px; }

.sd-card-header-pills { margin-right: -0.5rem; margin-left: -0.5rem; }

.sd-card-img-overlay { position: absolute; inset: 0px; padding: 1rem; borde=
r-radius: calc(-1px + 0.25rem); }

.sd-card-img, .sd-card-img-bottom, .sd-card-img-top { width: 100%; }

.sd-card-img, .sd-card-img-top { border-top-left-radius: calc(-1px + 0.25re=
m); border-top-right-radius: calc(-1px + 0.25rem); }

.sd-card-img, .sd-card-img-bottom { border-bottom-left-radius: calc(-1px + =
0.25rem); border-bottom-right-radius: calc(-1px + 0.25rem); }

.sd-cards-carousel { width: 100%; display: flex; flex-flow: row; overflow-x=
: hidden; scroll-snap-type: x mandatory; }

.sd-cards-carousel.sd-show-scrollbar { overflow-x: auto; }

.sd-cards-carousel:hover, .sd-cards-carousel:focus { overflow-x: auto; }

.sd-cards-carousel > .sd-card { flex-shrink: 0; scroll-snap-align: start; }

.sd-cards-carousel > .sd-card:not(:last-child) { margin-right: 3px; }

.sd-card-cols-1 > .sd-card { width: 90%; }

.sd-card-cols-2 > .sd-card { width: 45%; }

.sd-card-cols-3 > .sd-card { width: 30%; }

.sd-card-cols-4 > .sd-card { width: 22.5%; }

.sd-card-cols-5 > .sd-card { width: 18%; }

.sd-card-cols-6 > .sd-card { width: 15%; }

.sd-card-cols-7 > .sd-card { width: 12.8571%; }

.sd-card-cols-8 > .sd-card { width: 11.25%; }

.sd-card-cols-9 > .sd-card { width: 10%; }

.sd-card-cols-10 > .sd-card { width: 9%; }

.sd-card-cols-11 > .sd-card { width: 8.18182%; }

.sd-card-cols-12 > .sd-card { width: 7.5%; }

.sd-container, .sd-container-fluid, .sd-container-lg, .sd-container-md, .sd=
-container-sm, .sd-container-xl { margin-left: auto; margin-right: auto; pa=
dding-left: var(--sd-gutter-x, 0.75rem); padding-right: var(--sd-gutter-x, =
0.75rem); width: 100%; }

@media (min-width: 576px) {
  .sd-container-sm, .sd-container { max-width: 540px; }
}

@media (min-width: 768px) {
  .sd-container-md, .sd-container-sm, .sd-container { max-width: 720px; }
}

@media (min-width: 992px) {
  .sd-container-lg, .sd-container-md, .sd-container-sm, .sd-container { max=
-width: 960px; }
}

@media (min-width: 1200px) {
  .sd-container-xl, .sd-container-lg, .sd-container-md, .sd-container-sm, .=
sd-container { max-width: 1140px; }
}

.sd-row { --sd-gutter-x: 1.5rem; --sd-gutter-y: 0; display: flex; flex-wrap=
: wrap; margin-top: calc(var(--sd-gutter-y) * -1); margin-right: calc(var(-=
-sd-gutter-x) * -0.5); margin-left: calc(var(--sd-gutter-x) * -0.5); }

.sd-row > * { box-sizing: border-box; flex-shrink: 0; width: 100%; max-widt=
h: 100%; padding-right: calc(var(--sd-gutter-x) * 0.5); padding-left: calc(=
var(--sd-gutter-x) * 0.5); margin-top: var(--sd-gutter-y); }

.sd-col { flex: 1 0 0%; }

.sd-row-cols-auto > * { flex: 0 0 auto; width: auto; }

.sd-row-cols-1 > * { flex: 0 0 auto; width: 100%; }

.sd-row-cols-2 > * { flex: 0 0 auto; width: 50%; }

.sd-row-cols-3 > * { flex: 0 0 auto; width: 33.3333%; }

.sd-row-cols-4 > * { flex: 0 0 auto; width: 25%; }

.sd-row-cols-5 > * { flex: 0 0 auto; width: 20%; }

.sd-row-cols-6 > * { flex: 0 0 auto; width: 16.6667%; }

.sd-row-cols-7 > * { flex: 0 0 auto; width: 14.2857%; }

.sd-row-cols-8 > * { flex: 0 0 auto; width: 12.5%; }

.sd-row-cols-9 > * { flex: 0 0 auto; width: 11.1111%; }

.sd-row-cols-10 > * { flex: 0 0 auto; width: 10%; }

.sd-row-cols-11 > * { flex: 0 0 auto; width: 9.09091%; }

.sd-row-cols-12 > * { flex: 0 0 auto; width: 8.33333%; }

@media (min-width: 576px) {
  .sd-col-sm { flex: 1 0 0%; }
  .sd-row-cols-sm-auto { flex: 1 0 auto; width: 100%; }
  .sd-row-cols-sm-1 > * { flex: 0 0 auto; width: 100%; }
  .sd-row-cols-sm-2 > * { flex: 0 0 auto; width: 50%; }
  .sd-row-cols-sm-3 > * { flex: 0 0 auto; width: 33.3333%; }
  .sd-row-cols-sm-4 > * { flex: 0 0 auto; width: 25%; }
  .sd-row-cols-sm-5 > * { flex: 0 0 auto; width: 20%; }
  .sd-row-cols-sm-6 > * { flex: 0 0 auto; width: 16.6667%; }
  .sd-row-cols-sm-7 > * { flex: 0 0 auto; width: 14.2857%; }
  .sd-row-cols-sm-8 > * { flex: 0 0 auto; width: 12.5%; }
  .sd-row-cols-sm-9 > * { flex: 0 0 auto; width: 11.1111%; }
  .sd-row-cols-sm-10 > * { flex: 0 0 auto; width: 10%; }
  .sd-row-cols-sm-11 > * { flex: 0 0 auto; width: 9.09091%; }
  .sd-row-cols-sm-12 > * { flex: 0 0 auto; width: 8.33333%; }
}

@media (min-width: 768px) {
  .sd-col-md { flex: 1 0 0%; }
  .sd-row-cols-md-auto { flex: 1 0 auto; width: 100%; }
  .sd-row-cols-md-1 > * { flex: 0 0 auto; width: 100%; }
  .sd-row-cols-md-2 > * { flex: 0 0 auto; width: 50%; }
  .sd-row-cols-md-3 > * { flex: 0 0 auto; width: 33.3333%; }
  .sd-row-cols-md-4 > * { flex: 0 0 auto; width: 25%; }
  .sd-row-cols-md-5 > * { flex: 0 0 auto; width: 20%; }
  .sd-row-cols-md-6 > * { flex: 0 0 auto; width: 16.6667%; }
  .sd-row-cols-md-7 > * { flex: 0 0 auto; width: 14.2857%; }
  .sd-row-cols-md-8 > * { flex: 0 0 auto; width: 12.5%; }
  .sd-row-cols-md-9 > * { flex: 0 0 auto; width: 11.1111%; }
  .sd-row-cols-md-10 > * { flex: 0 0 auto; width: 10%; }
  .sd-row-cols-md-11 > * { flex: 0 0 auto; width: 9.09091%; }
  .sd-row-cols-md-12 > * { flex: 0 0 auto; width: 8.33333%; }
}

@media (min-width: 992px) {
  .sd-col-lg { flex: 1 0 0%; }
  .sd-row-cols-lg-auto { flex: 1 0 auto; width: 100%; }
  .sd-row-cols-lg-1 > * { flex: 0 0 auto; width: 100%; }
  .sd-row-cols-lg-2 > * { flex: 0 0 auto; width: 50%; }
  .sd-row-cols-lg-3 > * { flex: 0 0 auto; width: 33.3333%; }
  .sd-row-cols-lg-4 > * { flex: 0 0 auto; width: 25%; }
  .sd-row-cols-lg-5 > * { flex: 0 0 auto; width: 20%; }
  .sd-row-cols-lg-6 > * { flex: 0 0 auto; width: 16.6667%; }
  .sd-row-cols-lg-7 > * { flex: 0 0 auto; width: 14.2857%; }
  .sd-row-cols-lg-8 > * { flex: 0 0 auto; width: 12.5%; }
  .sd-row-cols-lg-9 > * { flex: 0 0 auto; width: 11.1111%; }
  .sd-row-cols-lg-10 > * { flex: 0 0 auto; width: 10%; }
  .sd-row-cols-lg-11 > * { flex: 0 0 auto; width: 9.09091%; }
  .sd-row-cols-lg-12 > * { flex: 0 0 auto; width: 8.33333%; }
}

@media (min-width: 1200px) {
  .sd-col-xl { flex: 1 0 0%; }
  .sd-row-cols-xl-auto { flex: 1 0 auto; width: 100%; }
  .sd-row-cols-xl-1 > * { flex: 0 0 auto; width: 100%; }
  .sd-row-cols-xl-2 > * { flex: 0 0 auto; width: 50%; }
  .sd-row-cols-xl-3 > * { flex: 0 0 auto; width: 33.3333%; }
  .sd-row-cols-xl-4 > * { flex: 0 0 auto; width: 25%; }
  .sd-row-cols-xl-5 > * { flex: 0 0 auto; width: 20%; }
  .sd-row-cols-xl-6 > * { flex: 0 0 auto; width: 16.6667%; }
  .sd-row-cols-xl-7 > * { flex: 0 0 auto; width: 14.2857%; }
  .sd-row-cols-xl-8 > * { flex: 0 0 auto; width: 12.5%; }
  .sd-row-cols-xl-9 > * { flex: 0 0 auto; width: 11.1111%; }
  .sd-row-cols-xl-10 > * { flex: 0 0 auto; width: 10%; }
  .sd-row-cols-xl-11 > * { flex: 0 0 auto; width: 9.09091%; }
  .sd-row-cols-xl-12 > * { flex: 0 0 auto; width: 8.33333%; }
}

.sd-col-auto { flex: 0 0 auto; width: auto; }

.sd-col-1 { flex: 0 0 auto; width: 8.33333%; }

.sd-col-2 { flex: 0 0 auto; width: 16.6667%; }

.sd-col-3 { flex: 0 0 auto; width: 25%; }

.sd-col-4 { flex: 0 0 auto; width: 33.3333%; }

.sd-col-5 { flex: 0 0 auto; width: 41.6667%; }

.sd-col-6 { flex: 0 0 auto; width: 50%; }

.sd-col-7 { flex: 0 0 auto; width: 58.3333%; }

.sd-col-8 { flex: 0 0 auto; width: 66.6667%; }

.sd-col-9 { flex: 0 0 auto; width: 75%; }

.sd-col-10 { flex: 0 0 auto; width: 83.3333%; }

.sd-col-11 { flex: 0 0 auto; width: 91.6667%; }

.sd-col-12 { flex: 0 0 auto; width: 100%; }

.sd-g-0, .sd-gy-0 { --sd-gutter-y: 0; }

.sd-g-0, .sd-gx-0 { --sd-gutter-x: 0; }

.sd-g-1, .sd-gy-1 { --sd-gutter-y: 0.25rem; }

.sd-g-1, .sd-gx-1 { --sd-gutter-x: 0.25rem; }

.sd-g-2, .sd-gy-2 { --sd-gutter-y: 0.5rem; }

.sd-g-2, .sd-gx-2 { --sd-gutter-x: 0.5rem; }

.sd-g-3, .sd-gy-3 { --sd-gutter-y: 1rem; }

.sd-g-3, .sd-gx-3 { --sd-gutter-x: 1rem; }

.sd-g-4, .sd-gy-4 { --sd-gutter-y: 1.5rem; }

.sd-g-4, .sd-gx-4 { --sd-gutter-x: 1.5rem; }

.sd-g-5, .sd-gy-5 { --sd-gutter-y: 3rem; }

.sd-g-5, .sd-gx-5 { --sd-gutter-x: 3rem; }

@media (min-width: 576px) {
  .sd-col-sm-auto { flex: 0 0 auto; width: auto; }
  .sd-col-sm-1 { flex: 0 0 auto; width: 8.33333%; }
  .sd-col-sm-2 { flex: 0 0 auto; width: 16.6667%; }
  .sd-col-sm-3 { flex: 0 0 auto; width: 25%; }
  .sd-col-sm-4 { flex: 0 0 auto; width: 33.3333%; }
  .sd-col-sm-5 { flex: 0 0 auto; width: 41.6667%; }
  .sd-col-sm-6 { flex: 0 0 auto; width: 50%; }
  .sd-col-sm-7 { flex: 0 0 auto; width: 58.3333%; }
  .sd-col-sm-8 { flex: 0 0 auto; width: 66.6667%; }
  .sd-col-sm-9 { flex: 0 0 auto; width: 75%; }
  .sd-col-sm-10 { flex: 0 0 auto; width: 83.3333%; }
  .sd-col-sm-11 { flex: 0 0 auto; width: 91.6667%; }
  .sd-col-sm-12 { flex: 0 0 auto; width: 100%; }
  .sd-g-sm-0, .sd-gy-sm-0 { --sd-gutter-y: 0; }
  .sd-g-sm-0, .sd-gx-sm-0 { --sd-gutter-x: 0; }
  .sd-g-sm-1, .sd-gy-sm-1 { --sd-gutter-y: 0.25rem; }
  .sd-g-sm-1, .sd-gx-sm-1 { --sd-gutter-x: 0.25rem; }
  .sd-g-sm-2, .sd-gy-sm-2 { --sd-gutter-y: 0.5rem; }
  .sd-g-sm-2, .sd-gx-sm-2 { --sd-gutter-x: 0.5rem; }
  .sd-g-sm-3, .sd-gy-sm-3 { --sd-gutter-y: 1rem; }
  .sd-g-sm-3, .sd-gx-sm-3 { --sd-gutter-x: 1rem; }
  .sd-g-sm-4, .sd-gy-sm-4 { --sd-gutter-y: 1.5rem; }
  .sd-g-sm-4, .sd-gx-sm-4 { --sd-gutter-x: 1.5rem; }
  .sd-g-sm-5, .sd-gy-sm-5 { --sd-gutter-y: 3rem; }
  .sd-g-sm-5, .sd-gx-sm-5 { --sd-gutter-x: 3rem; }
}

@media (min-width: 768px) {
  .sd-col-md-auto { flex: 0 0 auto; width: auto; }
  .sd-col-md-1 { flex: 0 0 auto; width: 8.33333%; }
  .sd-col-md-2 { flex: 0 0 auto; width: 16.6667%; }
  .sd-col-md-3 { flex: 0 0 auto; width: 25%; }
  .sd-col-md-4 { flex: 0 0 auto; width: 33.3333%; }
  .sd-col-md-5 { flex: 0 0 auto; width: 41.6667%; }
  .sd-col-md-6 { flex: 0 0 auto; width: 50%; }
  .sd-col-md-7 { flex: 0 0 auto; width: 58.3333%; }
  .sd-col-md-8 { flex: 0 0 auto; width: 66.6667%; }
  .sd-col-md-9 { flex: 0 0 auto; width: 75%; }
  .sd-col-md-10 { flex: 0 0 auto; width: 83.3333%; }
  .sd-col-md-11 { flex: 0 0 auto; width: 91.6667%; }
  .sd-col-md-12 { flex: 0 0 auto; width: 100%; }
  .sd-g-md-0, .sd-gy-md-0 { --sd-gutter-y: 0; }
  .sd-g-md-0, .sd-gx-md-0 { --sd-gutter-x: 0; }
  .sd-g-md-1, .sd-gy-md-1 { --sd-gutter-y: 0.25rem; }
  .sd-g-md-1, .sd-gx-md-1 { --sd-gutter-x: 0.25rem; }
  .sd-g-md-2, .sd-gy-md-2 { --sd-gutter-y: 0.5rem; }
  .sd-g-md-2, .sd-gx-md-2 { --sd-gutter-x: 0.5rem; }
  .sd-g-md-3, .sd-gy-md-3 { --sd-gutter-y: 1rem; }
  .sd-g-md-3, .sd-gx-md-3 { --sd-gutter-x: 1rem; }
  .sd-g-md-4, .sd-gy-md-4 { --sd-gutter-y: 1.5rem; }
  .sd-g-md-4, .sd-gx-md-4 { --sd-gutter-x: 1.5rem; }
  .sd-g-md-5, .sd-gy-md-5 { --sd-gutter-y: 3rem; }
  .sd-g-md-5, .sd-gx-md-5 { --sd-gutter-x: 3rem; }
}

@media (min-width: 992px) {
  .sd-col-lg-auto { flex: 0 0 auto; width: auto; }
  .sd-col-lg-1 { flex: 0 0 auto; width: 8.33333%; }
  .sd-col-lg-2 { flex: 0 0 auto; width: 16.6667%; }
  .sd-col-lg-3 { flex: 0 0 auto; width: 25%; }
  .sd-col-lg-4 { flex: 0 0 auto; width: 33.3333%; }
  .sd-col-lg-5 { flex: 0 0 auto; width: 41.6667%; }
  .sd-col-lg-6 { flex: 0 0 auto; width: 50%; }
  .sd-col-lg-7 { flex: 0 0 auto; width: 58.3333%; }
  .sd-col-lg-8 { flex: 0 0 auto; width: 66.6667%; }
  .sd-col-lg-9 { flex: 0 0 auto; width: 75%; }
  .sd-col-lg-10 { flex: 0 0 auto; width: 83.3333%; }
  .sd-col-lg-11 { flex: 0 0 auto; width: 91.6667%; }
  .sd-col-lg-12 { flex: 0 0 auto; width: 100%; }
  .sd-g-lg-0, .sd-gy-lg-0 { --sd-gutter-y: 0; }
  .sd-g-lg-0, .sd-gx-lg-0 { --sd-gutter-x: 0; }
  .sd-g-lg-1, .sd-gy-lg-1 { --sd-gutter-y: 0.25rem; }
  .sd-g-lg-1, .sd-gx-lg-1 { --sd-gutter-x: 0.25rem; }
  .sd-g-lg-2, .sd-gy-lg-2 { --sd-gutter-y: 0.5rem; }
  .sd-g-lg-2, .sd-gx-lg-2 { --sd-gutter-x: 0.5rem; }
  .sd-g-lg-3, .sd-gy-lg-3 { --sd-gutter-y: 1rem; }
  .sd-g-lg-3, .sd-gx-lg-3 { --sd-gutter-x: 1rem; }
  .sd-g-lg-4, .sd-gy-lg-4 { --sd-gutter-y: 1.5rem; }
  .sd-g-lg-4, .sd-gx-lg-4 { --sd-gutter-x: 1.5rem; }
  .sd-g-lg-5, .sd-gy-lg-5 { --sd-gutter-y: 3rem; }
  .sd-g-lg-5, .sd-gx-lg-5 { --sd-gutter-x: 3rem; }
}

@media (min-width: 1200px) {
  .sd-col-xl-auto { flex: 0 0 auto; width: auto; }
  .sd-col-xl-1 { flex: 0 0 auto; width: 8.33333%; }
  .sd-col-xl-2 { flex: 0 0 auto; width: 16.6667%; }
  .sd-col-xl-3 { flex: 0 0 auto; width: 25%; }
  .sd-col-xl-4 { flex: 0 0 auto; width: 33.3333%; }
  .sd-col-xl-5 { flex: 0 0 auto; width: 41.6667%; }
  .sd-col-xl-6 { flex: 0 0 auto; width: 50%; }
  .sd-col-xl-7 { flex: 0 0 auto; width: 58.3333%; }
  .sd-col-xl-8 { flex: 0 0 auto; width: 66.6667%; }
  .sd-col-xl-9 { flex: 0 0 auto; width: 75%; }
  .sd-col-xl-10 { flex: 0 0 auto; width: 83.3333%; }
  .sd-col-xl-11 { flex: 0 0 auto; width: 91.6667%; }
  .sd-col-xl-12 { flex: 0 0 auto; width: 100%; }
  .sd-g-xl-0, .sd-gy-xl-0 { --sd-gutter-y: 0; }
  .sd-g-xl-0, .sd-gx-xl-0 { --sd-gutter-x: 0; }
  .sd-g-xl-1, .sd-gy-xl-1 { --sd-gutter-y: 0.25rem; }
  .sd-g-xl-1, .sd-gx-xl-1 { --sd-gutter-x: 0.25rem; }
  .sd-g-xl-2, .sd-gy-xl-2 { --sd-gutter-y: 0.5rem; }
  .sd-g-xl-2, .sd-gx-xl-2 { --sd-gutter-x: 0.5rem; }
  .sd-g-xl-3, .sd-gy-xl-3 { --sd-gutter-y: 1rem; }
  .sd-g-xl-3, .sd-gx-xl-3 { --sd-gutter-x: 1rem; }
  .sd-g-xl-4, .sd-gy-xl-4 { --sd-gutter-y: 1.5rem; }
  .sd-g-xl-4, .sd-gx-xl-4 { --sd-gutter-x: 1.5rem; }
  .sd-g-xl-5, .sd-gy-xl-5 { --sd-gutter-y: 3rem; }
  .sd-g-xl-5, .sd-gx-xl-5 { --sd-gutter-x: 3rem; }
}

.sd-flex-row-reverse { flex-direction: row-reverse !important; }

details.sd-dropdown { position: relative; }

details.sd-dropdown .sd-summary-title { font-weight: 700; user-select: none=
; padding-right: 3em !important; }

details.sd-dropdown:hover { cursor: pointer; }

details.sd-dropdown .sd-summary-content { cursor: default; }

details.sd-dropdown summary { list-style: none; padding: 1em; }

details.sd-dropdown summary .sd-octicon.no-title { vertical-align: middle; =
}

details.sd-dropdown[open] summary .sd-octicon.no-title { visibility: hidden=
; }

details.sd-dropdown summary::-webkit-details-marker { display: none; }

details.sd-dropdown summary:focus { outline: none; }

details.sd-dropdown .sd-summary-icon { margin-right: 0.5em; }

details.sd-dropdown .sd-summary-icon svg { opacity: 0.8; }

details.sd-dropdown summary:hover .sd-summary-up svg, details.sd-dropdown s=
ummary:hover .sd-summary-down svg { opacity: 1; transform: scale(1.1); }

details.sd-dropdown .sd-summary-up svg, details.sd-dropdown .sd-summary-dow=
n svg { display: block; opacity: 0.6; }

details.sd-dropdown .sd-summary-up, details.sd-dropdown .sd-summary-down { =
pointer-events: none; position: absolute; right: 1em; top: 1em; }

details.sd-dropdown[open] > .sd-summary-title .sd-summary-down { visibility=
: hidden; }

details.sd-dropdown:not([open]) > .sd-summary-title .sd-summary-up { visibi=
lity: hidden; }

details.sd-dropdown:not([open]).sd-card { border: none; }

details.sd-dropdown:not([open]) > .sd-card-header { border: 1px solid var(-=
-sd-color-card-border); border-radius: 0.25rem; }

details.sd-dropdown.sd-fade-in[open] summary ~ * { animation: 0.5s ease-in-=
out 0s 1 normal none running sd-fade-in; }

details.sd-dropdown.sd-fade-in-slide-down[open] summary ~ * { animation: 0.=
5s ease-in-out 0s 1 normal none running sd-fade-in, 0.5s ease-in-out 0s 1 n=
ormal none running sd-slide-down; }

.sd-col > .sd-dropdown { width: 100%; }

.sd-summary-content > .sd-tab-set:first-child { margin-top: 0px; }

@keyframes sd-fade-in {=20
  0% { opacity: 0; }
  100% { opacity: 1; }
}

@keyframes sd-slide-down {=20
  0% { transform: translate(0px, -10px); }
  100% { transform: translate(0px, 0px); }
}

.sd-tab-set { border-radius: 0.125rem; display: flex; flex-wrap: wrap; marg=
in: 1em 0px; position: relative; }

.sd-tab-set > input { opacity: 0; position: absolute; }

.sd-tab-set > input:checked + label { border-color: var(--sd-color-tabs-und=
erline-active); color: var(--sd-color-tabs-label-active); }

.sd-tab-set > input:checked + label + .sd-tab-content { display: block; }

.sd-tab-set > input:not(:checked) + label:hover { color: var(--sd-color-tab=
s-label-hover); border-color: var(--sd-color-tabs-underline-hover); }

.sd-tab-set > input:focus + label { outline-style: auto; }

.sd-tab-set > input:not(.focus-visible) + label { outline: none; -webkit-ta=
p-highlight-color: transparent; }

.sd-tab-set > label { border-bottom-width: 0.125rem; border-bottom-style: s=
olid; margin-bottom: 0px; color: var(--sd-color-tabs-label-inactive); borde=
r-color: var(--sd-color-tabs-underline-inactive); cursor: pointer; font-siz=
e: var(--sd-fontsize-tabs-label); font-weight: 700; padding: 1em 1.25em 0.5=
em; transition: color 250ms; width: auto; z-index: 1; }

html .sd-tab-set > label:hover { color: var(--sd-color-tabs-label-active); =
}

.sd-col > .sd-tab-set { width: 100%; }

.sd-tab-content { box-shadow: 0 -0.0625rem var(--sd-color-tabs-overline),0 =
.0625rem var(--sd-color-tabs-underline); display: none; order: 99; padding-=
bottom: 0.75rem; padding-top: 0.75rem; width: 100%; }

.sd-tab-content > :first-child { margin-top: 0px !important; }

.sd-tab-content > :last-child { margin-bottom: 0px !important; }

.sd-tab-content > .sd-tab-set { margin: 0px; }

.sd-sphinx-override, .sd-sphinx-override * { box-sizing: border-box; }

.sd-sphinx-override p { margin-top: 0px; }

:root { --sd-color-primary: #007bff; --sd-color-secondary: #6c757d; --sd-co=
lor-success: #28a745; --sd-color-info: #17a2b8; --sd-color-warning: #f0b37e=
; --sd-color-danger: #dc3545; --sd-color-light: #f8f9fa; --sd-color-muted: =
#6c757d; --sd-color-dark: #212529; --sd-color-black: black; --sd-color-whit=
e: white; --sd-color-primary-highlight: #0069d9; --sd-color-secondary-highl=
ight: #5c636a; --sd-color-success-highlight: #228e3b; --sd-color-info-highl=
ight: #148a9c; --sd-color-warning-highlight: #cc986b; --sd-color-danger-hig=
hlight: #bb2d3b; --sd-color-light-highlight: #d3d4d5; --sd-color-muted-high=
light: #5c636a; --sd-color-dark-highlight: #1c1f23; --sd-color-black-highli=
ght: black; --sd-color-white-highlight: #d9d9d9; --sd-color-primary-text: #=
fff; --sd-color-secondary-text: #fff; --sd-color-success-text: #fff; --sd-c=
olor-info-text: #fff; --sd-color-warning-text: #212529; --sd-color-danger-t=
ext: #fff; --sd-color-light-text: #212529; --sd-color-muted-text: #fff; --s=
d-color-dark-text: #fff; --sd-color-black-text: #fff; --sd-color-white-text=
: #212529; --sd-color-shadow: rgba(0, 0, 0, 0.15); --sd-color-card-border: =
rgba(0, 0, 0, 0.125); --sd-color-card-border-hover: hsla(231, 99%, 66%, 1);=
 --sd-color-card-background: transparent; --sd-color-card-text: inherit; --=
sd-color-card-header: transparent; --sd-color-card-footer: transparent; --s=
d-color-tabs-label-active: hsla(231, 99%, 66%, 1); --sd-color-tabs-label-ho=
ver: hsla(231, 99%, 66%, 1); --sd-color-tabs-label-inactive: hsl(0, 0%, 66%=
); --sd-color-tabs-underline-active: hsla(231, 99%, 66%, 1); --sd-color-tab=
s-underline-hover: rgba(178, 206, 245, 0.62); --sd-color-tabs-underline-ina=
ctive: transparent; --sd-color-tabs-overline: rgb(222, 222, 222); --sd-colo=
r-tabs-underline: rgb(222, 222, 222); --sd-fontsize-tabs-label: 1rem; }
------MultipartBoundary--LqhmvZwTEGngQgONNpxZE3xQGOpsvkJLZXDlKAsK95----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/_static/copybutton.css

@charset "utf-8";

button.copybtn { position: absolute; display: flex; top: 0.3em; right: 0.3e=
m; width: 1.7em; height: 1.7em; opacity: 0; transition: opacity 0.3s, borde=
r 0.3s, background-color 0.3s; user-select: none; padding: 0px; outline: no=
ne; border-radius: 0.4em; border: 1px solid rgba(27, 31, 36, 0.15); backgro=
und-color: rgb(246, 248, 250); color: rgb(87, 96, 106); }

button.copybtn.success { border-color: rgb(34, 134, 58); color: rgb(34, 134=
, 58); }

button.copybtn svg { stroke: currentcolor; width: 1.5em; height: 1.5em; pad=
ding: 0.1em; }

div.highlight { position: relative; }

.highlight:hover button.copybtn, button.copybtn.success { opacity: 1; }

.highlight button.copybtn:hover { background-color: rgb(235, 235, 235); }

.highlight button.copybtn:active { background-color: rgb(187, 187, 187); }

.o-tooltip--left { position: relative; }

.o-tooltip--left::after { opacity: 0; visibility: hidden; position: absolut=
e; content: attr(data-tooltip); padding: 0.2em; font-size: 0.8em; left: -0.=
2em; background: grey; color: white; white-space: nowrap; z-index: 2; borde=
r-radius: 2px; transform: translateX(-102%) translateY(0px); transition: op=
acity 0.2s cubic-bezier(0.64, 0.09, 0.08, 1), transform 0.2s cubic-bezier(0=
.64, 0.09, 0.08, 1); }

.o-tooltip--left:hover::after { display: block; opacity: 1; visibility: vis=
ible; transform: translateX(-100%) translateY(0px); transition: opacity 0.2=
s cubic-bezier(0.64, 0.09, 0.08, 1) 0.5s, transform 0.2s cubic-bezier(0.64,=
 0.09, 0.08, 1); }

@media print {
  button.copybtn { display: none; }
}
------MultipartBoundary--LqhmvZwTEGngQgONNpxZE3xQGOpsvkJLZXDlKAsK95----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/_static/css/theme.css

@charset "utf-8";

html { box-sizing: border-box; }

*, ::after, ::before { box-sizing: inherit; }

article, aside, details, figcaption, figure, footer, header, hgroup, nav, s=
ection { display: block; }

audio, canvas, video { display: inline-block; }

[hidden], audio:not([controls]) { display: none; }

* { box-sizing: border-box; }

html { font-size: 100%; text-size-adjust: 100%; }

body { margin: 0px; }

a:active, a:hover { outline: 0px; }

abbr[title] { border-bottom: 1px dotted; }

b, strong { font-weight: 700; }

blockquote { margin: 0px; }

dfn { font-style: italic; }

ins { background: rgb(255, 255, 153); text-decoration: none; }

ins, mark { color: rgb(0, 0, 0); }

mark { background: rgb(255, 255, 0); font-style: italic; font-weight: 700; =
}

.rst-content code, .rst-content tt, code, kbd, pre, samp { font-family: mon=
ospace, serif; font-size: 1em; }

pre { white-space: pre; }

q { quotes: none; }

q::after, q::before { content: none; }

small { font-size: 85%; }

sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-ali=
gn: baseline; }

sup { top: -0.5em; }

sub { bottom: -0.25em; }

dl, ol, ul { margin: 0px; padding: 0px; list-style: none none; }

li { list-style: none; }

dd { margin: 0px; }

img { border: 0px; vertical-align: middle; max-width: 100%; }

svg:not(:root) { overflow: hidden; }

figure, form { margin: 0px; }

label { cursor: pointer; }

button, input, select, textarea { font-size: 100%; margin: 0px; vertical-al=
ign: baseline; }

button, input { line-height: normal; }

button, input[type=3D"button"], input[type=3D"reset"], input[type=3D"submit=
"] { cursor: pointer; appearance: button; }

button[disabled], input[disabled] { cursor: default; }

input[type=3D"search"] { appearance: textfield; box-sizing: content-box; }

textarea { resize: vertical; }

table { border-collapse: collapse; border-spacing: 0px; }

td { vertical-align: top; }

.chromeframe { margin: 0.2em 0px; background: rgb(204, 204, 204); color: rg=
b(0, 0, 0); padding: 0.2em 0px; }

.ir { display: block; border: 0px; text-indent: -999em; overflow: hidden; b=
ackground-color: transparent; background-repeat: no-repeat; text-align: lef=
t; direction: ltr; }

.ir br { display: none; }

.hidden { display: none !important; visibility: hidden; }

.visuallyhidden { border: 0px; clip: rect(0px, 0px, 0px, 0px); height: 1px;=
 margin: -1px; overflow: hidden; padding: 0px; position: absolute; width: 1=
px; }

.visuallyhidden.focusable:active, .visuallyhidden.focusable:focus { clip: a=
uto; height: auto; margin: 0px; overflow: visible; position: static; width:=
 auto; }

.invisible { visibility: hidden; }

.relative { position: relative; }

big, small { font-size: 100%; }

@media print {
  body, html, section { background: none !important; }
  * { box-shadow: none !important; text-shadow: none !important; filter: no=
ne !important; }
  a, a:visited { text-decoration: underline; }
  .ir a::after, a[href^=3D"#"]::after, a[href^=3D"javascript:"]::after { co=
ntent: ""; }
  blockquote, pre { break-inside: avoid; }
  thead { display: table-header-group; }
  img, tr { break-inside: avoid; }
  img { max-width: 100% !important; }
  @page { margin: 0.5cm; }
  .rst-content .toctree-wrapper > p.caption, h2, h3, p { orphans: 3; widows=
: 3; }
  .rst-content .toctree-wrapper > p.caption, h2, h3 { break-after: avoid; }
}

.btn, .fa::before, .icon::before, .rst-content .admonition, .rst-content .a=
dmonition-title::before, .rst-content .admonition-todo, .rst-content .atten=
tion, .rst-content .caution, .rst-content .code-block-caption .headerlink::=
before, .rst-content .danger, .rst-content .eqno .headerlink::before, .rst-=
content .error, .rst-content .hint, .rst-content .important, .rst-content .=
note, .rst-content .seealso, .rst-content .tip, .rst-content .warning, .rst=
-content code.download span:first-child::before, .rst-content dl dt .header=
link::before, .rst-content h1 .headerlink::before, .rst-content h2 .headerl=
ink::before, .rst-content h3 .headerlink::before, .rst-content h4 .headerli=
nk::before, .rst-content h5 .headerlink::before, .rst-content h6 .headerlin=
k::before, .rst-content p.caption .headerlink::before, .rst-content p .head=
erlink::before, .rst-content table > caption .headerlink::before, .rst-cont=
ent tt.download span:first-child::before, .wy-alert, .wy-dropdown .caret::b=
efore, .wy-inline-validate.wy-inline-validate-danger .wy-input-context::bef=
ore, .wy-inline-validate.wy-inline-validate-info .wy-input-context::before,=
 .wy-inline-validate.wy-inline-validate-success .wy-input-context::before, =
.wy-inline-validate.wy-inline-validate-warning .wy-input-context::before, .=
wy-menu-vertical li.current > a, .wy-menu-vertical li.current > a button.to=
ctree-expand::before, .wy-menu-vertical li.on a, .wy-menu-vertical li.on a =
button.toctree-expand::before, .wy-menu-vertical li button.toctree-expand::=
before, .wy-nav-top a, .wy-side-nav-search .wy-dropdown > a, .wy-side-nav-s=
earch > a, input[type=3D"color"], input[type=3D"date"], input[type=3D"datet=
ime-local"], input[type=3D"datetime"], input[type=3D"email"], input[type=3D=
"month"], input[type=3D"number"], input[type=3D"password"], input[type=3D"s=
earch"], input[type=3D"tel"], input[type=3D"text"], input[type=3D"time"], i=
nput[type=3D"url"], input[type=3D"week"], select, textarea { -webkit-font-s=
moothing: antialiased; }

.clearfix { }

.clearfix::after, .clearfix::before { display: table; content: ""; }

.clearfix::after { clear: both; }

@font-face { font-family: FontAwesome; src: url("fonts/fontawesome-webfont.=
woff2?af7ae505a9eed503f8b8e6982036873e") format("woff2"), url("fonts/fontaw=
esome-webfont.woff?fee66e712a8a08eef5805a46892932ad") format("woff"), url("=
fonts/fontawesome-webfont.ttf?b06871f281fee6b241d60582ae9369b9") format("tr=
uetype"); font-weight: 400; font-style: normal; }

.fa, .icon, .rst-content .admonition-title, .rst-content .code-block-captio=
n .headerlink, .rst-content .eqno .headerlink, .rst-content code.download s=
pan:first-child, .rst-content dl dt .headerlink, .rst-content h1 .headerlin=
k, .rst-content h2 .headerlink, .rst-content h3 .headerlink, .rst-content h=
4 .headerlink, .rst-content h5 .headerlink, .rst-content h6 .headerlink, .r=
st-content p.caption .headerlink, .rst-content p .headerlink, .rst-content =
table > caption .headerlink, .rst-content tt.download span:first-child, .wy=
-menu-vertical li.current > a button.toctree-expand, .wy-menu-vertical li.o=
n a button.toctree-expand, .wy-menu-vertical li button.toctree-expand { dis=
play: inline-block; font-style: normal; font-variant: normal; font-size-adj=
ust: none; font-kerning: auto; font-optical-sizing: auto; font-feature-sett=
ings: normal; font-variation-settings: normal; font-weight: normal; font-st=
retch: normal; line-height: 1; font-family: FontAwesome; font-size: inherit=
; text-rendering: auto; -webkit-font-smoothing: antialiased; }

.fa-lg { font-size: 1.33333em; line-height: 0.75em; vertical-align: -15%; }

.fa-2x { font-size: 2em; }

.fa-3x { font-size: 3em; }

.fa-4x { font-size: 4em; }

.fa-5x { font-size: 5em; }

.fa-fw { width: 1.28571em; text-align: center; }

.fa-ul { padding-left: 0px; margin-left: 2.14286em; list-style-type: none; =
}

.fa-ul > li { position: relative; }

.fa-li { position: absolute; left: -2.14286em; width: 2.14286em; top: 0.142=
86em; text-align: center; }

.fa-li.fa-lg { left: -1.85714em; }

.fa-border { padding: 0.2em 0.25em 0.15em; border: 0.08em solid rgb(238, 23=
8, 238); border-radius: 0.1em; }

.fa-pull-left { float: left; }

.fa-pull-right { float: right; }

.fa-pull-left.icon, .fa.fa-pull-left, .rst-content .code-block-caption .fa-=
pull-left.headerlink, .rst-content .eqno .fa-pull-left.headerlink, .rst-con=
tent .fa-pull-left.admonition-title, .rst-content code.download span.fa-pul=
l-left:first-child, .rst-content dl dt .fa-pull-left.headerlink, .rst-conte=
nt h1 .fa-pull-left.headerlink, .rst-content h2 .fa-pull-left.headerlink, .=
rst-content h3 .fa-pull-left.headerlink, .rst-content h4 .fa-pull-left.head=
erlink, .rst-content h5 .fa-pull-left.headerlink, .rst-content h6 .fa-pull-=
left.headerlink, .rst-content p .fa-pull-left.headerlink, .rst-content tabl=
e > caption .fa-pull-left.headerlink, .rst-content tt.download span.fa-pull=
-left:first-child, .wy-menu-vertical li.current > a button.fa-pull-left.toc=
tree-expand, .wy-menu-vertical li.on a button.fa-pull-left.toctree-expand, =
.wy-menu-vertical li button.fa-pull-left.toctree-expand { margin-right: 0.3=
em; }

.fa-pull-right.icon, .fa.fa-pull-right, .rst-content .code-block-caption .f=
a-pull-right.headerlink, .rst-content .eqno .fa-pull-right.headerlink, .rst=
-content .fa-pull-right.admonition-title, .rst-content code.download span.f=
a-pull-right:first-child, .rst-content dl dt .fa-pull-right.headerlink, .rs=
t-content h1 .fa-pull-right.headerlink, .rst-content h2 .fa-pull-right.head=
erlink, .rst-content h3 .fa-pull-right.headerlink, .rst-content h4 .fa-pull=
-right.headerlink, .rst-content h5 .fa-pull-right.headerlink, .rst-content =
h6 .fa-pull-right.headerlink, .rst-content p .fa-pull-right.headerlink, .rs=
t-content table > caption .fa-pull-right.headerlink, .rst-content tt.downlo=
ad span.fa-pull-right:first-child, .wy-menu-vertical li.current > a button.=
fa-pull-right.toctree-expand, .wy-menu-vertical li.on a button.fa-pull-righ=
t.toctree-expand, .wy-menu-vertical li button.fa-pull-right.toctree-expand =
{ margin-left: 0.3em; }

.pull-right { float: right; }

.pull-left { float: left; }

.fa.pull-left, .pull-left.icon, .rst-content .code-block-caption .pull-left=
.headerlink, .rst-content .eqno .pull-left.headerlink, .rst-content .pull-l=
eft.admonition-title, .rst-content code.download span.pull-left:first-child=
, .rst-content dl dt .pull-left.headerlink, .rst-content h1 .pull-left.head=
erlink, .rst-content h2 .pull-left.headerlink, .rst-content h3 .pull-left.h=
eaderlink, .rst-content h4 .pull-left.headerlink, .rst-content h5 .pull-lef=
t.headerlink, .rst-content h6 .pull-left.headerlink, .rst-content p .pull-l=
eft.headerlink, .rst-content table > caption .pull-left.headerlink, .rst-co=
ntent tt.download span.pull-left:first-child, .wy-menu-vertical li.current =
> a button.pull-left.toctree-expand, .wy-menu-vertical li.on a button.pull-=
left.toctree-expand, .wy-menu-vertical li button.pull-left.toctree-expand {=
 margin-right: 0.3em; }

.fa.pull-right, .pull-right.icon, .rst-content .code-block-caption .pull-ri=
ght.headerlink, .rst-content .eqno .pull-right.headerlink, .rst-content .pu=
ll-right.admonition-title, .rst-content code.download span.pull-right:first=
-child, .rst-content dl dt .pull-right.headerlink, .rst-content h1 .pull-ri=
ght.headerlink, .rst-content h2 .pull-right.headerlink, .rst-content h3 .pu=
ll-right.headerlink, .rst-content h4 .pull-right.headerlink, .rst-content h=
5 .pull-right.headerlink, .rst-content h6 .pull-right.headerlink, .rst-cont=
ent p .pull-right.headerlink, .rst-content table > caption .pull-right.head=
erlink, .rst-content tt.download span.pull-right:first-child, .wy-menu-vert=
ical li.current > a button.pull-right.toctree-expand, .wy-menu-vertical li.=
on a button.pull-right.toctree-expand, .wy-menu-vertical li button.pull-rig=
ht.toctree-expand { margin-left: 0.3em; }

.fa-spin { animation: 2s linear 0s infinite normal none running fa-spin; }

.fa-pulse { animation: 1s steps(8) 0s infinite normal none running fa-spin;=
 }

@-webkit-keyframes fa-spin {=20
  0% { transform: rotate(0deg); }
  100% { transform: rotate(359deg); }
}

@keyframes fa-spin {=20
  0% { transform: rotate(0deg); }
  100% { transform: rotate(359deg); }
}

.fa-rotate-90 { transform: rotate(90deg); }

.fa-rotate-180 { transform: rotate(180deg); }

.fa-rotate-270 { transform: rotate(270deg); }

.fa-flip-horizontal { transform: scaleX(-1); }

.fa-flip-vertical { transform: scaleY(-1); }

:root .fa-flip-horizontal, :root .fa-flip-vertical, :root .fa-rotate-90, :r=
oot .fa-rotate-180, :root .fa-rotate-270 { filter: none; }

.fa-stack { position: relative; display: inline-block; width: 2em; height: =
2em; line-height: 2em; vertical-align: middle; }

.fa-stack-1x, .fa-stack-2x { position: absolute; left: 0px; width: 100%; te=
xt-align: center; }

.fa-stack-1x { line-height: inherit; }

.fa-stack-2x { font-size: 2em; }

.fa-inverse { color: rgb(255, 255, 255); }

.fa-glass::before { content: "=EF=80=80"; }

.fa-music::before { content: "=EF=80=81"; }

.fa-search::before, .icon-search::before { content: "=EF=80=82"; }

.fa-envelope-o::before { content: "=EF=80=83"; }

.fa-heart::before { content: "=EF=80=84"; }

.fa-star::before { content: "=EF=80=85"; }

.fa-star-o::before { content: "=EF=80=86"; }

.fa-user::before { content: "=EF=80=87"; }

.fa-film::before { content: "=EF=80=88"; }

.fa-th-large::before { content: "=EF=80=89"; }

.fa-th::before { content: "=EF=80=8A"; }

.fa-th-list::before { content: "=EF=80=8B"; }

.fa-check::before { content: "=EF=80=8C"; }

.fa-close::before, .fa-remove::before, .fa-times::before { content: "=EF=80=
=8D"; }

.fa-search-plus::before { content: "=EF=80=8E"; }

.fa-search-minus::before { content: "=EF=80=90"; }

.fa-power-off::before { content: "=EF=80=91"; }

.fa-signal::before { content: "=EF=80=92"; }

.fa-cog::before, .fa-gear::before { content: "=EF=80=93"; }

.fa-trash-o::before { content: "=EF=80=94"; }

.fa-home::before, .icon-home::before { content: "=EF=80=95"; }

.fa-file-o::before { content: "=EF=80=96"; }

.fa-clock-o::before { content: "=EF=80=97"; }

.fa-road::before { content: "=EF=80=98"; }

.fa-download::before, .rst-content code.download span:first-child::before, =
.rst-content tt.download span:first-child::before { content: "=EF=80=99"; }

.fa-arrow-circle-o-down::before { content: "=EF=80=9A"; }

.fa-arrow-circle-o-up::before { content: "=EF=80=9B"; }

.fa-inbox::before { content: "=EF=80=9C"; }

.fa-play-circle-o::before { content: "=EF=80=9D"; }

.fa-repeat::before, .fa-rotate-right::before { content: "=EF=80=9E"; }

.fa-refresh::before { content: "=EF=80=A1"; }

.fa-list-alt::before { content: "=EF=80=A2"; }

.fa-lock::before { content: "=EF=80=A3"; }

.fa-flag::before { content: "=EF=80=A4"; }

.fa-headphones::before { content: "=EF=80=A5"; }

.fa-volume-off::before { content: "=EF=80=A6"; }

.fa-volume-down::before { content: "=EF=80=A7"; }

.fa-volume-up::before { content: "=EF=80=A8"; }

.fa-qrcode::before { content: "=EF=80=A9"; }

.fa-barcode::before { content: "=EF=80=AA"; }

.fa-tag::before { content: "=EF=80=AB"; }

.fa-tags::before { content: "=EF=80=AC"; }

.fa-book::before, .icon-book::before { content: "=EF=80=AD"; }

.fa-bookmark::before { content: "=EF=80=AE"; }

.fa-print::before { content: "=EF=80=AF"; }

.fa-camera::before { content: "=EF=80=B0"; }

.fa-font::before { content: "=EF=80=B1"; }

.fa-bold::before { content: "=EF=80=B2"; }

.fa-italic::before { content: "=EF=80=B3"; }

.fa-text-height::before { content: "=EF=80=B4"; }

.fa-text-width::before { content: "=EF=80=B5"; }

.fa-align-left::before { content: "=EF=80=B6"; }

.fa-align-center::before { content: "=EF=80=B7"; }

.fa-align-right::before { content: "=EF=80=B8"; }

.fa-align-justify::before { content: "=EF=80=B9"; }

.fa-list::before { content: "=EF=80=BA"; }

.fa-dedent::before, .fa-outdent::before { content: "=EF=80=BB"; }

.fa-indent::before { content: "=EF=80=BC"; }

.fa-video-camera::before { content: "=EF=80=BD"; }

.fa-image::before, .fa-photo::before, .fa-picture-o::before { content: "=EF=
=80=BE"; }

.fa-pencil::before { content: "=EF=81=80"; }

.fa-map-marker::before { content: "=EF=81=81"; }

.fa-adjust::before { content: "=EF=81=82"; }

.fa-tint::before { content: "=EF=81=83"; }

.fa-edit::before, .fa-pencil-square-o::before { content: "=EF=81=84"; }

.fa-share-square-o::before { content: "=EF=81=85"; }

.fa-check-square-o::before { content: "=EF=81=86"; }

.fa-arrows::before { content: "=EF=81=87"; }

.fa-step-backward::before { content: "=EF=81=88"; }

.fa-fast-backward::before { content: "=EF=81=89"; }

.fa-backward::before { content: "=EF=81=8A"; }

.fa-play::before { content: "=EF=81=8B"; }

.fa-pause::before { content: "=EF=81=8C"; }

.fa-stop::before { content: "=EF=81=8D"; }

.fa-forward::before { content: "=EF=81=8E"; }

.fa-fast-forward::before { content: "=EF=81=90"; }

.fa-step-forward::before { content: "=EF=81=91"; }

.fa-eject::before { content: "=EF=81=92"; }

.fa-chevron-left::before { content: "=EF=81=93"; }

.fa-chevron-right::before { content: "=EF=81=94"; }

.fa-plus-circle::before { content: "=EF=81=95"; }

.fa-minus-circle::before { content: "=EF=81=96"; }

.fa-times-circle::before, .wy-inline-validate.wy-inline-validate-danger .wy=
-input-context::before { content: "=EF=81=97"; }

.fa-check-circle::before, .wy-inline-validate.wy-inline-validate-success .w=
y-input-context::before { content: "=EF=81=98"; }

.fa-question-circle::before { content: "=EF=81=99"; }

.fa-info-circle::before { content: "=EF=81=9A"; }

.fa-crosshairs::before { content: "=EF=81=9B"; }

.fa-times-circle-o::before { content: "=EF=81=9C"; }

.fa-check-circle-o::before { content: "=EF=81=9D"; }

.fa-ban::before { content: "=EF=81=9E"; }

.fa-arrow-left::before { content: "=EF=81=A0"; }

.fa-arrow-right::before { content: "=EF=81=A1"; }

.fa-arrow-up::before { content: "=EF=81=A2"; }

.fa-arrow-down::before { content: "=EF=81=A3"; }

.fa-mail-forward::before, .fa-share::before { content: "=EF=81=A4"; }

.fa-expand::before { content: "=EF=81=A5"; }

.fa-compress::before { content: "=EF=81=A6"; }

.fa-plus::before { content: "=EF=81=A7"; }

.fa-minus::before { content: "=EF=81=A8"; }

.fa-asterisk::before { content: "=EF=81=A9"; }

.fa-exclamation-circle::before, .rst-content .admonition-title::before, .wy=
-inline-validate.wy-inline-validate-info .wy-input-context::before, .wy-inl=
ine-validate.wy-inline-validate-warning .wy-input-context::before { content=
: "=EF=81=AA"; }

.fa-gift::before { content: "=EF=81=AB"; }

.fa-leaf::before { content: "=EF=81=AC"; }

.fa-fire::before, .icon-fire::before { content: "=EF=81=AD"; }

.fa-eye::before { content: "=EF=81=AE"; }

.fa-eye-slash::before { content: "=EF=81=B0"; }

.fa-exclamation-triangle::before, .fa-warning::before { content: "=EF=81=B1=
"; }

.fa-plane::before { content: "=EF=81=B2"; }

.fa-calendar::before { content: "=EF=81=B3"; }

.fa-random::before { content: "=EF=81=B4"; }

.fa-comment::before { content: "=EF=81=B5"; }

.fa-magnet::before { content: "=EF=81=B6"; }

.fa-chevron-up::before { content: "=EF=81=B7"; }

.fa-chevron-down::before { content: "=EF=81=B8"; }

.fa-retweet::before { content: "=EF=81=B9"; }

.fa-shopping-cart::before { content: "=EF=81=BA"; }

.fa-folder::before { content: "=EF=81=BB"; }

.fa-folder-open::before { content: "=EF=81=BC"; }

.fa-arrows-v::before { content: "=EF=81=BD"; }

.fa-arrows-h::before { content: "=EF=81=BE"; }

.fa-bar-chart-o::before, .fa-bar-chart::before { content: "=EF=82=80"; }

.fa-twitter-square::before { content: "=EF=82=81"; }

.fa-facebook-square::before { content: "=EF=82=82"; }

.fa-camera-retro::before { content: "=EF=82=83"; }

.fa-key::before { content: "=EF=82=84"; }

.fa-cogs::before, .fa-gears::before { content: "=EF=82=85"; }

.fa-comments::before { content: "=EF=82=86"; }

.fa-thumbs-o-up::before { content: "=EF=82=87"; }

.fa-thumbs-o-down::before { content: "=EF=82=88"; }

.fa-star-half::before { content: "=EF=82=89"; }

.fa-heart-o::before { content: "=EF=82=8A"; }

.fa-sign-out::before { content: "=EF=82=8B"; }

.fa-linkedin-square::before { content: "=EF=82=8C"; }

.fa-thumb-tack::before { content: "=EF=82=8D"; }

.fa-external-link::before { content: "=EF=82=8E"; }

.fa-sign-in::before { content: "=EF=82=90"; }

.fa-trophy::before { content: "=EF=82=91"; }

.fa-github-square::before { content: "=EF=82=92"; }

.fa-upload::before { content: "=EF=82=93"; }

.fa-lemon-o::before { content: "=EF=82=94"; }

.fa-phone::before { content: "=EF=82=95"; }

.fa-square-o::before { content: "=EF=82=96"; }

.fa-bookmark-o::before { content: "=EF=82=97"; }

.fa-phone-square::before { content: "=EF=82=98"; }

.fa-twitter::before { content: "=EF=82=99"; }

.fa-facebook-f::before, .fa-facebook::before { content: "=EF=82=9A"; }

.fa-github::before, .icon-github::before { content: "=EF=82=9B"; }

.fa-unlock::before { content: "=EF=82=9C"; }

.fa-credit-card::before { content: "=EF=82=9D"; }

.fa-feed::before, .fa-rss::before { content: "=EF=82=9E"; }

.fa-hdd-o::before { content: "=EF=82=A0"; }

.fa-bullhorn::before { content: "=EF=82=A1"; }

.fa-bell::before { content: "=EF=83=B3"; }

.fa-certificate::before { content: "=EF=82=A3"; }

.fa-hand-o-right::before { content: "=EF=82=A4"; }

.fa-hand-o-left::before { content: "=EF=82=A5"; }

.fa-hand-o-up::before { content: "=EF=82=A6"; }

.fa-hand-o-down::before { content: "=EF=82=A7"; }

.fa-arrow-circle-left::before, .icon-circle-arrow-left::before { content: "=
=EF=82=A8"; }

.fa-arrow-circle-right::before, .icon-circle-arrow-right::before { content:=
 "=EF=82=A9"; }

.fa-arrow-circle-up::before { content: "=EF=82=AA"; }

.fa-arrow-circle-down::before { content: "=EF=82=AB"; }

.fa-globe::before { content: "=EF=82=AC"; }

.fa-wrench::before { content: "=EF=82=AD"; }

.fa-tasks::before { content: "=EF=82=AE"; }

.fa-filter::before { content: "=EF=82=B0"; }

.fa-briefcase::before { content: "=EF=82=B1"; }

.fa-arrows-alt::before { content: "=EF=82=B2"; }

.fa-group::before, .fa-users::before { content: "=EF=83=80"; }

.fa-chain::before, .fa-link::before, .icon-link::before { content: "=EF=83=
=81"; }

.fa-cloud::before { content: "=EF=83=82"; }

.fa-flask::before { content: "=EF=83=83"; }

.fa-cut::before, .fa-scissors::before { content: "=EF=83=84"; }

.fa-copy::before, .fa-files-o::before { content: "=EF=83=85"; }

.fa-paperclip::before { content: "=EF=83=86"; }

.fa-floppy-o::before, .fa-save::before { content: "=EF=83=87"; }

.fa-square::before { content: "=EF=83=88"; }

.fa-bars::before, .fa-navicon::before, .fa-reorder::before { content: "=EF=
=83=89"; }

.fa-list-ul::before { content: "=EF=83=8A"; }

.fa-list-ol::before { content: "=EF=83=8B"; }

.fa-strikethrough::before { content: "=EF=83=8C"; }

.fa-underline::before { content: "=EF=83=8D"; }

.fa-table::before { content: "=EF=83=8E"; }

.fa-magic::before { content: "=EF=83=90"; }

.fa-truck::before { content: "=EF=83=91"; }

.fa-pinterest::before { content: "=EF=83=92"; }

.fa-pinterest-square::before { content: "=EF=83=93"; }

.fa-google-plus-square::before { content: "=EF=83=94"; }

.fa-google-plus::before { content: "=EF=83=95"; }

.fa-money::before { content: "=EF=83=96"; }

.fa-caret-down::before, .icon-caret-down::before, .wy-dropdown .caret::befo=
re { content: "=EF=83=97"; }

.fa-caret-up::before { content: "=EF=83=98"; }

.fa-caret-left::before { content: "=EF=83=99"; }

.fa-caret-right::before { content: "=EF=83=9A"; }

.fa-columns::before { content: "=EF=83=9B"; }

.fa-sort::before, .fa-unsorted::before { content: "=EF=83=9C"; }

.fa-sort-desc::before, .fa-sort-down::before { content: "=EF=83=9D"; }

.fa-sort-asc::before, .fa-sort-up::before { content: "=EF=83=9E"; }

.fa-envelope::before { content: "=EF=83=A0"; }

.fa-linkedin::before { content: "=EF=83=A1"; }

.fa-rotate-left::before, .fa-undo::before { content: "=EF=83=A2"; }

.fa-gavel::before, .fa-legal::before { content: "=EF=83=A3"; }

.fa-dashboard::before, .fa-tachometer::before { content: "=EF=83=A4"; }

.fa-comment-o::before { content: "=EF=83=A5"; }

.fa-comments-o::before { content: "=EF=83=A6"; }

.fa-bolt::before, .fa-flash::before { content: "=EF=83=A7"; }

.fa-sitemap::before { content: "=EF=83=A8"; }

.fa-umbrella::before { content: "=EF=83=A9"; }

.fa-clipboard::before, .fa-paste::before { content: "=EF=83=AA"; }

.fa-lightbulb-o::before { content: "=EF=83=AB"; }

.fa-exchange::before { content: "=EF=83=AC"; }

.fa-cloud-download::before { content: "=EF=83=AD"; }

.fa-cloud-upload::before { content: "=EF=83=AE"; }

.fa-user-md::before { content: "=EF=83=B0"; }

.fa-stethoscope::before { content: "=EF=83=B1"; }

.fa-suitcase::before { content: "=EF=83=B2"; }

.fa-bell-o::before { content: "=EF=82=A2"; }

.fa-coffee::before { content: "=EF=83=B4"; }

.fa-cutlery::before { content: "=EF=83=B5"; }

.fa-file-text-o::before { content: "=EF=83=B6"; }

.fa-building-o::before { content: "=EF=83=B7"; }

.fa-hospital-o::before { content: "=EF=83=B8"; }

.fa-ambulance::before { content: "=EF=83=B9"; }

.fa-medkit::before { content: "=EF=83=BA"; }

.fa-fighter-jet::before { content: "=EF=83=BB"; }

.fa-beer::before { content: "=EF=83=BC"; }

.fa-h-square::before { content: "=EF=83=BD"; }

.fa-plus-square::before { content: "=EF=83=BE"; }

.fa-angle-double-left::before { content: "=EF=84=80"; }

.fa-angle-double-right::before { content: "=EF=84=81"; }

.fa-angle-double-up::before { content: "=EF=84=82"; }

.fa-angle-double-down::before { content: "=EF=84=83"; }

.fa-angle-left::before { content: "=EF=84=84"; }

.fa-angle-right::before { content: "=EF=84=85"; }

.fa-angle-up::before { content: "=EF=84=86"; }

.fa-angle-down::before { content: "=EF=84=87"; }

.fa-desktop::before { content: "=EF=84=88"; }

.fa-laptop::before { content: "=EF=84=89"; }

.fa-tablet::before { content: "=EF=84=8A"; }

.fa-mobile-phone::before, .fa-mobile::before { content: "=EF=84=8B"; }

.fa-circle-o::before { content: "=EF=84=8C"; }

.fa-quote-left::before { content: "=EF=84=8D"; }

.fa-quote-right::before { content: "=EF=84=8E"; }

.fa-spinner::before { content: "=EF=84=90"; }

.fa-circle::before { content: "=EF=84=91"; }

.fa-mail-reply::before, .fa-reply::before { content: "=EF=84=92"; }

.fa-github-alt::before { content: "=EF=84=93"; }

.fa-folder-o::before { content: "=EF=84=94"; }

.fa-folder-open-o::before { content: "=EF=84=95"; }

.fa-smile-o::before { content: "=EF=84=98"; }

.fa-frown-o::before { content: "=EF=84=99"; }

.fa-meh-o::before { content: "=EF=84=9A"; }

.fa-gamepad::before { content: "=EF=84=9B"; }

.fa-keyboard-o::before { content: "=EF=84=9C"; }

.fa-flag-o::before { content: "=EF=84=9D"; }

.fa-flag-checkered::before { content: "=EF=84=9E"; }

.fa-terminal::before { content: "=EF=84=A0"; }

.fa-code::before { content: "=EF=84=A1"; }

.fa-mail-reply-all::before, .fa-reply-all::before { content: "=EF=84=A2"; }

.fa-star-half-empty::before, .fa-star-half-full::before, .fa-star-half-o::b=
efore { content: "=EF=84=A3"; }

.fa-location-arrow::before { content: "=EF=84=A4"; }

.fa-crop::before { content: "=EF=84=A5"; }

.fa-code-fork::before { content: "=EF=84=A6"; }

.fa-chain-broken::before, .fa-unlink::before { content: "=EF=84=A7"; }

.fa-question::before { content: "=EF=84=A8"; }

.fa-info::before { content: "=EF=84=A9"; }

.fa-exclamation::before { content: "=EF=84=AA"; }

.fa-superscript::before { content: "=EF=84=AB"; }

.fa-subscript::before { content: "=EF=84=AC"; }

.fa-eraser::before { content: "=EF=84=AD"; }

.fa-puzzle-piece::before { content: "=EF=84=AE"; }

.fa-microphone::before { content: "=EF=84=B0"; }

.fa-microphone-slash::before { content: "=EF=84=B1"; }

.fa-shield::before { content: "=EF=84=B2"; }

.fa-calendar-o::before { content: "=EF=84=B3"; }

.fa-fire-extinguisher::before { content: "=EF=84=B4"; }

.fa-rocket::before { content: "=EF=84=B5"; }

.fa-maxcdn::before { content: "=EF=84=B6"; }

.fa-chevron-circle-left::before { content: "=EF=84=B7"; }

.fa-chevron-circle-right::before { content: "=EF=84=B8"; }

.fa-chevron-circle-up::before { content: "=EF=84=B9"; }

.fa-chevron-circle-down::before { content: "=EF=84=BA"; }

.fa-html5::before { content: "=EF=84=BB"; }

.fa-css3::before { content: "=EF=84=BC"; }

.fa-anchor::before { content: "=EF=84=BD"; }

.fa-unlock-alt::before { content: "=EF=84=BE"; }

.fa-bullseye::before { content: "=EF=85=80"; }

.fa-ellipsis-h::before { content: "=EF=85=81"; }

.fa-ellipsis-v::before { content: "=EF=85=82"; }

.fa-rss-square::before { content: "=EF=85=83"; }

.fa-play-circle::before { content: "=EF=85=84"; }

.fa-ticket::before { content: "=EF=85=85"; }

.fa-minus-square::before { content: "=EF=85=86"; }

.fa-minus-square-o::before, .wy-menu-vertical li.current > a button.toctree=
-expand::before, .wy-menu-vertical li.on a button.toctree-expand::before { =
content: "=EF=85=87"; }

.fa-level-up::before { content: "=EF=85=88"; }

.fa-level-down::before { content: "=EF=85=89"; }

.fa-check-square::before { content: "=EF=85=8A"; }

.fa-pencil-square::before { content: "=EF=85=8B"; }

.fa-external-link-square::before { content: "=EF=85=8C"; }

.fa-share-square::before { content: "=EF=85=8D"; }

.fa-compass::before { content: "=EF=85=8E"; }

.fa-caret-square-o-down::before, .fa-toggle-down::before { content: "=EF=85=
=90"; }

.fa-caret-square-o-up::before, .fa-toggle-up::before { content: "=EF=85=91"=
; }

.fa-caret-square-o-right::before, .fa-toggle-right::before { content: "=EF=
=85=92"; }

.fa-eur::before, .fa-euro::before { content: "=EF=85=93"; }

.fa-gbp::before { content: "=EF=85=94"; }

.fa-dollar::before, .fa-usd::before { content: "=EF=85=95"; }

.fa-inr::before, .fa-rupee::before { content: "=EF=85=96"; }

.fa-cny::before, .fa-jpy::before, .fa-rmb::before, .fa-yen::before { conten=
t: "=EF=85=97"; }

.fa-rouble::before, .fa-rub::before, .fa-ruble::before { content: "=EF=85=
=98"; }

.fa-krw::before, .fa-won::before { content: "=EF=85=99"; }

.fa-bitcoin::before, .fa-btc::before { content: "=EF=85=9A"; }

.fa-file::before { content: "=EF=85=9B"; }

.fa-file-text::before { content: "=EF=85=9C"; }

.fa-sort-alpha-asc::before { content: "=EF=85=9D"; }

.fa-sort-alpha-desc::before { content: "=EF=85=9E"; }

.fa-sort-amount-asc::before { content: "=EF=85=A0"; }

.fa-sort-amount-desc::before { content: "=EF=85=A1"; }

.fa-sort-numeric-asc::before { content: "=EF=85=A2"; }

.fa-sort-numeric-desc::before { content: "=EF=85=A3"; }

.fa-thumbs-up::before { content: "=EF=85=A4"; }

.fa-thumbs-down::before { content: "=EF=85=A5"; }

.fa-youtube-square::before { content: "=EF=85=A6"; }

.fa-youtube::before { content: "=EF=85=A7"; }

.fa-xing::before { content: "=EF=85=A8"; }

.fa-xing-square::before { content: "=EF=85=A9"; }

.fa-youtube-play::before { content: "=EF=85=AA"; }

.fa-dropbox::before { content: "=EF=85=AB"; }

.fa-stack-overflow::before { content: "=EF=85=AC"; }

.fa-instagram::before { content: "=EF=85=AD"; }

.fa-flickr::before { content: "=EF=85=AE"; }

.fa-adn::before { content: "=EF=85=B0"; }

.fa-bitbucket::before, .icon-bitbucket::before { content: "=EF=85=B1"; }

.fa-bitbucket-square::before { content: "=EF=85=B2"; }

.fa-tumblr::before { content: "=EF=85=B3"; }

.fa-tumblr-square::before { content: "=EF=85=B4"; }

.fa-long-arrow-down::before { content: "=EF=85=B5"; }

.fa-long-arrow-up::before { content: "=EF=85=B6"; }

.fa-long-arrow-left::before { content: "=EF=85=B7"; }

.fa-long-arrow-right::before { content: "=EF=85=B8"; }

.fa-apple::before { content: "=EF=85=B9"; }

.fa-windows::before { content: "=EF=85=BA"; }

.fa-android::before { content: "=EF=85=BB"; }

.fa-linux::before { content: "=EF=85=BC"; }

.fa-dribbble::before { content: "=EF=85=BD"; }

.fa-skype::before { content: "=EF=85=BE"; }

.fa-foursquare::before { content: "=EF=86=80"; }

.fa-trello::before { content: "=EF=86=81"; }

.fa-female::before { content: "=EF=86=82"; }

.fa-male::before { content: "=EF=86=83"; }

.fa-gittip::before, .fa-gratipay::before { content: "=EF=86=84"; }

.fa-sun-o::before { content: "=EF=86=85"; }

.fa-moon-o::before { content: "=EF=86=86"; }

.fa-archive::before { content: "=EF=86=87"; }

.fa-bug::before { content: "=EF=86=88"; }

.fa-vk::before { content: "=EF=86=89"; }

.fa-weibo::before { content: "=EF=86=8A"; }

.fa-renren::before { content: "=EF=86=8B"; }

.fa-pagelines::before { content: "=EF=86=8C"; }

.fa-stack-exchange::before { content: "=EF=86=8D"; }

.fa-arrow-circle-o-right::before { content: "=EF=86=8E"; }

.fa-arrow-circle-o-left::before { content: "=EF=86=90"; }

.fa-caret-square-o-left::before, .fa-toggle-left::before { content: "=EF=86=
=91"; }

.fa-dot-circle-o::before { content: "=EF=86=92"; }

.fa-wheelchair::before { content: "=EF=86=93"; }

.fa-vimeo-square::before { content: "=EF=86=94"; }

.fa-try::before, .fa-turkish-lira::before { content: "=EF=86=95"; }

.fa-plus-square-o::before, .wy-menu-vertical li button.toctree-expand::befo=
re { content: "=EF=86=96"; }

.fa-space-shuttle::before { content: "=EF=86=97"; }

.fa-slack::before { content: "=EF=86=98"; }

.fa-envelope-square::before { content: "=EF=86=99"; }

.fa-wordpress::before { content: "=EF=86=9A"; }

.fa-openid::before { content: "=EF=86=9B"; }

.fa-bank::before, .fa-institution::before, .fa-university::before { content=
: "=EF=86=9C"; }

.fa-graduation-cap::before, .fa-mortar-board::before { content: "=EF=86=9D"=
; }

.fa-yahoo::before { content: "=EF=86=9E"; }

.fa-google::before { content: "=EF=86=A0"; }

.fa-reddit::before { content: "=EF=86=A1"; }

.fa-reddit-square::before { content: "=EF=86=A2"; }

.fa-stumbleupon-circle::before { content: "=EF=86=A3"; }

.fa-stumbleupon::before { content: "=EF=86=A4"; }

.fa-delicious::before { content: "=EF=86=A5"; }

.fa-digg::before { content: "=EF=86=A6"; }

.fa-pied-piper-pp::before { content: "=EF=86=A7"; }

.fa-pied-piper-alt::before { content: "=EF=86=A8"; }

.fa-drupal::before { content: "=EF=86=A9"; }

.fa-joomla::before { content: "=EF=86=AA"; }

.fa-language::before { content: "=EF=86=AB"; }

.fa-fax::before { content: "=EF=86=AC"; }

.fa-building::before { content: "=EF=86=AD"; }

.fa-child::before { content: "=EF=86=AE"; }

.fa-paw::before { content: "=EF=86=B0"; }

.fa-spoon::before { content: "=EF=86=B1"; }

.fa-cube::before { content: "=EF=86=B2"; }

.fa-cubes::before { content: "=EF=86=B3"; }

.fa-behance::before { content: "=EF=86=B4"; }

.fa-behance-square::before { content: "=EF=86=B5"; }

.fa-steam::before { content: "=EF=86=B6"; }

.fa-steam-square::before { content: "=EF=86=B7"; }

.fa-recycle::before { content: "=EF=86=B8"; }

.fa-automobile::before, .fa-car::before { content: "=EF=86=B9"; }

.fa-cab::before, .fa-taxi::before { content: "=EF=86=BA"; }

.fa-tree::before { content: "=EF=86=BB"; }

.fa-spotify::before { content: "=EF=86=BC"; }

.fa-deviantart::before { content: "=EF=86=BD"; }

.fa-soundcloud::before { content: "=EF=86=BE"; }

.fa-database::before { content: "=EF=87=80"; }

.fa-file-pdf-o::before { content: "=EF=87=81"; }

.fa-file-word-o::before { content: "=EF=87=82"; }

.fa-file-excel-o::before { content: "=EF=87=83"; }

.fa-file-powerpoint-o::before { content: "=EF=87=84"; }

.fa-file-image-o::before, .fa-file-photo-o::before, .fa-file-picture-o::bef=
ore { content: "=EF=87=85"; }

.fa-file-archive-o::before, .fa-file-zip-o::before { content: "=EF=87=86"; =
}

.fa-file-audio-o::before, .fa-file-sound-o::before { content: "=EF=87=87"; =
}

.fa-file-movie-o::before, .fa-file-video-o::before { content: "=EF=87=88"; =
}

.fa-file-code-o::before { content: "=EF=87=89"; }

.fa-vine::before { content: "=EF=87=8A"; }

.fa-codepen::before { content: "=EF=87=8B"; }

.fa-jsfiddle::before { content: "=EF=87=8C"; }

.fa-life-bouy::before, .fa-life-buoy::before, .fa-life-ring::before, .fa-li=
fe-saver::before, .fa-support::before { content: "=EF=87=8D"; }

.fa-circle-o-notch::before { content: "=EF=87=8E"; }

.fa-ra::before, .fa-rebel::before, .fa-resistance::before { content: "=EF=
=87=90"; }

.fa-empire::before, .fa-ge::before { content: "=EF=87=91"; }

.fa-git-square::before { content: "=EF=87=92"; }

.fa-git::before { content: "=EF=87=93"; }

.fa-hacker-news::before, .fa-y-combinator-square::before, .fa-yc-square::be=
fore { content: "=EF=87=94"; }

.fa-tencent-weibo::before { content: "=EF=87=95"; }

.fa-qq::before { content: "=EF=87=96"; }

.fa-wechat::before, .fa-weixin::before { content: "=EF=87=97"; }

.fa-paper-plane::before, .fa-send::before { content: "=EF=87=98"; }

.fa-paper-plane-o::before, .fa-send-o::before { content: "=EF=87=99"; }

.fa-history::before { content: "=EF=87=9A"; }

.fa-circle-thin::before { content: "=EF=87=9B"; }

.fa-header::before { content: "=EF=87=9C"; }

.fa-paragraph::before { content: "=EF=87=9D"; }

.fa-sliders::before { content: "=EF=87=9E"; }

.fa-share-alt::before { content: "=EF=87=A0"; }

.fa-share-alt-square::before { content: "=EF=87=A1"; }

.fa-bomb::before { content: "=EF=87=A2"; }

.fa-futbol-o::before, .fa-soccer-ball-o::before { content: "=EF=87=A3"; }

.fa-tty::before { content: "=EF=87=A4"; }

.fa-binoculars::before { content: "=EF=87=A5"; }

.fa-plug::before { content: "=EF=87=A6"; }

.fa-slideshare::before { content: "=EF=87=A7"; }

.fa-twitch::before { content: "=EF=87=A8"; }

.fa-yelp::before { content: "=EF=87=A9"; }

.fa-newspaper-o::before { content: "=EF=87=AA"; }

.fa-wifi::before { content: "=EF=87=AB"; }

.fa-calculator::before { content: "=EF=87=AC"; }

.fa-paypal::before { content: "=EF=87=AD"; }

.fa-google-wallet::before { content: "=EF=87=AE"; }

.fa-cc-visa::before { content: "=EF=87=B0"; }

.fa-cc-mastercard::before { content: "=EF=87=B1"; }

.fa-cc-discover::before { content: "=EF=87=B2"; }

.fa-cc-amex::before { content: "=EF=87=B3"; }

.fa-cc-paypal::before { content: "=EF=87=B4"; }

.fa-cc-stripe::before { content: "=EF=87=B5"; }

.fa-bell-slash::before { content: "=EF=87=B6"; }

.fa-bell-slash-o::before { content: "=EF=87=B7"; }

.fa-trash::before { content: "=EF=87=B8"; }

.fa-copyright::before { content: "=EF=87=B9"; }

.fa-at::before { content: "=EF=87=BA"; }

.fa-eyedropper::before { content: "=EF=87=BB"; }

.fa-paint-brush::before { content: "=EF=87=BC"; }

.fa-birthday-cake::before { content: "=EF=87=BD"; }

.fa-area-chart::before { content: "=EF=87=BE"; }

.fa-pie-chart::before { content: "=EF=88=80"; }

.fa-line-chart::before { content: "=EF=88=81"; }

.fa-lastfm::before { content: "=EF=88=82"; }

.fa-lastfm-square::before { content: "=EF=88=83"; }

.fa-toggle-off::before { content: "=EF=88=84"; }

.fa-toggle-on::before { content: "=EF=88=85"; }

.fa-bicycle::before { content: "=EF=88=86"; }

.fa-bus::before { content: "=EF=88=87"; }

.fa-ioxhost::before { content: "=EF=88=88"; }

.fa-angellist::before { content: "=EF=88=89"; }

.fa-cc::before { content: "=EF=88=8A"; }

.fa-ils::before, .fa-shekel::before, .fa-sheqel::before { content: "=EF=88=
=8B"; }

.fa-meanpath::before { content: "=EF=88=8C"; }

.fa-buysellads::before { content: "=EF=88=8D"; }

.fa-connectdevelop::before { content: "=EF=88=8E"; }

.fa-dashcube::before { content: "=EF=88=90"; }

.fa-forumbee::before { content: "=EF=88=91"; }

.fa-leanpub::before { content: "=EF=88=92"; }

.fa-sellsy::before { content: "=EF=88=93"; }

.fa-shirtsinbulk::before { content: "=EF=88=94"; }

.fa-simplybuilt::before { content: "=EF=88=95"; }

.fa-skyatlas::before { content: "=EF=88=96"; }

.fa-cart-plus::before { content: "=EF=88=97"; }

.fa-cart-arrow-down::before { content: "=EF=88=98"; }

.fa-diamond::before { content: "=EF=88=99"; }

.fa-ship::before { content: "=EF=88=9A"; }

.fa-user-secret::before { content: "=EF=88=9B"; }

.fa-motorcycle::before { content: "=EF=88=9C"; }

.fa-street-view::before { content: "=EF=88=9D"; }

.fa-heartbeat::before { content: "=EF=88=9E"; }

.fa-venus::before { content: "=EF=88=A1"; }

.fa-mars::before { content: "=EF=88=A2"; }

.fa-mercury::before { content: "=EF=88=A3"; }

.fa-intersex::before, .fa-transgender::before { content: "=EF=88=A4"; }

.fa-transgender-alt::before { content: "=EF=88=A5"; }

.fa-venus-double::before { content: "=EF=88=A6"; }

.fa-mars-double::before { content: "=EF=88=A7"; }

.fa-venus-mars::before { content: "=EF=88=A8"; }

.fa-mars-stroke::before { content: "=EF=88=A9"; }

.fa-mars-stroke-v::before { content: "=EF=88=AA"; }

.fa-mars-stroke-h::before { content: "=EF=88=AB"; }

.fa-neuter::before { content: "=EF=88=AC"; }

.fa-genderless::before { content: "=EF=88=AD"; }

.fa-facebook-official::before { content: "=EF=88=B0"; }

.fa-pinterest-p::before { content: "=EF=88=B1"; }

.fa-whatsapp::before { content: "=EF=88=B2"; }

.fa-server::before { content: "=EF=88=B3"; }

.fa-user-plus::before { content: "=EF=88=B4"; }

.fa-user-times::before { content: "=EF=88=B5"; }

.fa-bed::before, .fa-hotel::before { content: "=EF=88=B6"; }

.fa-viacoin::before { content: "=EF=88=B7"; }

.fa-train::before { content: "=EF=88=B8"; }

.fa-subway::before { content: "=EF=88=B9"; }

.fa-medium::before { content: "=EF=88=BA"; }

.fa-y-combinator::before, .fa-yc::before { content: "=EF=88=BB"; }

.fa-optin-monster::before { content: "=EF=88=BC"; }

.fa-opencart::before { content: "=EF=88=BD"; }

.fa-expeditedssl::before { content: "=EF=88=BE"; }

.fa-battery-4::before, .fa-battery-full::before, .fa-battery::before { cont=
ent: "=EF=89=80"; }

.fa-battery-3::before, .fa-battery-three-quarters::before { content: "=EF=
=89=81"; }

.fa-battery-2::before, .fa-battery-half::before { content: "=EF=89=82"; }

.fa-battery-1::before, .fa-battery-quarter::before { content: "=EF=89=83"; =
}

.fa-battery-0::before, .fa-battery-empty::before { content: "=EF=89=84"; }

.fa-mouse-pointer::before { content: "=EF=89=85"; }

.fa-i-cursor::before { content: "=EF=89=86"; }

.fa-object-group::before { content: "=EF=89=87"; }

.fa-object-ungroup::before { content: "=EF=89=88"; }

.fa-sticky-note::before { content: "=EF=89=89"; }

.fa-sticky-note-o::before { content: "=EF=89=8A"; }

.fa-cc-jcb::before { content: "=EF=89=8B"; }

.fa-cc-diners-club::before { content: "=EF=89=8C"; }

.fa-clone::before { content: "=EF=89=8D"; }

.fa-balance-scale::before { content: "=EF=89=8E"; }

.fa-hourglass-o::before { content: "=EF=89=90"; }

.fa-hourglass-1::before, .fa-hourglass-start::before { content: "=EF=89=91"=
; }

.fa-hourglass-2::before, .fa-hourglass-half::before { content: "=EF=89=92";=
 }

.fa-hourglass-3::before, .fa-hourglass-end::before { content: "=EF=89=93"; =
}

.fa-hourglass::before { content: "=EF=89=94"; }

.fa-hand-grab-o::before, .fa-hand-rock-o::before { content: "=EF=89=95"; }

.fa-hand-paper-o::before, .fa-hand-stop-o::before { content: "=EF=89=96"; }

.fa-hand-scissors-o::before { content: "=EF=89=97"; }

.fa-hand-lizard-o::before { content: "=EF=89=98"; }

.fa-hand-spock-o::before { content: "=EF=89=99"; }

.fa-hand-pointer-o::before { content: "=EF=89=9A"; }

.fa-hand-peace-o::before { content: "=EF=89=9B"; }

.fa-trademark::before { content: "=EF=89=9C"; }

.fa-registered::before { content: "=EF=89=9D"; }

.fa-creative-commons::before { content: "=EF=89=9E"; }

.fa-gg::before { content: "=EF=89=A0"; }

.fa-gg-circle::before { content: "=EF=89=A1"; }

.fa-tripadvisor::before { content: "=EF=89=A2"; }

.fa-odnoklassniki::before { content: "=EF=89=A3"; }

.fa-odnoklassniki-square::before { content: "=EF=89=A4"; }

.fa-get-pocket::before { content: "=EF=89=A5"; }

.fa-wikipedia-w::before { content: "=EF=89=A6"; }

.fa-safari::before { content: "=EF=89=A7"; }

.fa-chrome::before { content: "=EF=89=A8"; }

.fa-firefox::before { content: "=EF=89=A9"; }

.fa-opera::before { content: "=EF=89=AA"; }

.fa-internet-explorer::before { content: "=EF=89=AB"; }

.fa-television::before, .fa-tv::before { content: "=EF=89=AC"; }

.fa-contao::before { content: "=EF=89=AD"; }

.fa-500px::before { content: "=EF=89=AE"; }

.fa-amazon::before { content: "=EF=89=B0"; }

.fa-calendar-plus-o::before { content: "=EF=89=B1"; }

.fa-calendar-minus-o::before { content: "=EF=89=B2"; }

.fa-calendar-times-o::before { content: "=EF=89=B3"; }

.fa-calendar-check-o::before { content: "=EF=89=B4"; }

.fa-industry::before { content: "=EF=89=B5"; }

.fa-map-pin::before { content: "=EF=89=B6"; }

.fa-map-signs::before { content: "=EF=89=B7"; }

.fa-map-o::before { content: "=EF=89=B8"; }

.fa-map::before { content: "=EF=89=B9"; }

.fa-commenting::before { content: "=EF=89=BA"; }

.fa-commenting-o::before { content: "=EF=89=BB"; }

.fa-houzz::before { content: "=EF=89=BC"; }

.fa-vimeo::before { content: "=EF=89=BD"; }

.fa-black-tie::before { content: "=EF=89=BE"; }

.fa-fonticons::before { content: "=EF=8A=80"; }

.fa-reddit-alien::before { content: "=EF=8A=81"; }

.fa-edge::before { content: "=EF=8A=82"; }

.fa-credit-card-alt::before { content: "=EF=8A=83"; }

.fa-codiepie::before { content: "=EF=8A=84"; }

.fa-modx::before { content: "=EF=8A=85"; }

.fa-fort-awesome::before { content: "=EF=8A=86"; }

.fa-usb::before { content: "=EF=8A=87"; }

.fa-product-hunt::before { content: "=EF=8A=88"; }

.fa-mixcloud::before { content: "=EF=8A=89"; }

.fa-scribd::before { content: "=EF=8A=8A"; }

.fa-pause-circle::before { content: "=EF=8A=8B"; }

.fa-pause-circle-o::before { content: "=EF=8A=8C"; }

.fa-stop-circle::before { content: "=EF=8A=8D"; }

.fa-stop-circle-o::before { content: "=EF=8A=8E"; }

.fa-shopping-bag::before { content: "=EF=8A=90"; }

.fa-shopping-basket::before { content: "=EF=8A=91"; }

.fa-hashtag::before { content: "=EF=8A=92"; }

.fa-bluetooth::before { content: "=EF=8A=93"; }

.fa-bluetooth-b::before { content: "=EF=8A=94"; }

.fa-percent::before { content: "=EF=8A=95"; }

.fa-gitlab::before, .icon-gitlab::before { content: "=EF=8A=96"; }

.fa-wpbeginner::before { content: "=EF=8A=97"; }

.fa-wpforms::before { content: "=EF=8A=98"; }

.fa-envira::before { content: "=EF=8A=99"; }

.fa-universal-access::before { content: "=EF=8A=9A"; }

.fa-wheelchair-alt::before { content: "=EF=8A=9B"; }

.fa-question-circle-o::before { content: "=EF=8A=9C"; }

.fa-blind::before { content: "=EF=8A=9D"; }

.fa-audio-description::before { content: "=EF=8A=9E"; }

.fa-volume-control-phone::before { content: "=EF=8A=A0"; }

.fa-braille::before { content: "=EF=8A=A1"; }

.fa-assistive-listening-systems::before { content: "=EF=8A=A2"; }

.fa-american-sign-language-interpreting::before, .fa-asl-interpreting::befo=
re { content: "=EF=8A=A3"; }

.fa-deaf::before, .fa-deafness::before, .fa-hard-of-hearing::before { conte=
nt: "=EF=8A=A4"; }

.fa-glide::before { content: "=EF=8A=A5"; }

.fa-glide-g::before { content: "=EF=8A=A6"; }

.fa-sign-language::before, .fa-signing::before { content: "=EF=8A=A7"; }

.fa-low-vision::before { content: "=EF=8A=A8"; }

.fa-viadeo::before { content: "=EF=8A=A9"; }

.fa-viadeo-square::before { content: "=EF=8A=AA"; }

.fa-snapchat::before { content: "=EF=8A=AB"; }

.fa-snapchat-ghost::before { content: "=EF=8A=AC"; }

.fa-snapchat-square::before { content: "=EF=8A=AD"; }

.fa-pied-piper::before { content: "=EF=8A=AE"; }

.fa-first-order::before { content: "=EF=8A=B0"; }

.fa-yoast::before { content: "=EF=8A=B1"; }

.fa-themeisle::before { content: "=EF=8A=B2"; }

.fa-google-plus-circle::before, .fa-google-plus-official::before { content:=
 "=EF=8A=B3"; }

.fa-fa::before, .fa-font-awesome::before { content: "=EF=8A=B4"; }

.fa-handshake-o::before { content: "=EF=8A=B5"; }

.fa-envelope-open::before { content: "=EF=8A=B6"; }

.fa-envelope-open-o::before { content: "=EF=8A=B7"; }

.fa-linode::before { content: "=EF=8A=B8"; }

.fa-address-book::before { content: "=EF=8A=B9"; }

.fa-address-book-o::before { content: "=EF=8A=BA"; }

.fa-address-card::before, .fa-vcard::before { content: "=EF=8A=BB"; }

.fa-address-card-o::before, .fa-vcard-o::before { content: "=EF=8A=BC"; }

.fa-user-circle::before { content: "=EF=8A=BD"; }

.fa-user-circle-o::before { content: "=EF=8A=BE"; }

.fa-user-o::before { content: "=EF=8B=80"; }

.fa-id-badge::before { content: "=EF=8B=81"; }

.fa-drivers-license::before, .fa-id-card::before { content: "=EF=8B=82"; }

.fa-drivers-license-o::before, .fa-id-card-o::before { content: "=EF=8B=83"=
; }

.fa-quora::before { content: "=EF=8B=84"; }

.fa-free-code-camp::before { content: "=EF=8B=85"; }

.fa-telegram::before { content: "=EF=8B=86"; }

.fa-thermometer-4::before, .fa-thermometer-full::before, .fa-thermometer::b=
efore { content: "=EF=8B=87"; }

.fa-thermometer-3::before, .fa-thermometer-three-quarters::before { content=
: "=EF=8B=88"; }

.fa-thermometer-2::before, .fa-thermometer-half::before { content: "=EF=8B=
=89"; }

.fa-thermometer-1::before, .fa-thermometer-quarter::before { content: "=EF=
=8B=8A"; }

.fa-thermometer-0::before, .fa-thermometer-empty::before { content: "=EF=8B=
=8B"; }

.fa-shower::before { content: "=EF=8B=8C"; }

.fa-bath::before, .fa-bathtub::before, .fa-s15::before { content: "=EF=8B=
=8D"; }

.fa-podcast::before { content: "=EF=8B=8E"; }

.fa-window-maximize::before { content: "=EF=8B=90"; }

.fa-window-minimize::before { content: "=EF=8B=91"; }

.fa-window-restore::before { content: "=EF=8B=92"; }

.fa-times-rectangle::before, .fa-window-close::before { content: "=EF=8B=93=
"; }

.fa-times-rectangle-o::before, .fa-window-close-o::before { content: "=EF=
=8B=94"; }

.fa-bandcamp::before { content: "=EF=8B=95"; }

.fa-grav::before { content: "=EF=8B=96"; }

.fa-etsy::before { content: "=EF=8B=97"; }

.fa-imdb::before { content: "=EF=8B=98"; }

.fa-ravelry::before { content: "=EF=8B=99"; }

.fa-eercast::before { content: "=EF=8B=9A"; }

.fa-microchip::before { content: "=EF=8B=9B"; }

.fa-snowflake-o::before { content: "=EF=8B=9C"; }

.fa-superpowers::before { content: "=EF=8B=9D"; }

.fa-wpexplorer::before { content: "=EF=8B=9E"; }

.fa-meetup::before { content: "=EF=8B=A0"; }

.sr-only { position: absolute; width: 1px; height: 1px; padding: 0px; margi=
n: -1px; overflow: hidden; clip: rect(0px, 0px, 0px, 0px); border: 0px; }

.sr-only-focusable:active, .sr-only-focusable:focus { position: static; wid=
th: auto; height: auto; margin: 0px; overflow: visible; clip: auto; }

.fa, .icon, .rst-content .admonition-title, .rst-content .code-block-captio=
n .headerlink, .rst-content .eqno .headerlink, .rst-content code.download s=
pan:first-child, .rst-content dl dt .headerlink, .rst-content h1 .headerlin=
k, .rst-content h2 .headerlink, .rst-content h3 .headerlink, .rst-content h=
4 .headerlink, .rst-content h5 .headerlink, .rst-content h6 .headerlink, .r=
st-content p.caption .headerlink, .rst-content p .headerlink, .rst-content =
table > caption .headerlink, .rst-content tt.download span:first-child, .wy=
-dropdown .caret, .wy-inline-validate.wy-inline-validate-danger .wy-input-c=
ontext, .wy-inline-validate.wy-inline-validate-info .wy-input-context, .wy-=
inline-validate.wy-inline-validate-success .wy-input-context, .wy-inline-va=
lidate.wy-inline-validate-warning .wy-input-context, .wy-menu-vertical li.c=
urrent > a button.toctree-expand, .wy-menu-vertical li.on a button.toctree-=
expand, .wy-menu-vertical li button.toctree-expand { font-family: inherit; =
}

.fa::before, .icon::before, .rst-content .admonition-title::before, .rst-co=
ntent .code-block-caption .headerlink::before, .rst-content .eqno .headerli=
nk::before, .rst-content code.download span:first-child::before, .rst-conte=
nt dl dt .headerlink::before, .rst-content h1 .headerlink::before, .rst-con=
tent h2 .headerlink::before, .rst-content h3 .headerlink::before, .rst-cont=
ent h4 .headerlink::before, .rst-content h5 .headerlink::before, .rst-conte=
nt h6 .headerlink::before, .rst-content p.caption .headerlink::before, .rst=
-content p .headerlink::before, .rst-content table > caption .headerlink::b=
efore, .rst-content tt.download span:first-child::before, .wy-dropdown .car=
et::before, .wy-inline-validate.wy-inline-validate-danger .wy-input-context=
::before, .wy-inline-validate.wy-inline-validate-info .wy-input-context::be=
fore, .wy-inline-validate.wy-inline-validate-success .wy-input-context::bef=
ore, .wy-inline-validate.wy-inline-validate-warning .wy-input-context::befo=
re, .wy-menu-vertical li.current > a button.toctree-expand::before, .wy-men=
u-vertical li.on a button.toctree-expand::before, .wy-menu-vertical li butt=
on.toctree-expand::before { font-family: FontAwesome; display: inline-block=
; font-style: normal; font-weight: 400; line-height: 1; text-decoration: in=
herit; }

.rst-content .code-block-caption a .headerlink, .rst-content .eqno a .heade=
rlink, .rst-content a .admonition-title, .rst-content code.download a span:=
first-child, .rst-content dl dt a .headerlink, .rst-content h1 a .headerlin=
k, .rst-content h2 a .headerlink, .rst-content h3 a .headerlink, .rst-conte=
nt h4 a .headerlink, .rst-content h5 a .headerlink, .rst-content h6 a .head=
erlink, .rst-content p.caption a .headerlink, .rst-content p a .headerlink,=
 .rst-content table > caption a .headerlink, .rst-content tt.download a spa=
n:first-child, .wy-menu-vertical li.current > a button.toctree-expand, .wy-=
menu-vertical li.on a button.toctree-expand, .wy-menu-vertical li a button.=
toctree-expand, a .fa, a .icon, a .rst-content .admonition-title, a .rst-co=
ntent .code-block-caption .headerlink, a .rst-content .eqno .headerlink, a =
.rst-content code.download span:first-child, a .rst-content dl dt .headerli=
nk, a .rst-content h1 .headerlink, a .rst-content h2 .headerlink, a .rst-co=
ntent h3 .headerlink, a .rst-content h4 .headerlink, a .rst-content h5 .hea=
derlink, a .rst-content h6 .headerlink, a .rst-content p.caption .headerlin=
k, a .rst-content p .headerlink, a .rst-content table > caption .headerlink=
, a .rst-content tt.download span:first-child, a .wy-menu-vertical li butto=
n.toctree-expand { display: inline-block; text-decoration: inherit; }

.btn .fa, .btn .icon, .btn .rst-content .admonition-title, .btn .rst-conten=
t .code-block-caption .headerlink, .btn .rst-content .eqno .headerlink, .bt=
n .rst-content code.download span:first-child, .btn .rst-content dl dt .hea=
derlink, .btn .rst-content h1 .headerlink, .btn .rst-content h2 .headerlink=
, .btn .rst-content h3 .headerlink, .btn .rst-content h4 .headerlink, .btn =
.rst-content h5 .headerlink, .btn .rst-content h6 .headerlink, .btn .rst-co=
ntent p .headerlink, .btn .rst-content table > caption .headerlink, .btn .r=
st-content tt.download span:first-child, .btn .wy-menu-vertical li.current =
> a button.toctree-expand, .btn .wy-menu-vertical li.on a button.toctree-ex=
pand, .btn .wy-menu-vertical li button.toctree-expand, .nav .fa, .nav .icon=
, .nav .rst-content .admonition-title, .nav .rst-content .code-block-captio=
n .headerlink, .nav .rst-content .eqno .headerlink, .nav .rst-content code.=
download span:first-child, .nav .rst-content dl dt .headerlink, .nav .rst-c=
ontent h1 .headerlink, .nav .rst-content h2 .headerlink, .nav .rst-content =
h3 .headerlink, .nav .rst-content h4 .headerlink, .nav .rst-content h5 .hea=
derlink, .nav .rst-content h6 .headerlink, .nav .rst-content p .headerlink,=
 .nav .rst-content table > caption .headerlink, .nav .rst-content tt.downlo=
ad span:first-child, .nav .wy-menu-vertical li.current > a button.toctree-e=
xpand, .nav .wy-menu-vertical li.on a button.toctree-expand, .nav .wy-menu-=
vertical li button.toctree-expand, .rst-content .btn .admonition-title, .rs=
t-content .code-block-caption .btn .headerlink, .rst-content .code-block-ca=
ption .nav .headerlink, .rst-content .eqno .btn .headerlink, .rst-content .=
eqno .nav .headerlink, .rst-content .nav .admonition-title, .rst-content co=
de.download .btn span:first-child, .rst-content code.download .nav span:fir=
st-child, .rst-content dl dt .btn .headerlink, .rst-content dl dt .nav .hea=
derlink, .rst-content h1 .btn .headerlink, .rst-content h1 .nav .headerlink=
, .rst-content h2 .btn .headerlink, .rst-content h2 .nav .headerlink, .rst-=
content h3 .btn .headerlink, .rst-content h3 .nav .headerlink, .rst-content=
 h4 .btn .headerlink, .rst-content h4 .nav .headerlink, .rst-content h5 .bt=
n .headerlink, .rst-content h5 .nav .headerlink, .rst-content h6 .btn .head=
erlink, .rst-content h6 .nav .headerlink, .rst-content p .btn .headerlink, =
.rst-content p .nav .headerlink, .rst-content table > caption .btn .headerl=
ink, .rst-content table > caption .nav .headerlink, .rst-content tt.downloa=
d .btn span:first-child, .rst-content tt.download .nav span:first-child, .w=
y-menu-vertical li .btn button.toctree-expand, .wy-menu-vertical li.current=
 > a .btn button.toctree-expand, .wy-menu-vertical li.current > a .nav butt=
on.toctree-expand, .wy-menu-vertical li .nav button.toctree-expand, .wy-men=
u-vertical li.on a .btn button.toctree-expand, .wy-menu-vertical li.on a .n=
av button.toctree-expand { display: inline; }

.btn .fa-large.icon, .btn .fa.fa-large, .btn .rst-content .code-block-capti=
on .fa-large.headerlink, .btn .rst-content .eqno .fa-large.headerlink, .btn=
 .rst-content .fa-large.admonition-title, .btn .rst-content code.download s=
pan.fa-large:first-child, .btn .rst-content dl dt .fa-large.headerlink, .bt=
n .rst-content h1 .fa-large.headerlink, .btn .rst-content h2 .fa-large.head=
erlink, .btn .rst-content h3 .fa-large.headerlink, .btn .rst-content h4 .fa=
-large.headerlink, .btn .rst-content h5 .fa-large.headerlink, .btn .rst-con=
tent h6 .fa-large.headerlink, .btn .rst-content p .fa-large.headerlink, .bt=
n .rst-content table > caption .fa-large.headerlink, .btn .rst-content tt.d=
ownload span.fa-large:first-child, .btn .wy-menu-vertical li button.fa-larg=
e.toctree-expand, .nav .fa-large.icon, .nav .fa.fa-large, .nav .rst-content=
 .code-block-caption .fa-large.headerlink, .nav .rst-content .eqno .fa-larg=
e.headerlink, .nav .rst-content .fa-large.admonition-title, .nav .rst-conte=
nt code.download span.fa-large:first-child, .nav .rst-content dl dt .fa-lar=
ge.headerlink, .nav .rst-content h1 .fa-large.headerlink, .nav .rst-content=
 h2 .fa-large.headerlink, .nav .rst-content h3 .fa-large.headerlink, .nav .=
rst-content h4 .fa-large.headerlink, .nav .rst-content h5 .fa-large.headerl=
ink, .nav .rst-content h6 .fa-large.headerlink, .nav .rst-content p .fa-lar=
ge.headerlink, .nav .rst-content table > caption .fa-large.headerlink, .nav=
 .rst-content tt.download span.fa-large:first-child, .nav .wy-menu-vertical=
 li button.fa-large.toctree-expand, .rst-content .btn .fa-large.admonition-=
title, .rst-content .code-block-caption .btn .fa-large.headerlink, .rst-con=
tent .code-block-caption .nav .fa-large.headerlink, .rst-content .eqno .btn=
 .fa-large.headerlink, .rst-content .eqno .nav .fa-large.headerlink, .rst-c=
ontent .nav .fa-large.admonition-title, .rst-content code.download .btn spa=
n.fa-large:first-child, .rst-content code.download .nav span.fa-large:first=
-child, .rst-content dl dt .btn .fa-large.headerlink, .rst-content dl dt .n=
av .fa-large.headerlink, .rst-content h1 .btn .fa-large.headerlink, .rst-co=
ntent h1 .nav .fa-large.headerlink, .rst-content h2 .btn .fa-large.headerli=
nk, .rst-content h2 .nav .fa-large.headerlink, .rst-content h3 .btn .fa-lar=
ge.headerlink, .rst-content h3 .nav .fa-large.headerlink, .rst-content h4 .=
btn .fa-large.headerlink, .rst-content h4 .nav .fa-large.headerlink, .rst-c=
ontent h5 .btn .fa-large.headerlink, .rst-content h5 .nav .fa-large.headerl=
ink, .rst-content h6 .btn .fa-large.headerlink, .rst-content h6 .nav .fa-la=
rge.headerlink, .rst-content p .btn .fa-large.headerlink, .rst-content p .n=
av .fa-large.headerlink, .rst-content table > caption .btn .fa-large.header=
link, .rst-content table > caption .nav .fa-large.headerlink, .rst-content =
tt.download .btn span.fa-large:first-child, .rst-content tt.download .nav s=
pan.fa-large:first-child, .wy-menu-vertical li .btn button.fa-large.toctree=
-expand, .wy-menu-vertical li .nav button.fa-large.toctree-expand { line-he=
ight: 0.9em; }

.btn .fa-spin.icon, .btn .fa.fa-spin, .btn .rst-content .code-block-caption=
 .fa-spin.headerlink, .btn .rst-content .eqno .fa-spin.headerlink, .btn .rs=
t-content .fa-spin.admonition-title, .btn .rst-content code.download span.f=
a-spin:first-child, .btn .rst-content dl dt .fa-spin.headerlink, .btn .rst-=
content h1 .fa-spin.headerlink, .btn .rst-content h2 .fa-spin.headerlink, .=
btn .rst-content h3 .fa-spin.headerlink, .btn .rst-content h4 .fa-spin.head=
erlink, .btn .rst-content h5 .fa-spin.headerlink, .btn .rst-content h6 .fa-=
spin.headerlink, .btn .rst-content p .fa-spin.headerlink, .btn .rst-content=
 table > caption .fa-spin.headerlink, .btn .rst-content tt.download span.fa=
-spin:first-child, .btn .wy-menu-vertical li button.fa-spin.toctree-expand,=
 .nav .fa-spin.icon, .nav .fa.fa-spin, .nav .rst-content .code-block-captio=
n .fa-spin.headerlink, .nav .rst-content .eqno .fa-spin.headerlink, .nav .r=
st-content .fa-spin.admonition-title, .nav .rst-content code.download span.=
fa-spin:first-child, .nav .rst-content dl dt .fa-spin.headerlink, .nav .rst=
-content h1 .fa-spin.headerlink, .nav .rst-content h2 .fa-spin.headerlink, =
.nav .rst-content h3 .fa-spin.headerlink, .nav .rst-content h4 .fa-spin.hea=
derlink, .nav .rst-content h5 .fa-spin.headerlink, .nav .rst-content h6 .fa=
-spin.headerlink, .nav .rst-content p .fa-spin.headerlink, .nav .rst-conten=
t table > caption .fa-spin.headerlink, .nav .rst-content tt.download span.f=
a-spin:first-child, .nav .wy-menu-vertical li button.fa-spin.toctree-expand=
, .rst-content .btn .fa-spin.admonition-title, .rst-content .code-block-cap=
tion .btn .fa-spin.headerlink, .rst-content .code-block-caption .nav .fa-sp=
in.headerlink, .rst-content .eqno .btn .fa-spin.headerlink, .rst-content .e=
qno .nav .fa-spin.headerlink, .rst-content .nav .fa-spin.admonition-title, =
.rst-content code.download .btn span.fa-spin:first-child, .rst-content code=
.download .nav span.fa-spin:first-child, .rst-content dl dt .btn .fa-spin.h=
eaderlink, .rst-content dl dt .nav .fa-spin.headerlink, .rst-content h1 .bt=
n .fa-spin.headerlink, .rst-content h1 .nav .fa-spin.headerlink, .rst-conte=
nt h2 .btn .fa-spin.headerlink, .rst-content h2 .nav .fa-spin.headerlink, .=
rst-content h3 .btn .fa-spin.headerlink, .rst-content h3 .nav .fa-spin.head=
erlink, .rst-content h4 .btn .fa-spin.headerlink, .rst-content h4 .nav .fa-=
spin.headerlink, .rst-content h5 .btn .fa-spin.headerlink, .rst-content h5 =
.nav .fa-spin.headerlink, .rst-content h6 .btn .fa-spin.headerlink, .rst-co=
ntent h6 .nav .fa-spin.headerlink, .rst-content p .btn .fa-spin.headerlink,=
 .rst-content p .nav .fa-spin.headerlink, .rst-content table > caption .btn=
 .fa-spin.headerlink, .rst-content table > caption .nav .fa-spin.headerlink=
, .rst-content tt.download .btn span.fa-spin:first-child, .rst-content tt.d=
ownload .nav span.fa-spin:first-child, .wy-menu-vertical li .btn button.fa-=
spin.toctree-expand, .wy-menu-vertical li .nav button.fa-spin.toctree-expan=
d { display: inline-block; }

.btn.fa::before, .btn.icon::before, .rst-content .btn.admonition-title::bef=
ore, .rst-content .code-block-caption .btn.headerlink::before, .rst-content=
 .eqno .btn.headerlink::before, .rst-content code.download span.btn:first-c=
hild::before, .rst-content dl dt .btn.headerlink::before, .rst-content h1 .=
btn.headerlink::before, .rst-content h2 .btn.headerlink::before, .rst-conte=
nt h3 .btn.headerlink::before, .rst-content h4 .btn.headerlink::before, .rs=
t-content h5 .btn.headerlink::before, .rst-content h6 .btn.headerlink::befo=
re, .rst-content p .btn.headerlink::before, .rst-content table > caption .b=
tn.headerlink::before, .rst-content tt.download span.btn:first-child::befor=
e, .wy-menu-vertical li button.btn.toctree-expand::before { opacity: 0.5; t=
ransition: opacity 0.05s ease-in; }

.btn.fa:hover::before, .btn.icon:hover::before, .rst-content .btn.admonitio=
n-title:hover::before, .rst-content .code-block-caption .btn.headerlink:hov=
er::before, .rst-content .eqno .btn.headerlink:hover::before, .rst-content =
code.download span.btn:first-child:hover::before, .rst-content dl dt .btn.h=
eaderlink:hover::before, .rst-content h1 .btn.headerlink:hover::before, .rs=
t-content h2 .btn.headerlink:hover::before, .rst-content h3 .btn.headerlink=
:hover::before, .rst-content h4 .btn.headerlink:hover::before, .rst-content=
 h5 .btn.headerlink:hover::before, .rst-content h6 .btn.headerlink:hover::b=
efore, .rst-content p .btn.headerlink:hover::before, .rst-content table > c=
aption .btn.headerlink:hover::before, .rst-content tt.download span.btn:fir=
st-child:hover::before, .wy-menu-vertical li button.btn.toctree-expand:hove=
r::before { opacity: 1; }

.btn-mini .fa::before, .btn-mini .icon::before, .btn-mini .rst-content .adm=
onition-title::before, .btn-mini .rst-content .code-block-caption .headerli=
nk::before, .btn-mini .rst-content .eqno .headerlink::before, .btn-mini .rs=
t-content code.download span:first-child::before, .btn-mini .rst-content dl=
 dt .headerlink::before, .btn-mini .rst-content h1 .headerlink::before, .bt=
n-mini .rst-content h2 .headerlink::before, .btn-mini .rst-content h3 .head=
erlink::before, .btn-mini .rst-content h4 .headerlink::before, .btn-mini .r=
st-content h5 .headerlink::before, .btn-mini .rst-content h6 .headerlink::b=
efore, .btn-mini .rst-content p .headerlink::before, .btn-mini .rst-content=
 table > caption .headerlink::before, .btn-mini .rst-content tt.download sp=
an:first-child::before, .btn-mini .wy-menu-vertical li button.toctree-expan=
d::before, .rst-content .btn-mini .admonition-title::before, .rst-content .=
code-block-caption .btn-mini .headerlink::before, .rst-content .eqno .btn-m=
ini .headerlink::before, .rst-content code.download .btn-mini span:first-ch=
ild::before, .rst-content dl dt .btn-mini .headerlink::before, .rst-content=
 h1 .btn-mini .headerlink::before, .rst-content h2 .btn-mini .headerlink::b=
efore, .rst-content h3 .btn-mini .headerlink::before, .rst-content h4 .btn-=
mini .headerlink::before, .rst-content h5 .btn-mini .headerlink::before, .r=
st-content h6 .btn-mini .headerlink::before, .rst-content p .btn-mini .head=
erlink::before, .rst-content table > caption .btn-mini .headerlink::before,=
 .rst-content tt.download .btn-mini span:first-child::before, .wy-menu-vert=
ical li .btn-mini button.toctree-expand::before { font-size: 14px; vertical=
-align: -15%; }

.rst-content .admonition, .rst-content .admonition-todo, .rst-content .atte=
ntion, .rst-content .caution, .rst-content .danger, .rst-content .error, .r=
st-content .hint, .rst-content .important, .rst-content .note, .rst-content=
 .seealso, .rst-content .tip, .rst-content .warning, .wy-alert { padding: 1=
2px; line-height: 24px; margin-bottom: 24px; background: rgb(231, 242, 250)=
; }

.rst-content .admonition-title, .wy-alert-title { font-weight: 700; display=
: block; color: rgb(255, 255, 255); background: rgb(106, 176, 222); padding=
: 6px 12px; margin: -12px -12px 12px; }

.rst-content .danger, .rst-content .error, .rst-content .wy-alert-danger.ad=
monition, .rst-content .wy-alert-danger.admonition-todo, .rst-content .wy-a=
lert-danger.attention, .rst-content .wy-alert-danger.caution, .rst-content =
.wy-alert-danger.hint, .rst-content .wy-alert-danger.important, .rst-conten=
t .wy-alert-danger.note, .rst-content .wy-alert-danger.seealso, .rst-conten=
t .wy-alert-danger.tip, .rst-content .wy-alert-danger.warning, .wy-alert.wy=
-alert-danger { background: rgb(253, 243, 242); }

.rst-content .danger .admonition-title, .rst-content .danger .wy-alert-titl=
e, .rst-content .error .admonition-title, .rst-content .error .wy-alert-tit=
le, .rst-content .wy-alert-danger.admonition-todo .admonition-title, .rst-c=
ontent .wy-alert-danger.admonition-todo .wy-alert-title, .rst-content .wy-a=
lert-danger.admonition .admonition-title, .rst-content .wy-alert-danger.adm=
onition .wy-alert-title, .rst-content .wy-alert-danger.attention .admonitio=
n-title, .rst-content .wy-alert-danger.attention .wy-alert-title, .rst-cont=
ent .wy-alert-danger.caution .admonition-title, .rst-content .wy-alert-dang=
er.caution .wy-alert-title, .rst-content .wy-alert-danger.hint .admonition-=
title, .rst-content .wy-alert-danger.hint .wy-alert-title, .rst-content .wy=
-alert-danger.important .admonition-title, .rst-content .wy-alert-danger.im=
portant .wy-alert-title, .rst-content .wy-alert-danger.note .admonition-tit=
le, .rst-content .wy-alert-danger.note .wy-alert-title, .rst-content .wy-al=
ert-danger.seealso .admonition-title, .rst-content .wy-alert-danger.seealso=
 .wy-alert-title, .rst-content .wy-alert-danger.tip .admonition-title, .rst=
-content .wy-alert-danger.tip .wy-alert-title, .rst-content .wy-alert-dange=
r.warning .admonition-title, .rst-content .wy-alert-danger.warning .wy-aler=
t-title, .rst-content .wy-alert.wy-alert-danger .admonition-title, .wy-aler=
t.wy-alert-danger .rst-content .admonition-title, .wy-alert.wy-alert-danger=
 .wy-alert-title { background: rgb(242, 159, 151); }

.rst-content .admonition-todo, .rst-content .attention, .rst-content .cauti=
on, .rst-content .warning, .rst-content .wy-alert-warning.admonition, .rst-=
content .wy-alert-warning.danger, .rst-content .wy-alert-warning.error, .rs=
t-content .wy-alert-warning.hint, .rst-content .wy-alert-warning.important,=
 .rst-content .wy-alert-warning.note, .rst-content .wy-alert-warning.seeals=
o, .rst-content .wy-alert-warning.tip, .wy-alert.wy-alert-warning { backgro=
und: rgb(255, 237, 204); }

.rst-content .admonition-todo .admonition-title, .rst-content .admonition-t=
odo .wy-alert-title, .rst-content .attention .admonition-title, .rst-conten=
t .attention .wy-alert-title, .rst-content .caution .admonition-title, .rst=
-content .caution .wy-alert-title, .rst-content .warning .admonition-title,=
 .rst-content .warning .wy-alert-title, .rst-content .wy-alert-warning.admo=
nition .admonition-title, .rst-content .wy-alert-warning.admonition .wy-ale=
rt-title, .rst-content .wy-alert-warning.danger .admonition-title, .rst-con=
tent .wy-alert-warning.danger .wy-alert-title, .rst-content .wy-alert-warni=
ng.error .admonition-title, .rst-content .wy-alert-warning.error .wy-alert-=
title, .rst-content .wy-alert-warning.hint .admonition-title, .rst-content =
.wy-alert-warning.hint .wy-alert-title, .rst-content .wy-alert-warning.impo=
rtant .admonition-title, .rst-content .wy-alert-warning.important .wy-alert=
-title, .rst-content .wy-alert-warning.note .admonition-title, .rst-content=
 .wy-alert-warning.note .wy-alert-title, .rst-content .wy-alert-warning.see=
also .admonition-title, .rst-content .wy-alert-warning.seealso .wy-alert-ti=
tle, .rst-content .wy-alert-warning.tip .admonition-title, .rst-content .wy=
-alert-warning.tip .wy-alert-title, .rst-content .wy-alert.wy-alert-warning=
 .admonition-title, .wy-alert.wy-alert-warning .rst-content .admonition-tit=
le, .wy-alert.wy-alert-warning .wy-alert-title { background: rgb(240, 179, =
126); }

.rst-content .note, .rst-content .seealso, .rst-content .wy-alert-info.admo=
nition, .rst-content .wy-alert-info.admonition-todo, .rst-content .wy-alert=
-info.attention, .rst-content .wy-alert-info.caution, .rst-content .wy-aler=
t-info.danger, .rst-content .wy-alert-info.error, .rst-content .wy-alert-in=
fo.hint, .rst-content .wy-alert-info.important, .rst-content .wy-alert-info=
.tip, .rst-content .wy-alert-info.warning, .wy-alert.wy-alert-info { backgr=
ound: rgb(231, 242, 250); }

.rst-content .note .admonition-title, .rst-content .note .wy-alert-title, .=
rst-content .seealso .admonition-title, .rst-content .seealso .wy-alert-tit=
le, .rst-content .wy-alert-info.admonition-todo .admonition-title, .rst-con=
tent .wy-alert-info.admonition-todo .wy-alert-title, .rst-content .wy-alert=
-info.admonition .admonition-title, .rst-content .wy-alert-info.admonition =
.wy-alert-title, .rst-content .wy-alert-info.attention .admonition-title, .=
rst-content .wy-alert-info.attention .wy-alert-title, .rst-content .wy-aler=
t-info.caution .admonition-title, .rst-content .wy-alert-info.caution .wy-a=
lert-title, .rst-content .wy-alert-info.danger .admonition-title, .rst-cont=
ent .wy-alert-info.danger .wy-alert-title, .rst-content .wy-alert-info.erro=
r .admonition-title, .rst-content .wy-alert-info.error .wy-alert-title, .rs=
t-content .wy-alert-info.hint .admonition-title, .rst-content .wy-alert-inf=
o.hint .wy-alert-title, .rst-content .wy-alert-info.important .admonition-t=
itle, .rst-content .wy-alert-info.important .wy-alert-title, .rst-content .=
wy-alert-info.tip .admonition-title, .rst-content .wy-alert-info.tip .wy-al=
ert-title, .rst-content .wy-alert-info.warning .admonition-title, .rst-cont=
ent .wy-alert-info.warning .wy-alert-title, .rst-content .wy-alert.wy-alert=
-info .admonition-title, .wy-alert.wy-alert-info .rst-content .admonition-t=
itle, .wy-alert.wy-alert-info .wy-alert-title { background: rgb(106, 176, 2=
22); }

.rst-content .hint, .rst-content .important, .rst-content .tip, .rst-conten=
t .wy-alert-success.admonition, .rst-content .wy-alert-success.admonition-t=
odo, .rst-content .wy-alert-success.attention, .rst-content .wy-alert-succe=
ss.caution, .rst-content .wy-alert-success.danger, .rst-content .wy-alert-s=
uccess.error, .rst-content .wy-alert-success.note, .rst-content .wy-alert-s=
uccess.seealso, .rst-content .wy-alert-success.warning, .wy-alert.wy-alert-=
success { background: rgb(219, 250, 244); }

.rst-content .hint .admonition-title, .rst-content .hint .wy-alert-title, .=
rst-content .important .admonition-title, .rst-content .important .wy-alert=
-title, .rst-content .tip .admonition-title, .rst-content .tip .wy-alert-ti=
tle, .rst-content .wy-alert-success.admonition-todo .admonition-title, .rst=
-content .wy-alert-success.admonition-todo .wy-alert-title, .rst-content .w=
y-alert-success.admonition .admonition-title, .rst-content .wy-alert-succes=
s.admonition .wy-alert-title, .rst-content .wy-alert-success.attention .adm=
onition-title, .rst-content .wy-alert-success.attention .wy-alert-title, .r=
st-content .wy-alert-success.caution .admonition-title, .rst-content .wy-al=
ert-success.caution .wy-alert-title, .rst-content .wy-alert-success.danger =
.admonition-title, .rst-content .wy-alert-success.danger .wy-alert-title, .=
rst-content .wy-alert-success.error .admonition-title, .rst-content .wy-ale=
rt-success.error .wy-alert-title, .rst-content .wy-alert-success.note .admo=
nition-title, .rst-content .wy-alert-success.note .wy-alert-title, .rst-con=
tent .wy-alert-success.seealso .admonition-title, .rst-content .wy-alert-su=
ccess.seealso .wy-alert-title, .rst-content .wy-alert-success.warning .admo=
nition-title, .rst-content .wy-alert-success.warning .wy-alert-title, .rst-=
content .wy-alert.wy-alert-success .admonition-title, .wy-alert.wy-alert-su=
ccess .rst-content .admonition-title, .wy-alert.wy-alert-success .wy-alert-=
title { background: rgb(26, 188, 156); }

.rst-content .wy-alert-neutral.admonition, .rst-content .wy-alert-neutral.a=
dmonition-todo, .rst-content .wy-alert-neutral.attention, .rst-content .wy-=
alert-neutral.caution, .rst-content .wy-alert-neutral.danger, .rst-content =
.wy-alert-neutral.error, .rst-content .wy-alert-neutral.hint, .rst-content =
.wy-alert-neutral.important, .rst-content .wy-alert-neutral.note, .rst-cont=
ent .wy-alert-neutral.seealso, .rst-content .wy-alert-neutral.tip, .rst-con=
tent .wy-alert-neutral.warning, .wy-alert.wy-alert-neutral { background: rg=
b(243, 246, 246); }

.rst-content .wy-alert-neutral.admonition-todo .admonition-title, .rst-cont=
ent .wy-alert-neutral.admonition-todo .wy-alert-title, .rst-content .wy-ale=
rt-neutral.admonition .admonition-title, .rst-content .wy-alert-neutral.adm=
onition .wy-alert-title, .rst-content .wy-alert-neutral.attention .admoniti=
on-title, .rst-content .wy-alert-neutral.attention .wy-alert-title, .rst-co=
ntent .wy-alert-neutral.caution .admonition-title, .rst-content .wy-alert-n=
eutral.caution .wy-alert-title, .rst-content .wy-alert-neutral.danger .admo=
nition-title, .rst-content .wy-alert-neutral.danger .wy-alert-title, .rst-c=
ontent .wy-alert-neutral.error .admonition-title, .rst-content .wy-alert-ne=
utral.error .wy-alert-title, .rst-content .wy-alert-neutral.hint .admonitio=
n-title, .rst-content .wy-alert-neutral.hint .wy-alert-title, .rst-content =
.wy-alert-neutral.important .admonition-title, .rst-content .wy-alert-neutr=
al.important .wy-alert-title, .rst-content .wy-alert-neutral.note .admoniti=
on-title, .rst-content .wy-alert-neutral.note .wy-alert-title, .rst-content=
 .wy-alert-neutral.seealso .admonition-title, .rst-content .wy-alert-neutra=
l.seealso .wy-alert-title, .rst-content .wy-alert-neutral.tip .admonition-t=
itle, .rst-content .wy-alert-neutral.tip .wy-alert-title, .rst-content .wy-=
alert-neutral.warning .admonition-title, .rst-content .wy-alert-neutral.war=
ning .wy-alert-title, .rst-content .wy-alert.wy-alert-neutral .admonition-t=
itle, .wy-alert.wy-alert-neutral .rst-content .admonition-title, .wy-alert.=
wy-alert-neutral .wy-alert-title { color: rgb(64, 64, 64); background: rgb(=
225, 228, 229); }

.rst-content .wy-alert-neutral.admonition-todo a, .rst-content .wy-alert-ne=
utral.admonition a, .rst-content .wy-alert-neutral.attention a, .rst-conten=
t .wy-alert-neutral.caution a, .rst-content .wy-alert-neutral.danger a, .rs=
t-content .wy-alert-neutral.error a, .rst-content .wy-alert-neutral.hint a,=
 .rst-content .wy-alert-neutral.important a, .rst-content .wy-alert-neutral=
.note a, .rst-content .wy-alert-neutral.seealso a, .rst-content .wy-alert-n=
eutral.tip a, .rst-content .wy-alert-neutral.warning a, .wy-alert.wy-alert-=
neutral a { color: rgb(41, 128, 185); }

.rst-content .admonition-todo p:last-child, .rst-content .admonition p:last=
-child, .rst-content .attention p:last-child, .rst-content .caution p:last-=
child, .rst-content .danger p:last-child, .rst-content .error p:last-child,=
 .rst-content .hint p:last-child, .rst-content .important p:last-child, .rs=
t-content .note p:last-child, .rst-content .seealso p:last-child, .rst-cont=
ent .tip p:last-child, .rst-content .warning p:last-child, .wy-alert p:last=
-child { margin-bottom: 0px; }

.wy-tray-container { position: fixed; bottom: 0px; left: 0px; z-index: 600;=
 }

.wy-tray-container li { display: block; width: 300px; background: transpare=
nt; color: rgb(255, 255, 255); text-align: center; box-shadow: rgba(0, 0, 0=
, 0.1) 0px 5px 5px 0px; padding: 0px 24px; min-width: 20%; opacity: 0; heig=
ht: 0px; line-height: 56px; overflow: hidden; transition: 0.3s ease-in; }

.wy-tray-container li.wy-tray-item-success { background: rgb(39, 174, 96); =
}

.wy-tray-container li.wy-tray-item-info { background: rgb(41, 128, 185); }

.wy-tray-container li.wy-tray-item-warning { background: rgb(230, 126, 34);=
 }

.wy-tray-container li.wy-tray-item-danger { background: rgb(231, 76, 60); }

.wy-tray-container li.on { opacity: 1; height: 56px; }

@media screen and (max-width: 768px) {
  .wy-tray-container { bottom: auto; top: 0px; width: 100%; }
  .wy-tray-container li { width: 100%; }
}

button { font-size: 100%; margin: 0px; vertical-align: baseline; cursor: po=
inter; line-height: normal; appearance: button; }

button[disabled] { cursor: default; }

.btn { display: inline-block; border-radius: 2px; line-height: normal; whit=
e-space: nowrap; text-align: center; cursor: pointer; font-size: 100%; padd=
ing: 6px 12px 8px; color: rgb(255, 255, 255); border: 1px solid rgba(0, 0, =
0, 0.1); background-color: rgb(39, 174, 96); text-decoration: none; font-we=
ight: 400; font-family: Lato, proxima-nova, "Helvetica Neue", Arial, sans-s=
erif; box-shadow: rgba(255, 255, 255, 0.5) 0px 1px 2px -1px inset, rgba(0, =
0, 0, 0.1) 0px -2px 0px 0px inset; vertical-align: middle; zoom: 1; -webkit=
-user-drag: none; user-select: none; transition: 0.1s linear; }

.btn-hover { background: rgb(46, 142, 206); color: rgb(255, 255, 255); }

.btn:hover { background: rgb(44, 195, 107); color: rgb(255, 255, 255); }

.btn:focus { background: rgb(44, 195, 107); outline: 0px; }

.btn:active { box-shadow: rgba(0, 0, 0, 0.05) 0px -1px 0px 0px inset, rgba(=
0, 0, 0, 0.1) 0px 2px 0px 0px inset; padding: 8px 12px 6px; }

.btn:visited { color: rgb(255, 255, 255); }

.btn-disabled, .btn-disabled:active, .btn-disabled:focus, .btn-disabled:hov=
er, .btn:disabled { background-image: none; opacity: 0.4; cursor: not-allow=
ed; box-shadow: none; }

.btn-small { font-size: 80%; }

.btn-info { background-color: rgb(41, 128, 185) !important; }

.btn-info:hover { background-color: rgb(46, 142, 206) !important; }

.btn-neutral { background-color: rgb(243, 246, 246) !important; color: rgb(=
64, 64, 64) !important; }

.btn-neutral:hover { background-color: rgb(229, 235, 235) !important; color=
: rgb(64, 64, 64); }

.btn-neutral:visited { color: rgb(64, 64, 64) !important; }

.btn-success { background-color: rgb(39, 174, 96) !important; }

.btn-success:hover { background-color: rgb(34, 153, 85) !important; }

.btn-danger { background-color: rgb(231, 76, 60) !important; }

.btn-danger:hover { background-color: rgb(234, 97, 83) !important; }

.btn-warning { background-color: rgb(230, 126, 34) !important; }

.btn-warning:hover { background-color: rgb(233, 139, 57) !important; }

.btn-invert { background-color: rgb(34, 34, 34); }

.btn-invert:hover { background-color: rgb(47, 47, 47) !important; }

.btn-link { color: rgb(41, 128, 185); box-shadow: none; background-color: t=
ransparent !important; border-color: transparent !important; }

.btn-link:active, .btn-link:hover { box-shadow: none; background-color: tra=
nsparent !important; color: rgb(64, 154, 213) !important; }

.btn-link:visited { color: rgb(155, 89, 182); }

.wy-btn-group .btn, .wy-control .btn { vertical-align: middle; }

.wy-btn-group { margin-bottom: 24px; }

.wy-btn-group::after, .wy-btn-group::before { display: table; content: ""; =
}

.wy-btn-group::after { clear: both; }

.wy-dropdown { position: relative; display: inline-block; }

.wy-dropdown-active .wy-dropdown-menu { display: block; }

.wy-dropdown-menu { position: absolute; left: 0px; display: none; float: le=
ft; top: 100%; min-width: 100%; background: rgb(252, 252, 252); z-index: 10=
0; border: 1px solid rgb(207, 215, 221); box-shadow: rgba(0, 0, 0, 0.1) 0px=
 2px 2px 0px; padding: 12px; }

.wy-dropdown-menu > dd > a { display: block; clear: both; color: rgb(64, 64=
, 64); white-space: nowrap; font-size: 90%; padding: 0px 12px; cursor: poin=
ter; }

.wy-dropdown-menu > dd > a:hover { background: rgb(41, 128, 185); color: rg=
b(255, 255, 255); }

.wy-dropdown-menu > dd.divider { border-top: 1px solid rgb(207, 215, 221); =
margin: 6px 0px; }

.wy-dropdown-menu > dd.search { padding-bottom: 12px; }

.wy-dropdown-menu > dd.search input[type=3D"search"] { width: 100%; }

.wy-dropdown-menu > dd.call-to-action { background: rgb(227, 227, 227); tex=
t-transform: uppercase; font-weight: 500; font-size: 80%; }

.wy-dropdown-menu > dd.call-to-action:hover { background: rgb(227, 227, 227=
); }

.wy-dropdown-menu > dd.call-to-action .btn { color: rgb(255, 255, 255); }

.wy-dropdown.wy-dropdown-up .wy-dropdown-menu { inset: auto 0px 100% auto; =
}

.wy-dropdown.wy-dropdown-bubble .wy-dropdown-menu { background: rgb(252, 25=
2, 252); margin-top: 2px; }

.wy-dropdown.wy-dropdown-bubble .wy-dropdown-menu a { padding: 6px 12px; }

.wy-dropdown.wy-dropdown-bubble .wy-dropdown-menu a:hover { background: rgb=
(41, 128, 185); color: rgb(255, 255, 255); }

.wy-dropdown.wy-dropdown-left .wy-dropdown-menu { right: 0px; left: auto; t=
ext-align: right; }

.wy-dropdown-arrow::before { content: " "; border-bottom: 5px solid rgb(245=
, 245, 245); border-left: 5px solid transparent; border-right: 5px solid tr=
ansparent; position: absolute; display: block; top: -4px; left: 50%; margin=
-left: -3px; }

.wy-dropdown-arrow.wy-dropdown-arrow-left::before { left: 11px; }

.wy-form-stacked select { display: block; }

.wy-form-aligned .wy-help-inline, .wy-form-aligned input, .wy-form-aligned =
label, .wy-form-aligned select, .wy-form-aligned textarea { display: inline=
-block; vertical-align: middle; }

.wy-form-aligned .wy-control-group > label { display: inline-block; vertica=
l-align: middle; width: 10em; margin: 6px 12px 0px 0px; float: left; }

.wy-form-aligned .wy-control { float: left; }

.wy-form-aligned .wy-control label { display: block; }

.wy-form-aligned .wy-control select { margin-top: 6px; }

fieldset { margin: 0px; }

fieldset, legend { border: 0px; padding: 0px; }

legend { width: 100%; white-space: normal; margin-bottom: 24px; font-size: =
150%; }

label, legend { display: block; }

label { margin: 0px 0px 0.3125em; color: rgb(51, 51, 51); font-size: 90%; }

input, select, textarea { font-size: 100%; margin: 0px; vertical-align: bas=
eline; }

.wy-control-group { margin-bottom: 24px; max-width: 1200px; margin-left: au=
to; margin-right: auto; }

.wy-control-group::after, .wy-control-group::before { display: table; conte=
nt: ""; }

.wy-control-group::after { clear: both; }

.wy-control-group.wy-control-group-required > label::after { content: " *";=
 color: rgb(231, 76, 60); }

.wy-control-group .wy-form-full, .wy-control-group .wy-form-halves, .wy-con=
trol-group .wy-form-thirds { padding-bottom: 12px; }

.wy-control-group .wy-form-full input[type=3D"color"], .wy-control-group .w=
y-form-full input[type=3D"date"], .wy-control-group .wy-form-full input[typ=
e=3D"datetime-local"], .wy-control-group .wy-form-full input[type=3D"dateti=
me"], .wy-control-group .wy-form-full input[type=3D"email"], .wy-control-gr=
oup .wy-form-full input[type=3D"month"], .wy-control-group .wy-form-full in=
put[type=3D"number"], .wy-control-group .wy-form-full input[type=3D"passwor=
d"], .wy-control-group .wy-form-full input[type=3D"search"], .wy-control-gr=
oup .wy-form-full input[type=3D"tel"], .wy-control-group .wy-form-full inpu=
t[type=3D"text"], .wy-control-group .wy-form-full input[type=3D"time"], .wy=
-control-group .wy-form-full input[type=3D"url"], .wy-control-group .wy-for=
m-full input[type=3D"week"], .wy-control-group .wy-form-full select, .wy-co=
ntrol-group .wy-form-halves input[type=3D"color"], .wy-control-group .wy-fo=
rm-halves input[type=3D"date"], .wy-control-group .wy-form-halves input[typ=
e=3D"datetime-local"], .wy-control-group .wy-form-halves input[type=3D"date=
time"], .wy-control-group .wy-form-halves input[type=3D"email"], .wy-contro=
l-group .wy-form-halves input[type=3D"month"], .wy-control-group .wy-form-h=
alves input[type=3D"number"], .wy-control-group .wy-form-halves input[type=
=3D"password"], .wy-control-group .wy-form-halves input[type=3D"search"], .=
wy-control-group .wy-form-halves input[type=3D"tel"], .wy-control-group .wy=
-form-halves input[type=3D"text"], .wy-control-group .wy-form-halves input[=
type=3D"time"], .wy-control-group .wy-form-halves input[type=3D"url"], .wy-=
control-group .wy-form-halves input[type=3D"week"], .wy-control-group .wy-f=
orm-halves select, .wy-control-group .wy-form-thirds input[type=3D"color"],=
 .wy-control-group .wy-form-thirds input[type=3D"date"], .wy-control-group =
.wy-form-thirds input[type=3D"datetime-local"], .wy-control-group .wy-form-=
thirds input[type=3D"datetime"], .wy-control-group .wy-form-thirds input[ty=
pe=3D"email"], .wy-control-group .wy-form-thirds input[type=3D"month"], .wy=
-control-group .wy-form-thirds input[type=3D"number"], .wy-control-group .w=
y-form-thirds input[type=3D"password"], .wy-control-group .wy-form-thirds i=
nput[type=3D"search"], .wy-control-group .wy-form-thirds input[type=3D"tel"=
], .wy-control-group .wy-form-thirds input[type=3D"text"], .wy-control-grou=
p .wy-form-thirds input[type=3D"time"], .wy-control-group .wy-form-thirds i=
nput[type=3D"url"], .wy-control-group .wy-form-thirds input[type=3D"week"],=
 .wy-control-group .wy-form-thirds select { width: 100%; }

.wy-control-group .wy-form-full { float: left; display: block; width: 100%;=
 margin-right: 0px; }

.wy-control-group .wy-form-full:last-child { margin-right: 0px; }

.wy-control-group .wy-form-halves { float: left; display: block; margin-rig=
ht: 2.35765%; width: 48.8212%; }

.wy-control-group .wy-form-halves:last-child, .wy-control-group .wy-form-ha=
lves:nth-of-type(2n) { margin-right: 0px; }

.wy-control-group .wy-form-halves:nth-of-type(2n+1) { clear: left; }

.wy-control-group .wy-form-thirds { float: left; display: block; margin-rig=
ht: 2.35765%; width: 31.7616%; }

.wy-control-group .wy-form-thirds:last-child, .wy-control-group .wy-form-th=
irds:nth-of-type(3n) { margin-right: 0px; }

.wy-control-group .wy-form-thirds:nth-of-type(3n+1) { clear: left; }

.wy-control-group.wy-control-group-no-input .wy-control, .wy-control-no-inp=
ut { margin: 6px 0px 0px; font-size: 90%; }

.wy-control-no-input { display: inline-block; }

.wy-control-group.fluid-input input[type=3D"color"], .wy-control-group.flui=
d-input input[type=3D"date"], .wy-control-group.fluid-input input[type=3D"d=
atetime-local"], .wy-control-group.fluid-input input[type=3D"datetime"], .w=
y-control-group.fluid-input input[type=3D"email"], .wy-control-group.fluid-=
input input[type=3D"month"], .wy-control-group.fluid-input input[type=3D"nu=
mber"], .wy-control-group.fluid-input input[type=3D"password"], .wy-control=
-group.fluid-input input[type=3D"search"], .wy-control-group.fluid-input in=
put[type=3D"tel"], .wy-control-group.fluid-input input[type=3D"text"], .wy-=
control-group.fluid-input input[type=3D"time"], .wy-control-group.fluid-inp=
ut input[type=3D"url"], .wy-control-group.fluid-input input[type=3D"week"] =
{ width: 100%; }

.wy-form-message-inline { padding-left: 0.3em; color: rgb(102, 102, 102); f=
ont-size: 90%; }

.wy-form-message { display: block; color: rgb(153, 153, 153); font-size: 70=
%; margin-top: 0.3125em; font-style: italic; }

.wy-form-message p { font-size: inherit; font-style: italic; margin-bottom:=
 6px; }

.wy-form-message p:last-child { margin-bottom: 0px; }

input { line-height: normal; }

input[type=3D"button"], input[type=3D"reset"], input[type=3D"submit"] { app=
earance: button; cursor: pointer; font-family: Lato, proxima-nova, "Helveti=
ca Neue", Arial, sans-serif; }

input[type=3D"color"], input[type=3D"date"], input[type=3D"datetime-local"]=
, input[type=3D"datetime"], input[type=3D"email"], input[type=3D"month"], i=
nput[type=3D"number"], input[type=3D"password"], input[type=3D"search"], in=
put[type=3D"tel"], input[type=3D"text"], input[type=3D"time"], input[type=
=3D"url"], input[type=3D"week"] { appearance: none; padding: 6px; display: =
inline-block; border: 1px solid rgb(204, 204, 204); font-size: 80%; font-fa=
mily: Lato, proxima-nova, "Helvetica Neue", Arial, sans-serif; box-shadow: =
rgb(221, 221, 221) 0px 1px 3px inset; border-radius: 0px; transition: borde=
r 0.3s linear; }

input[type=3D"datetime-local"] { padding: 0.34375em 0.625em; }

input[disabled] { cursor: default; }

input[type=3D"checkbox"], input[type=3D"radio"] { padding: 0px; margin-righ=
t: 0.3125em; }

input[type=3D"checkbox"], input[type=3D"radio"], input[type=3D"search"] { b=
ox-sizing: border-box; }

input[type=3D"search"]::-webkit-search-cancel-button, input[type=3D"search"=
]::-webkit-search-decoration { appearance: none; }

input[type=3D"color"]:focus, input[type=3D"date"]:focus, input[type=3D"date=
time-local"]:focus, input[type=3D"datetime"]:focus, input[type=3D"email"]:f=
ocus, input[type=3D"month"]:focus, input[type=3D"number"]:focus, input[type=
=3D"password"]:focus, input[type=3D"search"]:focus, input[type=3D"tel"]:foc=
us, input[type=3D"text"]:focus, input[type=3D"time"]:focus, input[type=3D"u=
rl"]:focus, input[type=3D"week"]:focus { outline: 0px; border-color: rgb(51=
, 51, 51); }

input.no-focus:focus { border-color: rgb(204, 204, 204) !important; }

input[type=3D"checkbox"]:focus, input[type=3D"file"]:focus, input[type=3D"r=
adio"]:focus { outline: rgb(18, 159, 234) auto 1px; }

input[type=3D"color"][disabled], input[type=3D"date"][disabled], input[type=
=3D"datetime-local"][disabled], input[type=3D"datetime"][disabled], input[t=
ype=3D"email"][disabled], input[type=3D"month"][disabled], input[type=3D"nu=
mber"][disabled], input[type=3D"password"][disabled], input[type=3D"search"=
][disabled], input[type=3D"tel"][disabled], input[type=3D"text"][disabled],=
 input[type=3D"time"][disabled], input[type=3D"url"][disabled], input[type=
=3D"week"][disabled] { cursor: not-allowed; background-color: rgb(250, 250,=
 250); }

input:focus:invalid, select:focus:invalid, textarea:focus:invalid { color: =
rgb(231, 76, 60); border: 1px solid rgb(231, 76, 60); }

input:focus:invalid:focus, select:focus:invalid:focus, textarea:focus:inval=
id:focus { border-color: rgb(231, 76, 60); }

input[type=3D"checkbox"]:focus:invalid:focus, input[type=3D"file"]:focus:in=
valid:focus, input[type=3D"radio"]:focus:invalid:focus { outline-color: rgb=
(231, 76, 60); }

input.wy-input-large { padding: 12px; font-size: 100%; }

textarea { overflow: auto; vertical-align: top; width: 100%; font-family: L=
ato, proxima-nova, "Helvetica Neue", Arial, sans-serif; }

select, textarea { padding: 0.5em 0.625em; display: inline-block; border: 1=
px solid rgb(204, 204, 204); font-size: 80%; box-shadow: rgb(221, 221, 221)=
 0px 1px 3px inset; transition: border 0.3s linear; }

select { border: 1px solid rgb(204, 204, 204); background-color: rgb(255, 2=
55, 255); }

select[multiple] { height: auto; }

select:focus, textarea:focus { outline: 0px; }

input[readonly], select[disabled], select[readonly], textarea[disabled], te=
xtarea[readonly] { cursor: not-allowed; background-color: rgb(250, 250, 250=
); }

input[type=3D"checkbox"][disabled], input[type=3D"radio"][disabled] { curso=
r: not-allowed; }

.wy-checkbox, .wy-radio { margin: 6px 0px; color: rgb(64, 64, 64); display:=
 block; }

.wy-checkbox input, .wy-radio input { vertical-align: baseline; }

.wy-form-message-inline { display: inline-block; vertical-align: middle; }

.wy-input-prefix, .wy-input-suffix { white-space: nowrap; padding: 6px; }

.wy-input-prefix .wy-input-context, .wy-input-suffix .wy-input-context { li=
ne-height: 27px; padding: 0px 8px; display: inline-block; font-size: 80%; b=
ackground-color: rgb(243, 246, 246); border: 1px solid rgb(204, 204, 204); =
color: rgb(153, 153, 153); }

.wy-input-suffix .wy-input-context { border-left: 0px; }

.wy-input-prefix .wy-input-context { border-right: 0px; }

.wy-switch { position: relative; display: block; height: 24px; margin-top: =
12px; cursor: pointer; }

.wy-switch::before { left: 0px; top: 0px; width: 36px; height: 12px; backgr=
ound: rgb(204, 204, 204); }

.wy-switch::after, .wy-switch::before { position: absolute; content: ""; di=
splay: block; border-radius: 4px; transition: 0.2s ease-in-out; }

.wy-switch::after { width: 18px; height: 18px; background: rgb(153, 153, 15=
3); left: -3px; top: -3px; }

.wy-switch span { position: absolute; left: 48px; display: block; font-size=
: 12px; color: rgb(204, 204, 204); line-height: 1; }

.wy-switch.active::before { background: rgb(30, 132, 73); }

.wy-switch.active::after { left: 24px; background: rgb(39, 174, 96); }

.wy-switch.disabled { cursor: not-allowed; opacity: 0.8; }

.wy-control-group.wy-control-group-error .wy-form-message, .wy-control-grou=
p.wy-control-group-error > label { color: rgb(231, 76, 60); }

.wy-control-group.wy-control-group-error input[type=3D"color"], .wy-control=
-group.wy-control-group-error input[type=3D"date"], .wy-control-group.wy-co=
ntrol-group-error input[type=3D"datetime-local"], .wy-control-group.wy-cont=
rol-group-error input[type=3D"datetime"], .wy-control-group.wy-control-grou=
p-error input[type=3D"email"], .wy-control-group.wy-control-group-error inp=
ut[type=3D"month"], .wy-control-group.wy-control-group-error input[type=3D"=
number"], .wy-control-group.wy-control-group-error input[type=3D"password"]=
, .wy-control-group.wy-control-group-error input[type=3D"search"], .wy-cont=
rol-group.wy-control-group-error input[type=3D"tel"], .wy-control-group.wy-=
control-group-error input[type=3D"text"], .wy-control-group.wy-control-grou=
p-error input[type=3D"time"], .wy-control-group.wy-control-group-error inpu=
t[type=3D"url"], .wy-control-group.wy-control-group-error input[type=3D"wee=
k"], .wy-control-group.wy-control-group-error textarea { border: 1px solid =
rgb(231, 76, 60); }

.wy-inline-validate { white-space: nowrap; }

.wy-inline-validate .wy-input-context { padding: 0.5em 0.625em; display: in=
line-block; font-size: 80%; }

.wy-inline-validate.wy-inline-validate-success .wy-input-context { color: r=
gb(39, 174, 96); }

.wy-inline-validate.wy-inline-validate-danger .wy-input-context { color: rg=
b(231, 76, 60); }

.wy-inline-validate.wy-inline-validate-warning .wy-input-context { color: r=
gb(230, 126, 34); }

.wy-inline-validate.wy-inline-validate-info .wy-input-context { color: rgb(=
41, 128, 185); }

.rotate-90 { transform: rotate(90deg); }

.rotate-180 { transform: rotate(180deg); }

.rotate-270 { transform: rotate(270deg); }

.mirror { transform: scaleX(-1); }

.mirror.rotate-90 { transform: scaleX(-1) rotate(90deg); }

.mirror.rotate-180 { transform: scaleX(-1) rotate(180deg); }

.mirror.rotate-270 { transform: scaleX(-1) rotate(270deg); }

@media only screen and (max-width: 480px) {
  .wy-form button[type=3D"submit"] { margin: 0.7em 0px 0px; }
  .wy-form input[type=3D"color"], .wy-form input[type=3D"date"], .wy-form i=
nput[type=3D"datetime-local"], .wy-form input[type=3D"datetime"], .wy-form =
input[type=3D"email"], .wy-form input[type=3D"month"], .wy-form input[type=
=3D"number"], .wy-form input[type=3D"password"], .wy-form input[type=3D"sea=
rch"], .wy-form input[type=3D"tel"], .wy-form input[type=3D"text"], .wy-for=
m input[type=3D"time"], .wy-form input[type=3D"url"], .wy-form input[type=
=3D"week"], .wy-form label { margin-bottom: 0.3em; display: block; }
  .wy-form input[type=3D"color"], .wy-form input[type=3D"date"], .wy-form i=
nput[type=3D"datetime-local"], .wy-form input[type=3D"datetime"], .wy-form =
input[type=3D"email"], .wy-form input[type=3D"month"], .wy-form input[type=
=3D"number"], .wy-form input[type=3D"password"], .wy-form input[type=3D"sea=
rch"], .wy-form input[type=3D"tel"], .wy-form input[type=3D"time"], .wy-for=
m input[type=3D"url"], .wy-form input[type=3D"week"] { margin-bottom: 0px; =
}
  .wy-form-aligned .wy-control-group label { margin-bottom: 0.3em; text-ali=
gn: left; display: block; width: 100%; }
  .wy-form-aligned .wy-control { margin: 1.5em 0px 0px; }
  .wy-form-message, .wy-form-message-inline, .wy-form .wy-help-inline { dis=
play: block; font-size: 80%; padding: 6px 0px; }
}

@media screen and (max-width: 768px) {
  .tablet-hide { display: none; }
}

@media screen and (max-width: 480px) {
  .mobile-hide { display: none; }
}

.float-left { float: left; }

.float-right { float: right; }

.full-width { width: 100%; }

.rst-content table.docutils, .rst-content table.field-list, .wy-table { bor=
der-collapse: collapse; border-spacing: 0px; empty-cells: show; margin-bott=
om: 24px; }

.rst-content table.docutils caption, .rst-content table.field-list caption,=
 .wy-table caption { color: rgb(0, 0, 0); font: italic 85% / 1 arial, sans-=
serif; padding: 1em 0px; text-align: center; }

.rst-content table.docutils td, .rst-content table.docutils th, .rst-conten=
t table.field-list td, .rst-content table.field-list th, .wy-table td, .wy-=
table th { font-size: 90%; margin: 0px; overflow: visible; padding: 8px 16p=
x; }

.rst-content table.docutils td:first-child, .rst-content table.docutils th:=
first-child, .rst-content table.field-list td:first-child, .rst-content tab=
le.field-list th:first-child, .wy-table td:first-child, .wy-table th:first-=
child { border-left-width: 0px; }

.rst-content table.docutils thead, .rst-content table.field-list thead, .wy=
-table thead { color: rgb(0, 0, 0); text-align: left; vertical-align: botto=
m; white-space: nowrap; }

.rst-content table.docutils thead th, .rst-content table.field-list thead t=
h, .wy-table thead th { font-weight: 700; border-bottom: 2px solid rgb(225,=
 228, 229); }

.rst-content table.docutils td, .rst-content table.field-list td, .wy-table=
 td { background-color: transparent; vertical-align: middle; }

.rst-content table.docutils td p, .rst-content table.field-list td p, .wy-t=
able td p { line-height: 18px; }

.rst-content table.docutils td p:last-child, .rst-content table.field-list =
td p:last-child, .wy-table td p:last-child { margin-bottom: 0px; }

.rst-content table.docutils .wy-table-cell-min, .rst-content table.field-li=
st .wy-table-cell-min, .wy-table .wy-table-cell-min { width: 1%; padding-ri=
ght: 0px; }

.rst-content table.docutils .wy-table-cell-min input[type=3D"checkbox"], .r=
st-content table.field-list .wy-table-cell-min input[type=3D"checkbox"], .w=
y-table .wy-table-cell-min input[type=3D"checkbox"] { margin: 0px; }

.wy-table-secondary { color: grey; font-size: 90%; }

.wy-table-tertiary { color: grey; font-size: 80%; }

.rst-content table.docutils:not(.field-list) tr:nth-child(2n-1) td, .wy-tab=
le-backed, .wy-table-odd td, .wy-table-striped tr:nth-child(2n-1) td { back=
ground-color: rgb(243, 246, 246); }

.rst-content table.docutils, .wy-table-bordered-all { border: 1px solid rgb=
(225, 228, 229); }

.rst-content table.docutils td, .wy-table-bordered-all td { border-bottom: =
1px solid rgb(225, 228, 229); border-left: 1px solid rgb(225, 228, 229); }

.rst-content table.docutils tbody > tr:last-child td, .wy-table-bordered-al=
l tbody > tr:last-child td { border-bottom-width: 0px; }

.wy-table-bordered { border: 1px solid rgb(225, 228, 229); }

.wy-table-bordered-rows td { border-bottom: 1px solid rgb(225, 228, 229); }

.wy-table-bordered-rows tbody > tr:last-child td { border-bottom-width: 0px=
; }

.wy-table-horizontal td, .wy-table-horizontal th { border-width: 0px 0px 1p=
x; border-bottom-style: solid; border-bottom-color: rgb(225, 228, 229); }

.wy-table-horizontal tbody > tr:last-child td { border-bottom-width: 0px; }

.wy-table-responsive { margin-bottom: 24px; max-width: 100%; overflow: auto=
; }

.wy-table-responsive table { margin-bottom: 0px !important; }

.wy-table-responsive table td, .wy-table-responsive table th { white-space:=
 nowrap; }

a { color: rgb(41, 128, 185); text-decoration: none; cursor: pointer; }

a:hover { color: rgb(48, 145, 209); }

a:visited { color: rgb(155, 89, 182); }

html { height: 100%; }

body, html { overflow-x: hidden; }

body { font-family: Lato, proxima-nova, "Helvetica Neue", Arial, sans-serif=
; font-weight: 400; color: rgb(64, 64, 64); min-height: 100%; background: r=
gb(237, 240, 242); }

.wy-text-left { text-align: left; }

.wy-text-center { text-align: center; }

.wy-text-right { text-align: right; }

.wy-text-large { font-size: 120%; }

.wy-text-normal { font-size: 100%; }

.wy-text-small, small { font-size: 80%; }

.wy-text-strike { text-decoration: line-through; }

.wy-text-warning { color: rgb(230, 126, 34) !important; }

a.wy-text-warning:hover { color: rgb(235, 153, 80) !important; }

.wy-text-info { color: rgb(41, 128, 185) !important; }

a.wy-text-info:hover { color: rgb(64, 154, 213) !important; }

.wy-text-success { color: rgb(39, 174, 96) !important; }

a.wy-text-success:hover { color: rgb(54, 210, 120) !important; }

.wy-text-danger { color: rgb(231, 76, 60) !important; }

a.wy-text-danger:hover { color: rgb(237, 118, 105) !important; }

.wy-text-neutral { color: rgb(64, 64, 64) !important; }

a.wy-text-neutral:hover { color: rgb(89, 89, 89) !important; }

.rst-content .toctree-wrapper > p.caption, h1, h2, h3, h4, h5, h6, legend {=
 margin-top: 0px; font-weight: 700; font-family: "Roboto Slab", ff-tisa-web=
-pro, Georgia, Arial, sans-serif; }

p { line-height: 24px; font-size: 16px; margin: 0px 0px 24px; }

h1 { font-size: 175%; }

.rst-content .toctree-wrapper > p.caption, h2 { font-size: 150%; }

h3 { font-size: 125%; }

h4 { font-size: 115%; }

h5 { font-size: 110%; }

h6 { font-size: 100%; }

hr { display: block; height: 1px; border-width: 1px 0px 0px; border-right-s=
tyle: initial; border-bottom-style: initial; border-left-style: initial; bo=
rder-right-color: initial; border-bottom-color: initial; border-left-color:=
 initial; border-image: initial; border-top-style: solid; border-top-color:=
 rgb(225, 228, 229); margin: 24px 0px; padding: 0px; }

.rst-content code, .rst-content tt, code { white-space: nowrap; max-width: =
100%; background: rgb(255, 255, 255); border: 1px solid rgb(225, 228, 229);=
 font-size: 75%; padding: 0px 5px; font-family: SFMono-Regular, Menlo, Mona=
co, Consolas, "Liberation Mono", "Courier New", Courier, monospace; color: =
rgb(231, 76, 60); overflow-x: auto; }

.rst-content tt.code-large, code.code-large { font-size: 90%; }

.rst-content .section ul, .rst-content .toctree-wrapper ul, .rst-content se=
ction ul, .wy-plain-list-disc, article ul { list-style: disc; line-height: =
24px; margin-bottom: 24px; }

.rst-content .section ul li, .rst-content .toctree-wrapper ul li, .rst-cont=
ent section ul li, .wy-plain-list-disc li, article ul li { list-style: disc=
; margin-left: 24px; }

.rst-content .section ul li p:last-child, .rst-content .section ul li ul, .=
rst-content .toctree-wrapper ul li p:last-child, .rst-content .toctree-wrap=
per ul li ul, .rst-content section ul li p:last-child, .rst-content section=
 ul li ul, .wy-plain-list-disc li p:last-child, .wy-plain-list-disc li ul, =
article ul li p:last-child, article ul li ul { margin-bottom: 0px; }

.rst-content .section ul li li, .rst-content .toctree-wrapper ul li li, .rs=
t-content section ul li li, .wy-plain-list-disc li li, article ul li li { l=
ist-style: circle; }

.rst-content .section ul li li li, .rst-content .toctree-wrapper ul li li l=
i, .rst-content section ul li li li, .wy-plain-list-disc li li li, article =
ul li li li { list-style: square; }

.rst-content .section ul li ol li, .rst-content .toctree-wrapper ul li ol l=
i, .rst-content section ul li ol li, .wy-plain-list-disc li ol li, article =
ul li ol li { list-style: decimal; }

.rst-content .section ol, .rst-content .section ol.arabic, .rst-content .to=
ctree-wrapper ol, .rst-content .toctree-wrapper ol.arabic, .rst-content sec=
tion ol, .rst-content section ol.arabic, .wy-plain-list-decimal, article ol=
 { list-style: decimal; line-height: 24px; margin-bottom: 24px; }

.rst-content .section ol.arabic li, .rst-content .section ol li, .rst-conte=
nt .toctree-wrapper ol.arabic li, .rst-content .toctree-wrapper ol li, .rst=
-content section ol.arabic li, .rst-content section ol li, .wy-plain-list-d=
ecimal li, article ol li { list-style: decimal; margin-left: 24px; }

.rst-content .section ol.arabic li ul, .rst-content .section ol li p:last-c=
hild, .rst-content .section ol li ul, .rst-content .toctree-wrapper ol.arab=
ic li ul, .rst-content .toctree-wrapper ol li p:last-child, .rst-content .t=
octree-wrapper ol li ul, .rst-content section ol.arabic li ul, .rst-content=
 section ol li p:last-child, .rst-content section ol li ul, .wy-plain-list-=
decimal li p:last-child, .wy-plain-list-decimal li ul, article ol li p:last=
-child, article ol li ul { margin-bottom: 0px; }

.rst-content .section ol.arabic li ul li, .rst-content .section ol li ul li=
, .rst-content .toctree-wrapper ol.arabic li ul li, .rst-content .toctree-w=
rapper ol li ul li, .rst-content section ol.arabic li ul li, .rst-content s=
ection ol li ul li, .wy-plain-list-decimal li ul li, article ol li ul li { =
list-style: disc; }

.wy-breadcrumbs { }

.wy-breadcrumbs::after, .wy-breadcrumbs::before { display: table; content: =
""; }

.wy-breadcrumbs::after { clear: both; }

.wy-breadcrumbs li { display: inline-block; }

.wy-breadcrumbs li.wy-breadcrumbs-aside { float: right; }

.wy-breadcrumbs li a { display: inline-block; padding: 5px; }

.wy-breadcrumbs li a:first-child { padding-left: 0px; }

.rst-content .wy-breadcrumbs li tt, .wy-breadcrumbs li .rst-content tt, .wy=
-breadcrumbs li code { padding: 5px; border: none; background: none; }

.rst-content .wy-breadcrumbs li tt.literal, .wy-breadcrumbs li .rst-content=
 tt.literal, .wy-breadcrumbs li code.literal { color: rgb(64, 64, 64); }

.wy-breadcrumbs-extra { margin-bottom: 0px; color: rgb(179, 179, 179); font=
-size: 80%; display: inline-block; }

@media screen and (max-width: 480px) {
  .wy-breadcrumbs-extra, .wy-breadcrumbs li.wy-breadcrumbs-aside { display:=
 none; }
}

@media print {
  .wy-breadcrumbs li.wy-breadcrumbs-aside { display: none; }
}

html { font-size: 16px; }

.wy-affix { position: fixed; top: 1.618em; }

.wy-menu a:hover { text-decoration: none; }

.wy-menu-horiz { }

.wy-menu-horiz::after, .wy-menu-horiz::before { display: table; content: ""=
; }

.wy-menu-horiz::after { clear: both; }

.wy-menu-horiz li, .wy-menu-horiz ul { display: inline-block; }

.wy-menu-horiz li:hover { background: rgba(255, 255, 255, 0.1); }

.wy-menu-horiz li.divide-left { border-left: 1px solid rgb(64, 64, 64); }

.wy-menu-horiz li.divide-right { border-right: 1px solid rgb(64, 64, 64); }

.wy-menu-horiz a { height: 32px; display: inline-block; line-height: 32px; =
padding: 0px 16px; }

.wy-menu-vertical { width: 300px; }

.wy-menu-vertical header, .wy-menu-vertical p.caption { color: rgb(85, 165,=
 217); height: 32px; line-height: 32px; padding: 0px 1.618em; margin: 12px =
0px 0px; display: block; font-weight: 700; text-transform: uppercase; font-=
size: 85%; white-space: nowrap; }

.wy-menu-vertical ul { margin-bottom: 0px; }

.wy-menu-vertical li.divide-top { border-top: 1px solid rgb(64, 64, 64); }

.wy-menu-vertical li.divide-bottom { border-bottom: 1px solid rgb(64, 64, 6=
4); }

.wy-menu-vertical li.current { background: rgb(227, 227, 227); }

.wy-menu-vertical li.current a { color: grey; border-right: 1px solid rgb(2=
01, 201, 201); padding: 0.4045em 2.427em; }

.wy-menu-vertical li.current a:hover { background: rgb(214, 214, 214); }

.rst-content .wy-menu-vertical li tt, .wy-menu-vertical li .rst-content tt,=
 .wy-menu-vertical li code { border: none; background: inherit; color: inhe=
rit; padding-left: 0px; padding-right: 0px; }

.wy-menu-vertical li button.toctree-expand { display: block; float: left; m=
argin-left: -1.2em; line-height: 18px; color: rgb(77, 77, 77); border: none=
; background: none; padding: 0px; }

.wy-menu-vertical li.current > a, .wy-menu-vertical li.on a { color: rgb(64=
, 64, 64); font-weight: 700; position: relative; background: rgb(252, 252, =
252); border: none; padding: 0.4045em 1.618em; }

.wy-menu-vertical li.current > a:hover, .wy-menu-vertical li.on a:hover { b=
ackground: rgb(252, 252, 252); }

.wy-menu-vertical li.current > a:hover button.toctree-expand, .wy-menu-vert=
ical li.on a:hover button.toctree-expand { color: grey; }

.wy-menu-vertical li.current > a button.toctree-expand, .wy-menu-vertical l=
i.on a button.toctree-expand { display: block; line-height: 18px; color: rg=
b(51, 51, 51); }

.wy-menu-vertical li.toctree-l1.current > a { border-bottom: 1px solid rgb(=
201, 201, 201); border-top: 1px solid rgb(201, 201, 201); }

.wy-menu-vertical .toctree-l1.current .toctree-l2 > ul, .wy-menu-vertical .=
toctree-l2.current .toctree-l3 > ul, .wy-menu-vertical .toctree-l3.current =
.toctree-l4 > ul, .wy-menu-vertical .toctree-l4.current .toctree-l5 > ul, .=
wy-menu-vertical .toctree-l5.current .toctree-l6 > ul, .wy-menu-vertical .t=
octree-l6.current .toctree-l7 > ul, .wy-menu-vertical .toctree-l7.current .=
toctree-l8 > ul, .wy-menu-vertical .toctree-l8.current .toctree-l9 > ul, .w=
y-menu-vertical .toctree-l9.current .toctree-l10 > ul, .wy-menu-vertical .t=
octree-l10.current .toctree-l11 > ul { display: none; }

.wy-menu-vertical .toctree-l1.current .current.toctree-l2 > ul, .wy-menu-ve=
rtical .toctree-l2.current .current.toctree-l3 > ul, .wy-menu-vertical .toc=
tree-l3.current .current.toctree-l4 > ul, .wy-menu-vertical .toctree-l4.cur=
rent .current.toctree-l5 > ul, .wy-menu-vertical .toctree-l5.current .curre=
nt.toctree-l6 > ul, .wy-menu-vertical .toctree-l6.current .current.toctree-=
l7 > ul, .wy-menu-vertical .toctree-l7.current .current.toctree-l8 > ul, .w=
y-menu-vertical .toctree-l8.current .current.toctree-l9 > ul, .wy-menu-vert=
ical .toctree-l9.current .current.toctree-l10 > ul, .wy-menu-vertical .toct=
ree-l10.current .current.toctree-l11 > ul { display: block; }

.wy-menu-vertical li.toctree-l3, .wy-menu-vertical li.toctree-l4 { font-siz=
e: 0.9em; }

.wy-menu-vertical li.toctree-l2 a, .wy-menu-vertical li.toctree-l3 a, .wy-m=
enu-vertical li.toctree-l4 a, .wy-menu-vertical li.toctree-l5 a, .wy-menu-v=
ertical li.toctree-l6 a, .wy-menu-vertical li.toctree-l7 a, .wy-menu-vertic=
al li.toctree-l8 a, .wy-menu-vertical li.toctree-l9 a, .wy-menu-vertical li=
.toctree-l10 a { color: rgb(64, 64, 64); }

.wy-menu-vertical li.toctree-l2 a:hover button.toctree-expand, .wy-menu-ver=
tical li.toctree-l3 a:hover button.toctree-expand, .wy-menu-vertical li.toc=
tree-l4 a:hover button.toctree-expand, .wy-menu-vertical li.toctree-l5 a:ho=
ver button.toctree-expand, .wy-menu-vertical li.toctree-l6 a:hover button.t=
octree-expand, .wy-menu-vertical li.toctree-l7 a:hover button.toctree-expan=
d, .wy-menu-vertical li.toctree-l8 a:hover button.toctree-expand, .wy-menu-=
vertical li.toctree-l9 a:hover button.toctree-expand, .wy-menu-vertical li.=
toctree-l10 a:hover button.toctree-expand { color: grey; }

.wy-menu-vertical li.toctree-l2.current li.toctree-l3 > a, .wy-menu-vertica=
l li.toctree-l3.current li.toctree-l4 > a, .wy-menu-vertical li.toctree-l4.=
current li.toctree-l5 > a, .wy-menu-vertical li.toctree-l5.current li.toctr=
ee-l6 > a, .wy-menu-vertical li.toctree-l6.current li.toctree-l7 > a, .wy-m=
enu-vertical li.toctree-l7.current li.toctree-l8 > a, .wy-menu-vertical li.=
toctree-l8.current li.toctree-l9 > a, .wy-menu-vertical li.toctree-l9.curre=
nt li.toctree-l10 > a, .wy-menu-vertical li.toctree-l10.current li.toctree-=
l11 > a { display: block; }

.wy-menu-vertical li.toctree-l2.current > a { padding: 0.4045em 2.427em; }

.wy-menu-vertical li.toctree-l2.current li.toctree-l3 > a { padding: 0.4045=
em 1.618em 0.4045em 4.045em; }

.wy-menu-vertical li.toctree-l3.current > a { padding: 0.4045em 4.045em; }

.wy-menu-vertical li.toctree-l3.current li.toctree-l4 > a { padding: 0.4045=
em 1.618em 0.4045em 5.663em; }

.wy-menu-vertical li.toctree-l4.current > a { padding: 0.4045em 5.663em; }

.wy-menu-vertical li.toctree-l4.current li.toctree-l5 > a { padding: 0.4045=
em 1.618em 0.4045em 7.281em; }

.wy-menu-vertical li.toctree-l5.current > a { padding: 0.4045em 7.281em; }

.wy-menu-vertical li.toctree-l5.current li.toctree-l6 > a { padding: 0.4045=
em 1.618em 0.4045em 8.899em; }

.wy-menu-vertical li.toctree-l6.current > a { padding: 0.4045em 8.899em; }

.wy-menu-vertical li.toctree-l6.current li.toctree-l7 > a { padding: 0.4045=
em 1.618em 0.4045em 10.517em; }

.wy-menu-vertical li.toctree-l7.current > a { padding: 0.4045em 10.517em; }

.wy-menu-vertical li.toctree-l7.current li.toctree-l8 > a { padding: 0.4045=
em 1.618em 0.4045em 12.135em; }

.wy-menu-vertical li.toctree-l8.current > a { padding: 0.4045em 12.135em; }

.wy-menu-vertical li.toctree-l8.current li.toctree-l9 > a { padding: 0.4045=
em 1.618em 0.4045em 13.753em; }

.wy-menu-vertical li.toctree-l9.current > a { padding: 0.4045em 13.753em; }

.wy-menu-vertical li.toctree-l9.current li.toctree-l10 > a { padding: 0.404=
5em 1.618em 0.4045em 15.371em; }

.wy-menu-vertical li.toctree-l10.current > a { padding: 0.4045em 15.371em; =
}

.wy-menu-vertical li.toctree-l10.current li.toctree-l11 > a { padding: 0.40=
45em 1.618em 0.4045em 16.989em; }

.wy-menu-vertical li.toctree-l2.current > a, .wy-menu-vertical li.toctree-l=
2.current li.toctree-l3 > a { background: rgb(201, 201, 201); }

.wy-menu-vertical li.toctree-l2 button.toctree-expand { color: rgb(163, 163=
, 163); }

.wy-menu-vertical li.toctree-l3.current > a, .wy-menu-vertical li.toctree-l=
3.current li.toctree-l4 > a { background: rgb(189, 189, 189); }

.wy-menu-vertical li.toctree-l3 button.toctree-expand { color: rgb(150, 150=
, 150); }

.wy-menu-vertical li.current ul { display: block; }

.wy-menu-vertical li ul { margin-bottom: 0px; display: none; }

.wy-menu-vertical li ul li a { margin-bottom: 0px; color: rgb(217, 217, 217=
); font-weight: 400; }

.wy-menu-vertical a { line-height: 18px; padding: 0.4045em 1.618em; display=
: block; position: relative; font-size: 90%; color: rgb(217, 217, 217); }

.wy-menu-vertical a:hover { background-color: rgb(78, 74, 74); cursor: poin=
ter; }

.wy-menu-vertical a:hover button.toctree-expand { color: rgb(217, 217, 217)=
; }

.wy-menu-vertical a:active { background-color: rgb(41, 128, 185); cursor: p=
ointer; color: rgb(255, 255, 255); }

.wy-menu-vertical a:active button.toctree-expand { color: rgb(255, 255, 255=
); }

.wy-side-nav-search { display: block; width: 300px; padding: 0.809em; margi=
n-bottom: 0.809em; z-index: 200; background-color: rgb(41, 128, 185); text-=
align: center; color: rgb(252, 252, 252); }

.wy-side-nav-search input[type=3D"text"] { width: 100%; border-radius: 50px=
; padding: 6px 12px; border-color: rgb(36, 114, 164); }

.wy-side-nav-search img { display: block; margin: auto auto 0.809em; height=
: 45px; width: 45px; background-color: rgb(41, 128, 185); padding: 5px; bor=
der-radius: 100%; }

.wy-side-nav-search .wy-dropdown > a, .wy-side-nav-search > a { color: rgb(=
252, 252, 252); font-size: 100%; font-weight: 700; display: inline-block; p=
adding: 4px 6px; margin-bottom: 0.809em; max-width: 100%; }

.wy-side-nav-search .wy-dropdown > a:hover, .wy-side-nav-search > a:hover {=
 background: rgba(255, 255, 255, 0.1); }

.wy-side-nav-search .wy-dropdown > a img.logo, .wy-side-nav-search > a img.=
logo { display: block; margin: 0px auto; height: auto; width: auto; border-=
radius: 0px; max-width: 100%; background: transparent; }

.wy-side-nav-search .wy-dropdown > a.icon img.logo, .wy-side-nav-search > a=
.icon img.logo { margin-top: 0.85em; }

.wy-side-nav-search > div.version { margin-top: -0.4045em; margin-bottom: 0=
.809em; font-weight: 400; color: rgba(255, 255, 255, 0.3); }

.wy-nav .wy-menu-vertical header { color: rgb(41, 128, 185); }

.wy-nav .wy-menu-vertical a { color: rgb(179, 179, 179); }

.wy-nav .wy-menu-vertical a:hover { background-color: rgb(41, 128, 185); co=
lor: rgb(255, 255, 255); }

[data-menu-wrap] { transition: 0.2s ease-in; position: absolute; width: 100=
%; opacity: 0; }

[data-menu-wrap].move-center { left: 0px; right: auto; opacity: 1; }

[data-menu-wrap].move-left { right: auto; left: -100%; opacity: 0; }

[data-menu-wrap].move-right { right: -100%; left: auto; opacity: 0; }

.wy-body-for-nav { background: rgb(252, 252, 252); }

.wy-grid-for-nav { position: absolute; width: 100%; height: 100%; }

.wy-nav-side { position: fixed; top: 0px; bottom: 0px; left: 0px; padding-b=
ottom: 2em; width: 300px; overflow: hidden; min-height: 100%; color: rgb(15=
5, 155, 155); background: rgb(52, 49, 49); z-index: 200; }

.wy-side-scroll { width: 320px; position: relative; overflow: hidden scroll=
; height: 100%; }

.wy-nav-top { display: none; background: rgb(41, 128, 185); color: rgb(255,=
 255, 255); padding: 0.4045em 0.809em; position: relative; line-height: 50p=
x; text-align: center; font-size: 100%; }

.wy-nav-top::after, .wy-nav-top::before { display: table; content: ""; }

.wy-nav-top::after { clear: both; }

.wy-nav-top a { color: rgb(255, 255, 255); font-weight: 700; }

.wy-nav-top img { margin-right: 12px; height: 45px; width: 45px; background=
-color: rgb(41, 128, 185); padding: 5px; border-radius: 100%; }

.wy-nav-top i { font-size: 30px; float: left; cursor: pointer; padding-top:=
 inherit; }

.wy-nav-content-wrap { margin-left: 300px; background: rgb(252, 252, 252); =
min-height: 100%; }

.wy-nav-content { padding: 1.618em 3.236em; height: 100%; max-width: 800px;=
 margin: auto; }

.wy-body-mask { position: fixed; width: 100%; height: 100%; background: rgb=
a(0, 0, 0, 0.2); display: none; z-index: 499; }

.wy-body-mask.on { display: block; }

footer { color: grey; }

footer p { margin-bottom: 12px; }

.rst-content footer span.commit tt, footer span.commit .rst-content tt, foo=
ter span.commit code { padding: 0px; font-family: SFMono-Regular, Menlo, Mo=
naco, Consolas, "Liberation Mono", "Courier New", Courier, monospace; font-=
size: 1em; background: none; border: none; color: grey; }

.rst-footer-buttons { }

.rst-footer-buttons::after, .rst-footer-buttons::before { width: 100%; disp=
lay: table; content: ""; }

.rst-footer-buttons::after { clear: both; }

.rst-breadcrumbs-buttons { margin-top: 12px; }

.rst-breadcrumbs-buttons::after, .rst-breadcrumbs-buttons::before { display=
: table; content: ""; }

.rst-breadcrumbs-buttons::after { clear: both; }

#search-results .search li { margin-bottom: 24px; border-bottom: 1px solid =
rgb(225, 228, 229); padding-bottom: 24px; }

#search-results .search li:first-child { border-top: 1px solid rgb(225, 228=
, 229); padding-top: 24px; }

#search-results .search li a { font-size: 120%; margin-bottom: 12px; displa=
y: inline-block; }

#search-results .context { color: grey; font-size: 90%; }

.genindextable li > ul { margin-left: 24px; }

@media screen and (max-width: 768px) {
  .wy-body-for-nav { background: rgb(252, 252, 252); }
  .wy-nav-top { display: block; }
  .wy-nav-side { left: -300px; }
  .wy-nav-side.shift { width: 85%; left: 0px; }
  .wy-menu.wy-menu-vertical, .wy-side-nav-search, .wy-side-scroll { width: =
auto; }
  .wy-nav-content-wrap { margin-left: 0px; }
  .wy-nav-content-wrap .wy-nav-content { padding: 1.618em; }
  .wy-nav-content-wrap.shift { position: fixed; min-width: 100%; left: 85%;=
 top: 0px; height: 100%; overflow: hidden; }
}

@media screen and (min-width: 1100px) {
  .wy-nav-content-wrap { background: rgba(0, 0, 0, 0.05); }
  .wy-nav-content { margin: 0px; background: rgb(252, 252, 252); }
}

@media print {
  .rst-versions, .wy-nav-side, footer { display: none; }
  .wy-nav-content-wrap { margin-left: 0px; }
}

.rst-versions { position: fixed; bottom: 0px; left: 0px; width: 300px; colo=
r: rgb(252, 252, 252); background: rgb(31, 29, 29); font-family: Lato, prox=
ima-nova, "Helvetica Neue", Arial, sans-serif; z-index: 400; }

.rst-versions a { color: rgb(41, 128, 185); text-decoration: none; }

.rst-versions .rst-badge-small { display: none; }

.rst-versions .rst-current-version { padding: 12px; background-color: rgb(3=
9, 37, 37); display: block; text-align: right; font-size: 90%; cursor: poin=
ter; color: rgb(39, 174, 96); }

.rst-versions .rst-current-version::after, .rst-versions .rst-current-versi=
on::before { display: table; content: ""; }

.rst-versions .rst-current-version::after { clear: both; }

.rst-content .code-block-caption .rst-versions .rst-current-version .header=
link, .rst-content .eqno .rst-versions .rst-current-version .headerlink, .r=
st-content .rst-versions .rst-current-version .admonition-title, .rst-conte=
nt code.download .rst-versions .rst-current-version span:first-child, .rst-=
content dl dt .rst-versions .rst-current-version .headerlink, .rst-content =
h1 .rst-versions .rst-current-version .headerlink, .rst-content h2 .rst-ver=
sions .rst-current-version .headerlink, .rst-content h3 .rst-versions .rst-=
current-version .headerlink, .rst-content h4 .rst-versions .rst-current-ver=
sion .headerlink, .rst-content h5 .rst-versions .rst-current-version .heade=
rlink, .rst-content h6 .rst-versions .rst-current-version .headerlink, .rst=
-content p .rst-versions .rst-current-version .headerlink, .rst-content tab=
le > caption .rst-versions .rst-current-version .headerlink, .rst-content t=
t.download .rst-versions .rst-current-version span:first-child, .rst-versio=
ns .rst-current-version .fa, .rst-versions .rst-current-version .icon, .rst=
-versions .rst-current-version .rst-content .admonition-title, .rst-version=
s .rst-current-version .rst-content .code-block-caption .headerlink, .rst-v=
ersions .rst-current-version .rst-content .eqno .headerlink, .rst-versions =
.rst-current-version .rst-content code.download span:first-child, .rst-vers=
ions .rst-current-version .rst-content dl dt .headerlink, .rst-versions .rs=
t-current-version .rst-content h1 .headerlink, .rst-versions .rst-current-v=
ersion .rst-content h2 .headerlink, .rst-versions .rst-current-version .rst=
-content h3 .headerlink, .rst-versions .rst-current-version .rst-content h4=
 .headerlink, .rst-versions .rst-current-version .rst-content h5 .headerlin=
k, .rst-versions .rst-current-version .rst-content h6 .headerlink, .rst-ver=
sions .rst-current-version .rst-content p .headerlink, .rst-versions .rst-c=
urrent-version .rst-content table > caption .headerlink, .rst-versions .rst=
-current-version .rst-content tt.download span:first-child, .rst-versions .=
rst-current-version .wy-menu-vertical li button.toctree-expand, .wy-menu-ve=
rtical li .rst-versions .rst-current-version button.toctree-expand { color:=
 rgb(252, 252, 252); }

.rst-versions .rst-current-version .fa-book, .rst-versions .rst-current-ver=
sion .icon-book { float: left; }

.rst-versions .rst-current-version.rst-out-of-date { background-color: rgb(=
231, 76, 60); color: rgb(255, 255, 255); }

.rst-versions .rst-current-version.rst-active-old-version { background-colo=
r: rgb(241, 196, 15); color: rgb(0, 0, 0); }

.rst-versions.shift-up { height: auto; max-height: 100%; overflow-y: scroll=
; }

.rst-versions.shift-up .rst-other-versions { display: block; }

.rst-versions .rst-other-versions { font-size: 90%; padding: 12px; color: g=
rey; display: none; }

.rst-versions .rst-other-versions hr { display: block; height: 1px; border-=
width: 1px 0px 0px; border-right-style: initial; border-bottom-style: initi=
al; border-left-style: initial; border-right-color: initial; border-bottom-=
color: initial; border-left-color: initial; border-image: initial; margin: =
20px 0px; padding: 0px; border-top-style: solid; border-top-color: rgb(65, =
61, 61); }

.rst-versions .rst-other-versions dd { display: inline-block; margin: 0px; =
}

.rst-versions .rst-other-versions dd a { display: inline-block; padding: 6p=
x; color: rgb(252, 252, 252); }

.rst-versions.rst-badge { width: auto; bottom: 20px; right: 20px; left: aut=
o; border: none; max-width: 300px; max-height: 90%; }

.rst-versions.rst-badge .fa-book, .rst-versions.rst-badge .icon-book { floa=
t: none; line-height: 30px; }

.rst-versions.rst-badge.shift-up .rst-current-version { text-align: right; =
}

.rst-versions.rst-badge.shift-up .rst-current-version .fa-book, .rst-versio=
ns.rst-badge.shift-up .rst-current-version .icon-book { float: left; }

.rst-versions.rst-badge > .rst-current-version { width: auto; height: 30px;=
 line-height: 30px; padding: 0px 6px; display: block; text-align: center; }

@media screen and (max-width: 768px) {
  .rst-versions { width: 85%; display: none; }
  .rst-versions.shift { display: block; }
}

.rst-content .toctree-wrapper > p.caption, .rst-content h1, .rst-content h2=
, .rst-content h3, .rst-content h4, .rst-content h5, .rst-content h6 { marg=
in-bottom: 24px; }

.rst-content img { max-width: 100%; height: auto; }

.rst-content div.figure, .rst-content figure { margin-bottom: 24px; }

.rst-content div.figure .caption-text, .rst-content figure .caption-text { =
font-style: italic; }

.rst-content div.figure p:last-child.caption, .rst-content figure p:last-ch=
ild.caption { margin-bottom: 0px; }

.rst-content div.figure.align-center, .rst-content figure.align-center { te=
xt-align: center; }

.rst-content .section > a > img, .rst-content .section > img, .rst-content =
section > a > img, .rst-content section > img { margin-bottom: 24px; }

.rst-content abbr[title] { text-decoration: none; }

.rst-content.style-external-links a.reference.external::after { font-family=
: FontAwesome; content: "=EF=82=8E"; color: rgb(179, 179, 179); vertical-al=
ign: super; font-size: 60%; margin: 0px 0.2em; }

.rst-content blockquote { margin-left: 24px; line-height: 24px; margin-bott=
om: 24px; }

.rst-content pre.literal-block { white-space: pre; margin: 0px; padding: 12=
px; font-family: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono"=
, "Courier New", Courier, monospace; display: block; overflow: auto; }

.rst-content div[class^=3D"highlight"], .rst-content pre.literal-block { bo=
rder: 1px solid rgb(225, 228, 229); overflow-x: auto; margin: 1px 0px 24px;=
 }

.rst-content div[class^=3D"highlight"] div[class^=3D"highlight"], .rst-cont=
ent pre.literal-block div[class^=3D"highlight"] { padding: 0px; border: non=
e; margin: 0px; }

.rst-content div[class^=3D"highlight"] td.code { width: 100%; }

.rst-content .linenodiv pre { border-right: 1px solid rgb(230, 233, 234); m=
argin: 0px; padding: 12px; font-family: SFMono-Regular, Menlo, Monaco, Cons=
olas, "Liberation Mono", "Courier New", Courier, monospace; user-select: no=
ne; pointer-events: none; }

.rst-content div[class^=3D"highlight"] pre { white-space: pre; margin: 0px;=
 padding: 12px; display: block; overflow: auto; }

.rst-content div[class^=3D"highlight"] pre .hll { display: block; margin: 0=
px -12px; padding: 0px 12px; }

.rst-content .linenodiv pre, .rst-content div[class^=3D"highlight"] pre, .r=
st-content pre.literal-block { font-family: SFMono-Regular, Menlo, Monaco, =
Consolas, "Liberation Mono", "Courier New", Courier, monospace; font-size: =
12px; line-height: 1.4; }

.rst-content div.highlight .gp, .rst-content div.highlight span.linenos { u=
ser-select: none; pointer-events: none; }

.rst-content div.highlight span.linenos { display: inline-block; padding-le=
ft: 0px; padding-right: 12px; margin-right: 12px; border-right: 1px solid r=
gb(230, 233, 234); }

.rst-content .code-block-caption { font-style: italic; font-size: 85%; line=
-height: 1; padding: 1em 0px; text-align: center; }

@media print {
  .rst-content .codeblock, .rst-content div[class^=3D"highlight"], .rst-con=
tent div[class^=3D"highlight"] pre { white-space: pre-wrap; }
}

.rst-content .admonition, .rst-content .admonition-todo, .rst-content .atte=
ntion, .rst-content .caution, .rst-content .danger, .rst-content .error, .r=
st-content .hint, .rst-content .important, .rst-content .note, .rst-content=
 .seealso, .rst-content .tip, .rst-content .warning { clear: both; }

.rst-content .admonition-todo .last, .rst-content .admonition-todo > :last-=
child, .rst-content .admonition .last, .rst-content .admonition > :last-chi=
ld, .rst-content .attention .last, .rst-content .attention > :last-child, .=
rst-content .caution .last, .rst-content .caution > :last-child, .rst-conte=
nt .danger .last, .rst-content .danger > :last-child, .rst-content .error .=
last, .rst-content .error > :last-child, .rst-content .hint .last, .rst-con=
tent .hint > :last-child, .rst-content .important .last, .rst-content .impo=
rtant > :last-child, .rst-content .note .last, .rst-content .note > :last-c=
hild, .rst-content .seealso .last, .rst-content .seealso > :last-child, .rs=
t-content .tip .last, .rst-content .tip > :last-child, .rst-content .warnin=
g .last, .rst-content .warning > :last-child { margin-bottom: 0px; }

.rst-content .admonition-title::before { margin-right: 4px; }

.rst-content .admonition table { border-color: rgba(0, 0, 0, 0.1); }

.rst-content .admonition table td, .rst-content .admonition table th { back=
ground: transparent !important; border-color: rgba(0, 0, 0, 0.1) !important=
; }

.rst-content .section ol.loweralpha, .rst-content .section ol.loweralpha > =
li, .rst-content .toctree-wrapper ol.loweralpha, .rst-content .toctree-wrap=
per ol.loweralpha > li, .rst-content section ol.loweralpha, .rst-content se=
ction ol.loweralpha > li { list-style: lower-alpha; }

.rst-content .section ol.upperalpha, .rst-content .section ol.upperalpha > =
li, .rst-content .toctree-wrapper ol.upperalpha, .rst-content .toctree-wrap=
per ol.upperalpha > li, .rst-content section ol.upperalpha, .rst-content se=
ction ol.upperalpha > li { list-style: upper-alpha; }

.rst-content .section ol li > *, .rst-content .section ul li > *, .rst-cont=
ent .toctree-wrapper ol li > *, .rst-content .toctree-wrapper ul li > *, .r=
st-content section ol li > *, .rst-content section ul li > * { margin-top: =
12px; margin-bottom: 12px; }

.rst-content .section ol li > :first-child, .rst-content .section ul li > :=
first-child, .rst-content .toctree-wrapper ol li > :first-child, .rst-conte=
nt .toctree-wrapper ul li > :first-child, .rst-content section ol li > :fir=
st-child, .rst-content section ul li > :first-child { margin-top: 0px; }

.rst-content .section ol li > p, .rst-content .section ol li > p:last-child=
, .rst-content .section ul li > p, .rst-content .section ul li > p:last-chi=
ld, .rst-content .toctree-wrapper ol li > p, .rst-content .toctree-wrapper =
ol li > p:last-child, .rst-content .toctree-wrapper ul li > p, .rst-content=
 .toctree-wrapper ul li > p:last-child, .rst-content section ol li > p, .rs=
t-content section ol li > p:last-child, .rst-content section ul li > p, .rs=
t-content section ul li > p:last-child { margin-bottom: 12px; }

.rst-content .section ol li > p:only-child, .rst-content .section ol li > p=
:only-child:last-child, .rst-content .section ul li > p:only-child, .rst-co=
ntent .section ul li > p:only-child:last-child, .rst-content .toctree-wrapp=
er ol li > p:only-child, .rst-content .toctree-wrapper ol li > p:only-child=
:last-child, .rst-content .toctree-wrapper ul li > p:only-child, .rst-conte=
nt .toctree-wrapper ul li > p:only-child:last-child, .rst-content section o=
l li > p:only-child, .rst-content section ol li > p:only-child:last-child, =
.rst-content section ul li > p:only-child, .rst-content section ul li > p:o=
nly-child:last-child { margin-bottom: 0px; }

.rst-content .section ol li > ol, .rst-content .section ol li > ul, .rst-co=
ntent .section ul li > ol, .rst-content .section ul li > ul, .rst-content .=
toctree-wrapper ol li > ol, .rst-content .toctree-wrapper ol li > ul, .rst-=
content .toctree-wrapper ul li > ol, .rst-content .toctree-wrapper ul li > =
ul, .rst-content section ol li > ol, .rst-content section ol li > ul, .rst-=
content section ul li > ol, .rst-content section ul li > ul { margin-bottom=
: 12px; }

.rst-content .section ol.simple li > *, .rst-content .section ol.simple li =
ol, .rst-content .section ol.simple li ul, .rst-content .section ul.simple =
li > *, .rst-content .section ul.simple li ol, .rst-content .section ul.sim=
ple li ul, .rst-content .toctree-wrapper ol.simple li > *, .rst-content .to=
ctree-wrapper ol.simple li ol, .rst-content .toctree-wrapper ol.simple li u=
l, .rst-content .toctree-wrapper ul.simple li > *, .rst-content .toctree-wr=
apper ul.simple li ol, .rst-content .toctree-wrapper ul.simple li ul, .rst-=
content section ol.simple li > *, .rst-content section ol.simple li ol, .rs=
t-content section ol.simple li ul, .rst-content section ul.simple li > *, .=
rst-content section ul.simple li ol, .rst-content section ul.simple li ul {=
 margin-top: 0px; margin-bottom: 0px; }

.rst-content .line-block { margin-left: 0px; margin-bottom: 24px; line-heig=
ht: 24px; }

.rst-content .line-block .line-block { margin-left: 24px; margin-bottom: 0p=
x; }

.rst-content .topic-title { font-weight: 700; margin-bottom: 12px; }

.rst-content .toc-backref { color: rgb(64, 64, 64); }

.rst-content .align-right { float: right; margin: 0px 0px 24px 24px; }

.rst-content .align-left { float: left; margin: 0px 24px 24px 0px; }

.rst-content .align-center { margin: auto; }

.rst-content .align-center:not(table) { display: block; }

.rst-content .code-block-caption .headerlink, .rst-content .eqno .headerlin=
k, .rst-content .toctree-wrapper > p.caption .headerlink, .rst-content dl d=
t .headerlink, .rst-content h1 .headerlink, .rst-content h2 .headerlink, .r=
st-content h3 .headerlink, .rst-content h4 .headerlink, .rst-content h5 .he=
aderlink, .rst-content h6 .headerlink, .rst-content p.caption .headerlink, =
.rst-content p .headerlink, .rst-content table > caption .headerlink { opac=
ity: 0; font-size: 14px; font-family: FontAwesome; margin-left: 0.5em; }

.rst-content .code-block-caption .headerlink:focus, .rst-content .code-bloc=
k-caption:hover .headerlink, .rst-content .eqno .headerlink:focus, .rst-con=
tent .eqno:hover .headerlink, .rst-content .toctree-wrapper > p.caption .he=
aderlink:focus, .rst-content .toctree-wrapper > p.caption:hover .headerlink=
, .rst-content dl dt .headerlink:focus, .rst-content dl dt:hover .headerlin=
k, .rst-content h1 .headerlink:focus, .rst-content h1:hover .headerlink, .r=
st-content h2 .headerlink:focus, .rst-content h2:hover .headerlink, .rst-co=
ntent h3 .headerlink:focus, .rst-content h3:hover .headerlink, .rst-content=
 h4 .headerlink:focus, .rst-content h4:hover .headerlink, .rst-content h5 .=
headerlink:focus, .rst-content h5:hover .headerlink, .rst-content h6 .heade=
rlink:focus, .rst-content h6:hover .headerlink, .rst-content p.caption .hea=
derlink:focus, .rst-content p.caption:hover .headerlink, .rst-content p .he=
aderlink:focus, .rst-content p:hover .headerlink, .rst-content table > capt=
ion .headerlink:focus, .rst-content table > caption:hover .headerlink { opa=
city: 1; }

.rst-content .btn:focus { outline: solid 2px; }

.rst-content table > caption .headerlink::after { font-size: 12px; }

.rst-content .centered { text-align: center; }

.rst-content .sidebar { float: right; width: 40%; display: block; margin: 0=
px 0px 24px 24px; padding: 24px; background: rgb(243, 246, 246); border: 1p=
x solid rgb(225, 228, 229); }

.rst-content .sidebar dl, .rst-content .sidebar p, .rst-content .sidebar ul=
 { font-size: 90%; }

.rst-content .sidebar .last, .rst-content .sidebar > :last-child { margin-b=
ottom: 0px; }

.rst-content .sidebar .sidebar-title { display: block; font-family: "Roboto=
 Slab", ff-tisa-web-pro, Georgia, Arial, sans-serif; font-weight: 700; back=
ground: rgb(225, 228, 229); padding: 6px 12px; margin: -24px -24px 24px; fo=
nt-size: 100%; }

.rst-content .highlighted { background: rgb(241, 196, 15); box-shadow: rgb(=
241, 196, 15) 0px 0px 0px 2px; display: inline; font-weight: 700; }

.rst-content .citation-reference, .rst-content .footnote-reference { vertic=
al-align: baseline; position: relative; top: -0.4em; line-height: 0; font-s=
ize: 90%; }

.rst-content .hlist { width: 100%; }

.rst-content dl dt span.classifier::before { content: " : "; }

.rst-content dl dt span.classifier-delimiter { display: none !important; }

html.writer-html4 .rst-content table.docutils.citation, html.writer-html4 .=
rst-content table.docutils.footnote { background: none; border: none; }

html.writer-html4 .rst-content table.docutils.citation td, html.writer-html=
4 .rst-content table.docutils.citation tr, html.writer-html4 .rst-content t=
able.docutils.footnote td, html.writer-html4 .rst-content table.docutils.fo=
otnote tr { border: none; white-space: normal; background-color: transparen=
t !important; }

html.writer-html4 .rst-content table.docutils.citation td.label, html.write=
r-html4 .rst-content table.docutils.footnote td.label { padding-left: 0px; =
padding-right: 0px; vertical-align: top; }

html.writer-html5 .rst-content dl.field-list, html.writer-html5 .rst-conten=
t dl.footnote { display: grid; grid-template-columns: max-content auto; }

html.writer-html5 .rst-content dl.field-list > dt, html.writer-html5 .rst-c=
ontent dl.footnote > dt { padding-left: 1rem; }

html.writer-html5 .rst-content dl.field-list > dt::after, html.writer-html5=
 .rst-content dl.footnote > dt::after { content: ":"; }

html.writer-html5 .rst-content dl.field-list > dd, html.writer-html5 .rst-c=
ontent dl.field-list > dt, html.writer-html5 .rst-content dl.footnote > dd,=
 html.writer-html5 .rst-content dl.footnote > dt { margin-bottom: 0px; }

html.writer-html5 .rst-content dl.footnote { font-size: 0.9rem; }

html.writer-html5 .rst-content dl.footnote > dt { margin: 0px 0.5rem 0.5rem=
 0px; line-height: 1.2rem; word-break: break-all; font-weight: 400; }

html.writer-html5 .rst-content dl.footnote > dt > span.brackets { margin-ri=
ght: 0.5rem; }

html.writer-html5 .rst-content dl.footnote > dt > span.brackets::before { c=
ontent: "["; }

html.writer-html5 .rst-content dl.footnote > dt > span.brackets::after { co=
ntent: "]"; }

html.writer-html5 .rst-content dl.footnote > dt > span.fn-backref { font-st=
yle: italic; }

html.writer-html5 .rst-content dl.footnote > dd { margin: 0px 0px 0.5rem; l=
ine-height: 1.2rem; }

html.writer-html5 .rst-content dl.footnote > dd p, html.writer-html5 .rst-c=
ontent dl.option-list kbd { font-size: 0.9rem; }

.rst-content table.docutils.footnote, html.writer-html4 .rst-content table.=
docutils.citation, html.writer-html5 .rst-content dl.footnote { color: grey=
; }

.rst-content table.docutils.footnote code, .rst-content table.docutils.foot=
note tt, html.writer-html4 .rst-content table.docutils.citation code, html.=
writer-html4 .rst-content table.docutils.citation tt, html.writer-html5 .rs=
t-content dl.footnote code, html.writer-html5 .rst-content dl.footnote tt {=
 color: rgb(85, 85, 85); }

.rst-content .wy-table-responsive.citation, .rst-content .wy-table-responsi=
ve.footnote { margin-bottom: 0px; }

.rst-content .wy-table-responsive.citation + :not(.citation), .rst-content =
.wy-table-responsive.footnote + :not(.footnote) { margin-top: 24px; }

.rst-content .wy-table-responsive.citation:last-child, .rst-content .wy-tab=
le-responsive.footnote:last-child { margin-bottom: 24px; }

.rst-content table.docutils th { border-color: rgb(225, 228, 229); }

html.writer-html5 .rst-content table.docutils th { border: 1px solid rgb(22=
5, 228, 229); }

html.writer-html5 .rst-content table.docutils td > p, html.writer-html5 .rs=
t-content table.docutils th > p { line-height: 1rem; margin-bottom: 0px; fo=
nt-size: 0.9rem; }

.rst-content table.docutils td .last, .rst-content table.docutils td .last =
> :last-child { margin-bottom: 0px; }

.rst-content table.field-list, .rst-content table.field-list td { border: n=
one; }

.rst-content table.field-list td p { font-size: inherit; line-height: inher=
it; }

.rst-content table.field-list td > strong { display: inline-block; }

.rst-content table.field-list .field-name { padding-right: 10px; text-align=
: left; white-space: nowrap; }

.rst-content table.field-list .field-body { text-align: left; }

.rst-content code, .rst-content tt { color: rgb(0, 0, 0); font-family: SFMo=
no-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", Cour=
ier, monospace; padding: 2px 5px; }

.rst-content code big, .rst-content code em, .rst-content tt big, .rst-cont=
ent tt em { font-size: 100% !important; line-height: normal; }

.rst-content code.literal, .rst-content tt.literal { color: rgb(231, 76, 60=
); white-space: normal; }

.rst-content code.xref, .rst-content tt.xref, a .rst-content code, a .rst-c=
ontent tt { font-weight: 700; color: rgb(64, 64, 64); }

.rst-content kbd, .rst-content pre, .rst-content samp { font-family: SFMono=
-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", Courie=
r, monospace; }

.rst-content a code, .rst-content a tt { color: rgb(41, 128, 185); }

.rst-content dl { margin-bottom: 24px; }

.rst-content dl dt { font-weight: 700; margin-bottom: 12px; }

.rst-content dl ol, .rst-content dl p, .rst-content dl table, .rst-content =
dl ul { margin-bottom: 12px; }

.rst-content dl dd { margin: 0px 0px 12px 24px; line-height: 24px; }

html.writer-html4 .rst-content dl:not(.docutils), html.writer-html5 .rst-co=
ntent dl[class]:not(.option-list):not(.field-list):not(.footnote):not(.glos=
sary):not(.simple) { margin-bottom: 24px; }

html.writer-html4 .rst-content dl:not(.docutils) > dt, html.writer-html5 .r=
st-content dl[class]:not(.option-list):not(.field-list):not(.footnote):not(=
.glossary):not(.simple) > dt { display: table; margin: 6px 0px; font-size: =
90%; line-height: normal; background: rgb(231, 242, 250); color: rgb(41, 12=
8, 185); border-top: 3px solid rgb(106, 176, 222); padding: 6px; position: =
relative; }

html.writer-html4 .rst-content dl:not(.docutils) > dt::before, html.writer-=
html5 .rst-content dl[class]:not(.option-list):not(.field-list):not(.footno=
te):not(.glossary):not(.simple) > dt::before { color: rgb(106, 176, 222); }

html.writer-html4 .rst-content dl:not(.docutils) > dt .headerlink, html.wri=
ter-html5 .rst-content dl[class]:not(.option-list):not(.field-list):not(.fo=
otnote):not(.glossary):not(.simple) > dt .headerlink { color: rgb(64, 64, 6=
4); font-size: 100% !important; }

html.writer-html4 .rst-content dl:not(.docutils) dl:not(.field-list) > dt, =
html.writer-html5 .rst-content dl[class]:not(.option-list):not(.field-list)=
:not(.footnote):not(.glossary):not(.simple) dl:not(.field-list) > dt { marg=
in-bottom: 6px; border-top: none; border-right: none; border-bottom: none; =
border-image: initial; border-left: 3px solid rgb(204, 204, 204); backgroun=
d: rgb(240, 240, 240); color: rgb(85, 85, 85); }

html.writer-html4 .rst-content dl:not(.docutils) dl:not(.field-list) > dt .=
headerlink, html.writer-html5 .rst-content dl[class]:not(.option-list):not(=
.field-list):not(.footnote):not(.glossary):not(.simple) dl:not(.field-list)=
 > dt .headerlink { color: rgb(64, 64, 64); font-size: 100% !important; }

html.writer-html4 .rst-content dl:not(.docutils) > dt:first-child, html.wri=
ter-html5 .rst-content dl[class]:not(.option-list):not(.field-list):not(.fo=
otnote):not(.glossary):not(.simple) > dt:first-child { margin-top: 0px; }

html.writer-html4 .rst-content dl:not(.docutils) code.descclassname, html.w=
riter-html4 .rst-content dl:not(.docutils) code.descname, html.writer-html4=
 .rst-content dl:not(.docutils) tt.descclassname, html.writer-html4 .rst-co=
ntent dl:not(.docutils) tt.descname, html.writer-html5 .rst-content dl[clas=
s]:not(.option-list):not(.field-list):not(.footnote):not(.glossary):not(.si=
mple) code.descclassname, html.writer-html5 .rst-content dl[class]:not(.opt=
ion-list):not(.field-list):not(.footnote):not(.glossary):not(.simple) code.=
descname, html.writer-html5 .rst-content dl[class]:not(.option-list):not(.f=
ield-list):not(.footnote):not(.glossary):not(.simple) tt.descclassname, htm=
l.writer-html5 .rst-content dl[class]:not(.option-list):not(.field-list):no=
t(.footnote):not(.glossary):not(.simple) tt.descname { background-color: tr=
ansparent; border: none; padding: 0px; font-size: 100% !important; }

html.writer-html4 .rst-content dl:not(.docutils) code.descname, html.writer=
-html4 .rst-content dl:not(.docutils) tt.descname, html.writer-html5 .rst-c=
ontent dl[class]:not(.option-list):not(.field-list):not(.footnote):not(.glo=
ssary):not(.simple) code.descname, html.writer-html5 .rst-content dl[class]=
:not(.option-list):not(.field-list):not(.footnote):not(.glossary):not(.simp=
le) tt.descname { font-weight: 700; }

html.writer-html4 .rst-content dl:not(.docutils) .optional, html.writer-htm=
l5 .rst-content dl[class]:not(.option-list):not(.field-list):not(.footnote)=
:not(.glossary):not(.simple) .optional { display: inline-block; padding: 0p=
x 4px; color: rgb(0, 0, 0); font-weight: 700; }

html.writer-html4 .rst-content dl:not(.docutils) .property, html.writer-htm=
l5 .rst-content dl[class]:not(.option-list):not(.field-list):not(.footnote)=
:not(.glossary):not(.simple) .property { display: inline-block; padding-rig=
ht: 8px; max-width: 100%; }

html.writer-html4 .rst-content dl:not(.docutils) .k, html.writer-html5 .rst=
-content dl[class]:not(.option-list):not(.field-list):not(.footnote):not(.g=
lossary):not(.simple) .k { font-style: italic; }

html.writer-html4 .rst-content dl:not(.docutils) .descclassname, html.write=
r-html4 .rst-content dl:not(.docutils) .descname, html.writer-html4 .rst-co=
ntent dl:not(.docutils) .sig-name, html.writer-html5 .rst-content dl[class]=
:not(.option-list):not(.field-list):not(.footnote):not(.glossary):not(.simp=
le) .descclassname, html.writer-html5 .rst-content dl[class]:not(.option-li=
st):not(.field-list):not(.footnote):not(.glossary):not(.simple) .descname, =
html.writer-html5 .rst-content dl[class]:not(.option-list):not(.field-list)=
:not(.footnote):not(.glossary):not(.simple) .sig-name { font-family: SFMono=
-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", Courie=
r, monospace; color: rgb(0, 0, 0); }

.rst-content .viewcode-back, .rst-content .viewcode-link { display: inline-=
block; color: rgb(39, 174, 96); font-size: 80%; padding-left: 24px; }

.rst-content .viewcode-back { display: block; float: right; }

.rst-content p.rubric { margin-bottom: 12px; font-weight: 700; }

.rst-content code.download, .rst-content tt.download { background: inherit;=
 padding: inherit; font-weight: 400; font-family: inherit; font-size: inher=
it; color: inherit; border: inherit; white-space: inherit; }

.rst-content code.download span:first-child, .rst-content tt.download span:=
first-child { -webkit-font-smoothing: subpixel-antialiased; }

.rst-content code.download span:first-child::before, .rst-content tt.downlo=
ad span:first-child::before { margin-right: 4px; }

.rst-content .guilabel { border: 1px solid rgb(127, 187, 227); background: =
rgb(231, 242, 250); font-size: 80%; font-weight: 700; border-radius: 4px; p=
adding: 2.4px 6px; margin: auto 2px; }

.rst-content .versionmodified { font-style: italic; }

@media screen and (max-width: 480px) {
  .rst-content .sidebar { width: 100%; }
}

span[id*=3D"MathJax-Span"] { color: rgb(64, 64, 64); }

.math { text-align: center; }

@font-face { font-family: Lato; src: url("fonts/lato-normal.woff2?bd03a2cc2=
77bbbc338d464e679fe9942") format("woff2"), url("fonts/lato-normal.woff?27bd=
77b9162d388cb8d4c4217c7c5e2a") format("woff"); font-weight: 400; font-style=
: normal; font-display: block; }

@font-face { font-family: Lato; src: url("fonts/lato-bold.woff2?cccb8974858=
13c7c256901dbca54ecf2") format("woff2"), url("fonts/lato-bold.woff?d878b6c2=
9b10beca227e9eef4246111b") format("woff"); font-weight: 700; font-style: no=
rmal; font-display: block; }

@font-face { font-family: Lato; src: url("fonts/lato-bold-italic.woff2?0b6b=
b6725576b072c5d0b02ecdd1900d") format("woff2"), url("fonts/lato-bold-italic=
.woff?9c7e4e9eb485b4a121c760e61bc3707c") format("woff"); font-weight: 700; =
font-style: italic; font-display: block; }

@font-face { font-family: Lato; src: url("fonts/lato-normal-italic.woff2?4e=
b103b4d12be57cb1d040ed5e162e9d") format("woff2"), url("fonts/lato-normal-it=
alic.woff?f28f2d6482446544ef1ea1ccc6dd5892") format("woff"); font-weight: 4=
00; font-style: italic; font-display: block; }

@font-face { font-family: "Roboto Slab"; font-style: normal; font-weight: 4=
00; src: url("fonts/Roboto-Slab-Regular.woff2?7abf5b8d04d26a2cafea937019bca=
958") format("woff2"), url("fonts/Roboto-Slab-Regular.woff?c1be9284088d487c=
5e3ff0a10a92e58c") format("woff"); font-display: block; }

@font-face { font-family: "Roboto Slab"; font-style: normal; font-weight: 7=
00; src: url("fonts/Roboto-Slab-Bold.woff2?9984f4a9bda09be08e83f2506954adbe=
") format("woff2"), url("fonts/Roboto-Slab-Bold.woff?bed5564a116b05148e3b3b=
ea6fb1162a") format("woff"); font-display: block; }
------MultipartBoundary--LqhmvZwTEGngQgONNpxZE3xQGOpsvkJLZXDlKAsK95----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.nvidia.com/hpc-sdk/archive/25.3/compilers/cuda-fortran-prog-guide/_static/pygments.css

@charset "utf-8";

pre { line-height: 125%; }

td.linenos .normal { color: inherit; background-color: transparent; padding=
-left: 5px; padding-right: 5px; }

span.linenos { color: inherit; background-color: transparent; padding-left:=
 5px; padding-right: 5px; }

td.linenos .special { color: rgb(0, 0, 0); background-color: rgb(255, 255, =
192); padding-left: 5px; padding-right: 5px; }

span.linenos.special { color: rgb(0, 0, 0); background-color: rgb(255, 255,=
 192); padding-left: 5px; padding-right: 5px; }

.highlight .hll { background-color: rgb(255, 255, 204); }

.highlight { background: rgb(248, 248, 248); }

.highlight .c { color: rgb(61, 123, 123); font-style: italic; }

.highlight .err { border: 1px solid rgb(255, 0, 0); }

.highlight .k { color: rgb(0, 128, 0); font-weight: bold; }

.highlight .o { color: rgb(102, 102, 102); }

.highlight .ch { color: rgb(61, 123, 123); font-style: italic; }

.highlight .cm { color: rgb(61, 123, 123); font-style: italic; }

.highlight .cp { color: rgb(156, 101, 0); }

.highlight .cpf { color: rgb(61, 123, 123); font-style: italic; }

.highlight .c1 { color: rgb(61, 123, 123); font-style: italic; }

.highlight .cs { color: rgb(61, 123, 123); font-style: italic; }

.highlight .gd { color: rgb(160, 0, 0); }

.highlight .ge { font-style: italic; }

.highlight .gr { color: rgb(228, 0, 0); }

.highlight .gh { color: rgb(0, 0, 128); font-weight: bold; }

.highlight .gi { color: rgb(0, 132, 0); }

.highlight .go { color: rgb(113, 113, 113); }

.highlight .gp { color: rgb(0, 0, 128); font-weight: bold; }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(128, 0, 128); font-weight: bold; }

.highlight .gt { color: rgb(0, 68, 221); }

.highlight .kc { color: rgb(0, 128, 0); font-weight: bold; }

.highlight .kd { color: rgb(0, 128, 0); font-weight: bold; }

.highlight .kn { color: rgb(0, 128, 0); font-weight: bold; }

.highlight .kp { color: rgb(0, 128, 0); }

.highlight .kr { color: rgb(0, 128, 0); font-weight: bold; }

.highlight .kt { color: rgb(176, 0, 64); }

.highlight .m { color: rgb(102, 102, 102); }

.highlight .s { color: rgb(186, 33, 33); }

.highlight .na { color: rgb(104, 120, 34); }

.highlight .nb { color: rgb(0, 128, 0); }

.highlight .nc { color: rgb(0, 0, 255); font-weight: bold; }

.highlight .no { color: rgb(136, 0, 0); }

.highlight .nd { color: rgb(170, 34, 255); }

.highlight .ni { color: rgb(113, 113, 113); font-weight: bold; }

.highlight .ne { color: rgb(203, 63, 56); font-weight: bold; }

.highlight .nf { color: rgb(0, 0, 255); }

.highlight .nl { color: rgb(118, 118, 0); }

.highlight .nn { color: rgb(0, 0, 255); font-weight: bold; }

.highlight .nt { color: rgb(0, 128, 0); font-weight: bold; }

.highlight .nv { color: rgb(25, 23, 124); }

.highlight .ow { color: rgb(170, 34, 255); font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .mb { color: rgb(102, 102, 102); }

.highlight .mf { color: rgb(102, 102, 102); }

.highlight .mh { color: rgb(102, 102, 102); }

.highlight .mi { color: rgb(102, 102, 102); }

.highlight .mo { color: rgb(102, 102, 102); }

.highlight .sa { color: rgb(186, 33, 33); }

.highlight .sb { color: rgb(186, 33, 33); }

.highlight .sc { color: rgb(186, 33, 33); }

.highlight .dl { color: rgb(186, 33, 33); }

.highlight .sd { color: rgb(186, 33, 33); font-style: italic; }

.highlight .s2 { color: rgb(186, 33, 33); }

.highlight .se { color: rgb(170, 93, 31); font-weight: bold; }

.highlight .sh { color: rgb(186, 33, 33); }

.highlight .si { color: rgb(164, 90, 119); font-weight: bold; }

.highlight .sx { color: rgb(0, 128, 0); }

.highlight .sr { color: rgb(164, 90, 119); }

.highlight .s1 { color: rgb(186, 33, 33); }

.highlight .ss { color: rgb(25, 23, 124); }

.highlight .bp { color: rgb(0, 128, 0); }

.highlight .fm { color: rgb(0, 0, 255); }

.highlight .vc { color: rgb(25, 23, 124); }

.highlight .vg { color: rgb(25, 23, 124); }

.highlight .vi { color: rgb(25, 23, 124); }

.highlight .vm { color: rgb(25, 23, 124); }

.highlight .il { color: rgb(102, 102, 102); }
------MultipartBoundary--LqhmvZwTEGngQgONNpxZE3xQGOpsvkJLZXDlKAsK95----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-c8affd41-2f12-409c-bd0b-d0812641aab5@mhtml.blink

@charset "utf-8";

@keyframes slide-in-one-tap {=20
  0% { transform: translateY(80px); }
  100% { transform: translateY(0px); }
}

.trust-hide-gracefully { opacity: 0; }

.trust-wallet-one-tap .hidden { display: none; }

.trust-wallet-one-tap .semibold { font-weight: 500; }

.trust-wallet-one-tap .binance-plex { font-family: Binance; }

.trust-wallet-one-tap .rounded-full { border-radius: 50%; }

.trust-wallet-one-tap .flex { display: flex; }

.trust-wallet-one-tap .flex-col { flex-direction: column; }

.trust-wallet-one-tap .items-center { align-items: center; }

.trust-wallet-one-tap .space-between { justify-content: space-between; }

.trust-wallet-one-tap .justify-center { justify-content: center; }

.trust-wallet-one-tap .w-full { width: 100%; }

.trust-wallet-one-tap .box { transition: 0.5s cubic-bezier(0, 0, 0, 1.43); =
animation: 0.5s cubic-bezier(0, 0, 0, 1.43) 0s 1 normal none running slide-=
in-one-tap; width: 384px; border-radius: 15px; background: rgb(255, 255, 25=
5); box-shadow: rgba(0, 0, 0, 0.25) 0px 2px 4px 0px; position: fixed; right=
: 30px; bottom: 30px; z-index: 1020; }

.trust-wallet-one-tap .header { gap: 15px; border-bottom: 1px solid rgb(230=
, 230, 230); padding: 10px 18px; }

.trust-wallet-one-tap .header .left-items { gap: 15px; }

.trust-wallet-one-tap .header .title { color: rgb(30, 35, 41); font-size: 1=
8px; font-weight: 600; line-height: 28px; }

.trust-wallet-one-tap .header .subtitle { color: rgb(71, 77, 87); font-size=
: 14px; line-height: 20px; }

.trust-wallet-one-tap .header .close { color: rgb(30, 35, 41); cursor: poin=
ter; }

.trust-wallet-one-tap .body { padding: 9px 18px; gap: 10px; }

.trust-wallet-one-tap .body .right-items { gap: 10px; width: 100%; }

.trust-wallet-one-tap .body .right-items .wallet-title { color: rgb(30, 35,=
 41); font-size: 16px; font-weight: 600; line-height: 20px; }

.trust-wallet-one-tap .body .right-items .wallet-subtitle { color: rgb(71, =
77, 87); font-size: 14px; line-height: 20px; }

.trust-wallet-one-tap .connect-indicator { gap: 15px; padding: 8px 0px; }

.trust-wallet-one-tap .connect-indicator .flow-icon { color: rgb(71, 77, 87=
); }

.trust-wallet-one-tap .loading-color { color: rgb(255, 255, 255); }

.trust-wallet-one-tap .button { border-radius: 50px; outline: transparent s=
olid 2px; outline-offset: 2px; background-color: rgb(5, 0, 255); border-col=
or: rgb(229, 231, 235); cursor: pointer; text-align: center; height: 45px; =
}

.trust-wallet-one-tap .button .button-text { color: rgb(255, 255, 255); fon=
t-size: 16px; font-weight: 600; line-height: 20px; }

.trust-wallet-one-tap .footer { margin: 20px 30px; }

.trust-wallet-one-tap .check-icon { color: rgb(255, 255, 255); }

@font-face { font-family: Binance; src: url("chrome-extension://egjidjbpgli=
chdcondbcbdnbeeppgdph/fonts/BinancePlex-Regular.otf") format("opentype"); f=
ont-weight: 400; font-style: normal; }

@font-face { font-family: Binance; src: url("chrome-extension://egjidjbpgli=
chdcondbcbdnbeeppgdph/fonts/BinancePlex-Medium.otf") format("opentype"); fo=
nt-weight: 500; font-style: normal; }

@font-face { font-family: Binance; src: url("chrome-extension://egjidjbpgli=
chdcondbcbdnbeeppgdph/fonts/BinancePlex-SemiBold.otf") format("opentype"); =
font-weight: 600; font-style: normal; }
------MultipartBoundary--LqhmvZwTEGngQgONNpxZE3xQGOpsvkJLZXDlKAsK95----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-00a9d64d-96bb-41d1-a530-7d32917b7981@mhtml.blink

@charset "utf-8";

#ytp-caption-window-container .ytp-caption-segment { cursor: text !importan=
t; user-select: text !important; font-family: -apple-system, BlinkMacSystem=
Font, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Fira Sans", "Droid Sa=
ns", "Helvetica Neue", sans-serif !important; }

.caption-visual-line { direction: ltr; display: flex !important; align-item=
s: stretch !important; }

.captions-text .caption-visual-line:first-of-type::after { content: "=E2=A3=
=BF=E2=A3=BF"; box-shadow: rgba(50, 50, 93, 0.25) 0px 30px 60px -12px inset=
, rgba(0, 0, 0, 0.3) 0px 18px 36px -18px inset; display: inline-block; vert=
ical-align: top; opacity: 0; transition: opacity 0.7s ease-in-out; border-r=
adius: 3px !important; color: white !important; background: transparent !im=
portant; }

.ytp-caption-segment { color: white !important; text-shadow: black 1px 1px =
2px !important; backdrop-filter: blur(3px) !important; background: rgba(8, =
8, 8, 0.1) !important; }

.captions-text:hover .caption-visual-line:first-of-type::after { opacity: 1=
; }

.ytp-pause-overlay { display: none !important; }

.ytp-expand-pause-overlay .caption-window { display: block !important; }
------MultipartBoundary--LqhmvZwTEGngQgONNpxZE3xQGOpsvkJLZXDlKAsK95----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-17068ed9-eb5e-4ddd-b262-3834a451267d@mhtml.blink

@charset "utf-8";

#mttContainer { white-space: pre-line; left: 0px !important; top: 0px !impo=
rtant; width: 1000px !important; margin: 0px 0px 0px -500px !important; pos=
ition: fixed !important; z-index: 100000200 !important; background: none !i=
mportant; pointer-events: none !important; display: inline-block !important=
; visibility: visible !important; }

.tippy-box[data-theme~=3D"custom"], .tippy-content * { white-space: pre-lin=
e; font-size: 8px !important; text-align: center !important; overflow-wrap:=
 break-word !important; color: rgb(170, 170, 170) !important; font-family: =
-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cant=
arell, "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif !important; =
}

.tippy-box[data-theme~=3D"custom"] { border: 1px solid rgba(255, 255, 255, =
0); box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3)=
 0px 1px 3px -1px; max-width: 200px !important; backdrop-filter: blur(0px) =
!important; background-color: rgba(255, 255, 255, 0.72) !important; }

[data-tippy-root] { display: inline-block !important; visibility: visible !=
important; position: absolute !important; }

.tippy-box[data-theme~=3D"custom"][data-placement^=3D"top"] > .tippy-arrow:=
:before { border-top-color: rgba(255, 255, 255, 0.72) !important; }

.tippy-box[data-theme~=3D"custom"][data-placement^=3D"bottom"] > .tippy-arr=
ow::before { border-bottom-color: rgba(255, 255, 255, 0.72) !important; }

.tippy-box[data-theme~=3D"custom"][data-placement^=3D"left"] > .tippy-arrow=
::before { border-left-color: rgba(255, 255, 255, 0.72) !important; }

.tippy-box[data-theme~=3D"custom"][data-placement^=3D"right"] > .tippy-arro=
w::before { border-right-color: rgba(255, 255, 255, 0.72) !important; }

.mtt-highlight { background-color: rgba(33, 220, 109, 0.25) !important; pos=
ition: absolute !important; z-index: 100000100 !important; pointer-events: =
none !important; display: inline !important; border-radius: 3px !important;=
 }

.mtt-image { width: 180px !important; border-radius: 3px !important; }

.ocr_text_div { position: absolute; opacity: 0.5; border: 2px solid cornflo=
werblue; color: transparent !important; background: none !important; border=
-radius: 3px !important; }
------MultipartBoundary--LqhmvZwTEGngQgONNpxZE3xQGOpsvkJLZXDlKAsK95------
